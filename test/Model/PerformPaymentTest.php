<?php
/**
 * PerformPaymentTest
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the model.
 */

namespace OpenAPI\Client\Test\Model;

use PHPUnit\Framework\TestCase;

/**
 * PerformPaymentTest Class Doc Comment
 *
 * @category    Class
 * @description Definitions used to perform either a direct, scheduled or recurring payment. Regarding scheduling, the &#x60;scheduling&#x60; field must be set if some scheduling option (other than direct payment) is desired. The scheduling possibilities are:  - Direct payment: For a direct payment, leave empty the &#x60;scheduling&#x60;   field or set it to &#x60;direct&#x60;;  - Single future payment: For a payment scheduled to a future date, set   the &#x60;scheduling&#x60; field to &#x60;scheduled&#x60; and set   the &#x60;firstDueDate&#x60; property with the desired due date;  - Multiple installments, being the first immediately and the rest with   regular 1 month interval in-between: For this, set the &#x60;scheduling&#x60; field   to &#x60;scheduled&#x60; and the &#x60;installmentsCount&#x60; to   a value greater than 1;  - Multiple installments, starting at a specific date, with other   installments with regular 1 month interval in-between: For this, set the   &#x60;scheduling&#x60; field to &#x60;scheduled&#x60;, the   &#x60;installmentsCount&#x60; to a value greater than 1 and the   &#x60;firstInstallmentDate&#x60; with a future date;  - Custom installments: For a full control on the generated installments,   set the &#x60;scheduling&#x60; field to &#x60;scheduled&#x60;   and pass in the &#x60;installments&#x60; array. However, there are some rules:    - The total amount must be equals the sum of all installment amounts;    - The first due date must be in the future;    - The due dates of all installments must be in ascending order;    - There must be at least one day between distinct due dates.  - Recurring payment with the first payment immediately, the others at fixed   future dates: This can be achieved by setting the &#x60;scheduling&#x60; field to   &#x60;recurring&#x60; and leaving blank the   &#x60;firstOccurrenceDate&#x60;. It is possible to schedule a limited number of   occurrences, by setting &#x60;occurrencesCount&#x60;, or until it is manually   canceled, by leaving &#x60;occurrencesCount&#x60; empty. Also, it is possible to   customize the interval (default is 1 month) between each occurrence, by   setting the &#x60;occurrenceInterval&#x60; field.  - Recurring payment starting in a future date: This can be achieved by   setting the &#x60;scheduling&#x60; field to &#x60;recurring&#x60;   and setting the &#x60;firstOccurrenceDate&#x60;. The other options, the fixed number   of occurrences (&#x60;occurrencesCount&#x60;) and interval between each occurrence   (&#x60;occurrenceInterval&#x60;) can be set just like the case above.
 * @package     OpenAPI\Client
 * @author      OpenAPI Generator team
 * @link        https://openapi-generator.tech
 */
class PerformPaymentTest extends TestCase
{

    /**
     * Setup before running any test case
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test "PerformPayment"
     */
    public function testPerformPayment()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "amount"
     */
    public function testPropertyAmount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "description"
     */
    public function testPropertyDescription()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "currency"
     */
    public function testPropertyCurrency()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "type"
     */
    public function testPropertyType()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "custom_values"
     */
    public function testPropertyCustomValues()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "subject"
     */
    public function testPropertySubject()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "from_name"
     */
    public function testPropertyFromName()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "to_name"
     */
    public function testPropertyToName()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "installments_count"
     */
    public function testPropertyInstallmentsCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "first_installment_date"
     */
    public function testPropertyFirstInstallmentDate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "installments"
     */
    public function testPropertyInstallments()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "occurrences_count"
     */
    public function testPropertyOccurrencesCount()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "first_occurrence_date"
     */
    public function testPropertyFirstOccurrenceDate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "occurrence_interval"
     */
    public function testPropertyOccurrenceInterval()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "nfc_challence"
     */
    public function testPropertyNfcChallence()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test attribute "scheduling"
     */
    public function testPropertyScheduling()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
