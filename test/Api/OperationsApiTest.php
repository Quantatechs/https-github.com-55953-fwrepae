<?php
/**
 * OperationsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * OperationsApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OperationsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for getAdOperationDataForRun
     *
     * Returns configuration data for running a custom operation over an advertisement.
     *
     */
    public function testGetAdOperationDataForRun()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getContactInfoOperationDataForRun
     *
     * Returns configuration data for running a custom operation over a public contact information.
     *
     */
    public function testGetContactInfoOperationDataForRun()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getContactOperationDataForRun
     *
     * Returns configuration data for running a custom operation over a contact.
     *
     */
    public function testGetContactOperationDataForRun()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getMenuOperationDataForRun
     *
     * Returns configuration data for running a custom operation which is in a custom menu.
     *
     */
    public function testGetMenuOperationDataForRun()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOperationDataForRun
     *
     * Returns configuration data for running a custom operation without additional scope.
     *
     */
    public function testGetOperationDataForRun()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getOwnerOperationDataForRun
     *
     * Returns configuration data for running a custom operation over an owner.
     *
     */
    public function testGetOwnerOperationDataForRun()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getRecordOperationDataForRun
     *
     * Returns configuration data for running a custom operation over a record.
     *
     */
    public function testGetRecordOperationDataForRun()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getTransferOperationDataForRun
     *
     * Returns configuration data for running a custom operation over a transfer.
     *
     */
    public function testGetTransferOperationDataForRun()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listOperationsByAd
     *
     * Lists the custom operations over the given advertisement.
     *
     */
    public function testListOperationsByAd()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listOperationsByContact
     *
     * Lists the custom operations over the given contact.
     *
     */
    public function testListOperationsByContact()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listOperationsByContactInfo
     *
     * Lists the custom operations over the given public contact information.
     *
     */
    public function testListOperationsByContactInfo()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listOperationsByOwner
     *
     * Lists the custom operations over the system or user.
     *
     */
    public function testListOperationsByOwner()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listOperationsByRecord
     *
     * Lists the custom operations over the given record.
     *
     */
    public function testListOperationsByRecord()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listOperationsByTransfer
     *
     * Lists the custom operations over the given transfer.
     *
     */
    public function testListOperationsByTransfer()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runAdOperation
     *
     * Runs a custom operation over an advertisement.
     *
     */
    public function testRunAdOperation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runAdOperationWithUpload
     *
     * Runs a custom operation over an advertisement while uploading a file.
     *
     */
    public function testRunAdOperationWithUpload()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runContactInfoOperation
     *
     * Runs a custom operation over a public contact information.
     *
     */
    public function testRunContactInfoOperation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runContactInfoOperationWithUpload
     *
     * Runs a custom operation over a public contact information while uploading a file.
     *
     */
    public function testRunContactInfoOperationWithUpload()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runContactOperation
     *
     * Runs a custom operation over a contact.
     *
     */
    public function testRunContactOperation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runContactOperationWithUpload
     *
     * Runs a custom operation over an contact while uploading a file.
     *
     */
    public function testRunContactOperationWithUpload()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runCustomOperationCallback
     *
     * Runs the callback of an external redirect custom operation.
     *
     */
    public function testRunCustomOperationCallback()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runMenuOperation
     *
     * Runs a custom operation from a custom menu item.
     *
     */
    public function testRunMenuOperation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runMenuOperationWithUpload
     *
     * Runs a custom operation from a custom menu while uploading a file.
     *
     */
    public function testRunMenuOperationWithUpload()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runOperation
     *
     * Runs a custom operation without additional scope.
     *
     */
    public function testRunOperation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runOperationWithUpload
     *
     * Runs a custom operation without additional scope while uploading a file.
     *
     */
    public function testRunOperationWithUpload()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runOwnerOperation
     *
     * Runs a custom operation either for system or user.
     *
     */
    public function testRunOwnerOperation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runOwnerOperationWithUpload
     *
     * Runs a custom operation either for system or user while uploading a file.
     *
     */
    public function testRunOwnerOperationWithUpload()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runRecordOperation
     *
     * Runs a custom operation over a record.
     *
     */
    public function testRunRecordOperation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runRecordOperationWithUpload
     *
     * Runs a custom operation over a record while uploading a file.
     *
     */
    public function testRunRecordOperationWithUpload()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runTransferOperation
     *
     * Runs a custom operation over a transfer.
     *
     */
    public function testRunTransferOperation()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for runTransferOperationWithUpload
     *
     * Runs a custom operation over a transfer while uploading a file.
     *
     */
    public function testRunTransferOperationWithUpload()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
