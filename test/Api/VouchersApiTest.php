<?php
/**
 * VouchersApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * VouchersApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class VouchersApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for assignVoucher
     *
     * Assigns a generated and open voucher to a user..
     *
     */
    public function testAssignVoucher()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for buyVouchers
     *
     * Buys one or more vouchers for the given user.
     *
     */
    public function testBuyVouchers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for buyVouchersWithStatus
     *
     * Buys one or more vouchers for the given user returning the status..
     *
     */
    public function testBuyVouchersWithStatus()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for cancelVoucher
     *
     * Cancels the voucher.
     *
     */
    public function testCancelVoucher()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for changeVoucherExpirationDate
     *
     * Changes the voucher expiration..
     *
     */
    public function testChangeVoucherExpirationDate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for changeVoucherNotificationSettings
     *
     * Changes a voucher's notification settings..
     *
     */
    public function testChangeVoucherNotificationSettings()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for changeVoucherPin
     *
     * Changes the pin of a particular voucher..
     *
     */
    public function testChangeVoucherPin()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for exportUserVouchers
     *
     * Exports the vouchers search results as file..
     *
     */
    public function testExportUserVouchers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for exportVoucher
     *
     * Exports a voucher details as file..
     *
     */
    public function testExportVoucher()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for exportVoucherTransaction
     *
     * Exports the given voucher transaction as file..
     *
     */
    public function testExportVoucherTransaction()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for exportVouchers
     *
     * Exports the vouchers search results as file..
     *
     */
    public function testExportVouchers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for generateVouchers
     *
     * Generate one or more vouchers..
     *
     */
    public function testGenerateVouchers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getGeneralVouchersDataForSearch
     *
     * Returns data for searching vouchers as admin.
     *
     */
    public function testGetGeneralVouchersDataForSearch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getUserVoucherTransactionsDataForSearch
     *
     * Returns configuration data for searching for voucher transactions.
     *
     */
    public function testGetUserVoucherTransactionsDataForSearch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getUserVouchersDataForSearch
     *
     * Returns data for searching vouchers owned by a user.
     *
     */
    public function testGetUserVouchersDataForSearch()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVoucherDataForBuy
     *
     * Returns data for buying a voucher of a specified type or the list of types to buy..
     *
     */
    public function testGetVoucherDataForBuy()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVoucherDataForGenerate
     *
     * Returns data for generate vouchers of a specified type or the list of types to generate..
     *
     */
    public function testGetVoucherDataForGenerate()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVoucherDataForRedeem
     *
     * Returns data for redeeming a voucher by token.
     *
     */
    public function testGetVoucherDataForRedeem()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVoucherDataForSend
     *
     * Returns data for sending a voucher by e-mail of a specified type or the list of types to send..
     *
     */
    public function testGetVoucherDataForSend()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVoucherDataForTopUp
     *
     * Returns data for topping-up a voucher by token.
     *
     */
    public function testGetVoucherDataForTopUp()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVoucherInitialDataForRedeem
     *
     * Returns initial data for redeeming vouchers.
     *
     */
    public function testGetVoucherInitialDataForRedeem()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVoucherInitialDataForTopUp
     *
     * Returns initial data for topping-up vouchers.
     *
     */
    public function testGetVoucherInitialDataForTopUp()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for getVoucherQrCode
     *
     * Returns the QR-code image for the given voucher.
     *
     */
    public function testGetVoucherQrCode()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for previewBuyVouchers
     *
     * Previews the buying of one or more vouchers for the given user..
     *
     */
    public function testPreviewBuyVouchers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for previewSendVoucher
     *
     * Previews buingy a voucher and sending it to an e-mail address..
     *
     */
    public function testPreviewSendVoucher()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for previewVoucherRedeem
     *
     * Previews a voucher top-up for the given user..
     *
     */
    public function testPreviewVoucherRedeem()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for previewVoucherTopUp
     *
     * Previews a voucher top-up for the given user..
     *
     */
    public function testPreviewVoucherTopUp()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for redeemVoucher
     *
     * Redeems a voucher for the given user.
     *
     */
    public function testRedeemVoucher()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for resendPin
     *
     * Re-sends a the voucher PIN to the client.
     *
     */
    public function testResendPin()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for resendVoucherEmail
     *
     * Re-sends a sent voucher to its destination e-mail address..
     *
     */
    public function testResendVoucherEmail()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchUserVoucherTransactions
     *
     * Searches for vouchers transactions a user has performed..
     *
     */
    public function testSearchUserVoucherTransactions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchUserVouchers
     *
     * Searches for vouchers a user owns or has bought..
     *
     */
    public function testSearchUserVouchers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchVoucherTransactions
     *
     * Searches for transactions of a particular voucher..
     *
     */
    public function testSearchVoucherTransactions()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchVouchers
     *
     * Searches for vouchers as admin.
     *
     */
    public function testSearchVouchers()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for sendVoucher
     *
     * Buy a voucher and send it to an e-mail address.
     *
     */
    public function testSendVoucher()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for topUpVoucher
     *
     * Tops-up a voucher for the given user..
     *
     */
    public function testTopUpVoucher()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for unblockVoucherPin
     *
     * Unblocks the voucher PIN.
     *
     */
    public function testUnblockVoucherPin()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for viewVoucher
     *
     * Returns data for a particular voucher.
     *
     */
    public function testViewVoucher()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }

    /**
     * Test case for viewVoucherTransaction
     *
     * Returns details about a voucher transaction.
     *
     */
    public function testViewVoucherTransaction()
    {
        // TODO: implement
        $this->markTestIncomplete('Not implemented');
    }
}
