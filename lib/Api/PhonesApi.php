<?php
/**
 * PhonesApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PhonesApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PhonesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createPhone' => [
            'application/json',
        ],
        'deletePhone' => [
            'application/json',
        ],
        'disablePhoneForSms' => [
            'application/json',
        ],
        'enablePhoneForSms' => [
            'application/json',
        ],
        'getPasswordInputForDisablePhoneForSms' => [
            'application/json',
        ],
        'getPasswordInputForRemovePhone' => [
            'application/json',
        ],
        'getPhoneDataForEdit' => [
            'application/json',
        ],
        'getPhoneDataForNew' => [
            'application/json',
        ],
        'getUserPhonesListData' => [
            'application/json',
        ],
        'listPhonesByUser' => [
            'application/json',
        ],
        'sendPhoneVerificationCode' => [
            'application/json',
        ],
        'updatePhone' => [
            'application/json',
        ],
        'verifyPhone' => [
            'application/json',
        ],
        'viewPhone' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createPhone
     *
     * Creates a new phone for the given user
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  \OpenAPI\Client\Model\PhoneNew $phone_new The phone to be created (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPhone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\InputError|\OpenAPI\Client\Model\Error
     */
    public function createPhone($user, $phone_new, $confirmation_password = null, string $contentType = self::contentTypes['createPhone'][0])
    {
        list($response) = $this->createPhoneWithHttpInfo($user, $phone_new, $confirmation_password, $contentType);
        return $response;
    }

    /**
     * Operation createPhoneWithHttpInfo
     *
     * Creates a new phone for the given user
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  \OpenAPI\Client\Model\PhoneNew $phone_new The phone to be created (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPhone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\InputError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function createPhoneWithHttpInfo($user, $phone_new, $confirmation_password = null, string $contentType = self::contentTypes['createPhone'][0])
    {
        $request = $this->createPhoneRequest($user, $phone_new, $confirmation_password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\InputError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InputError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InputError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InputError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createPhoneAsync
     *
     * Creates a new phone for the given user
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  \OpenAPI\Client\Model\PhoneNew $phone_new The phone to be created (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPhoneAsync($user, $phone_new, $confirmation_password = null, string $contentType = self::contentTypes['createPhone'][0])
    {
        return $this->createPhoneAsyncWithHttpInfo($user, $phone_new, $confirmation_password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createPhoneAsyncWithHttpInfo
     *
     * Creates a new phone for the given user
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  \OpenAPI\Client\Model\PhoneNew $phone_new The phone to be created (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createPhoneAsyncWithHttpInfo($user, $phone_new, $confirmation_password = null, string $contentType = self::contentTypes['createPhone'][0])
    {
        $returnType = 'string';
        $request = $this->createPhoneRequest($user, $phone_new, $confirmation_password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createPhone'
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  \OpenAPI\Client\Model\PhoneNew $phone_new The phone to be created (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createPhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createPhoneRequest($user, $phone_new, $confirmation_password = null, string $contentType = self::contentTypes['createPhone'][0])
    {

        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling createPhone'
            );
        }

        // verify the required parameter 'phone_new' is set
        if ($phone_new === null || (is_array($phone_new) && count($phone_new) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_new when calling createPhone'
            );
        }



        $resourcePath = '/{user}/phones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($confirmation_password !== null) {
            $headerParams['confirmationPassword'] = ObjectSerializer::toHeaderValue($confirmation_password);
        }

        // path params
        if ($user !== null) {
            $resourcePath = str_replace(
                '{' . 'user' . '}',
                ObjectSerializer::toPathValue($user),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($phone_new)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($phone_new));
            } else {
                $httpBody = $phone_new;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePhone
     *
     * Removes a phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePhone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deletePhone($id_or_number, $confirmation_password = null, string $contentType = self::contentTypes['deletePhone'][0])
    {
        $this->deletePhoneWithHttpInfo($id_or_number, $confirmation_password, $contentType);
    }

    /**
     * Operation deletePhoneWithHttpInfo
     *
     * Removes a phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePhone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePhoneWithHttpInfo($id_or_number, $confirmation_password = null, string $contentType = self::contentTypes['deletePhone'][0])
    {
        $request = $this->deletePhoneRequest($id_or_number, $confirmation_password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ConflictError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePhoneAsync
     *
     * Removes a phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePhoneAsync($id_or_number, $confirmation_password = null, string $contentType = self::contentTypes['deletePhone'][0])
    {
        return $this->deletePhoneAsyncWithHttpInfo($id_or_number, $confirmation_password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePhoneAsyncWithHttpInfo
     *
     * Removes a phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePhoneAsyncWithHttpInfo($id_or_number, $confirmation_password = null, string $contentType = self::contentTypes['deletePhone'][0])
    {
        $returnType = '';
        $request = $this->deletePhoneRequest($id_or_number, $confirmation_password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePhone'
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deletePhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deletePhoneRequest($id_or_number, $confirmation_password = null, string $contentType = self::contentTypes['deletePhone'][0])
    {

        // verify the required parameter 'id_or_number' is set
        if ($id_or_number === null || (is_array($id_or_number) && count($id_or_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_number when calling deletePhone'
            );
        }



        $resourcePath = '/phones/{idOrNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($confirmation_password !== null) {
            $headerParams['confirmationPassword'] = ObjectSerializer::toHeaderValue($confirmation_password);
        }

        // path params
        if ($id_or_number !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrNumber' . '}',
                ObjectSerializer::toPathValue($id_or_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'DELETE',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation disablePhoneForSms
     *
     * Marks a phone as disabled to receive SMS notifications and operate in the SMS channel
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disablePhoneForSms'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function disablePhoneForSms($id_or_number, $confirmation_password = null, string $contentType = self::contentTypes['disablePhoneForSms'][0])
    {
        $this->disablePhoneForSmsWithHttpInfo($id_or_number, $confirmation_password, $contentType);
    }

    /**
     * Operation disablePhoneForSmsWithHttpInfo
     *
     * Marks a phone as disabled to receive SMS notifications and operate in the SMS channel
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disablePhoneForSms'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function disablePhoneForSmsWithHttpInfo($id_or_number, $confirmation_password = null, string $contentType = self::contentTypes['disablePhoneForSms'][0])
    {
        $request = $this->disablePhoneForSmsRequest($id_or_number, $confirmation_password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation disablePhoneForSmsAsync
     *
     * Marks a phone as disabled to receive SMS notifications and operate in the SMS channel
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disablePhoneForSms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disablePhoneForSmsAsync($id_or_number, $confirmation_password = null, string $contentType = self::contentTypes['disablePhoneForSms'][0])
    {
        return $this->disablePhoneForSmsAsyncWithHttpInfo($id_or_number, $confirmation_password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation disablePhoneForSmsAsyncWithHttpInfo
     *
     * Marks a phone as disabled to receive SMS notifications and operate in the SMS channel
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disablePhoneForSms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function disablePhoneForSmsAsyncWithHttpInfo($id_or_number, $confirmation_password = null, string $contentType = self::contentTypes['disablePhoneForSms'][0])
    {
        $returnType = '';
        $request = $this->disablePhoneForSmsRequest($id_or_number, $confirmation_password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'disablePhoneForSms'
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['disablePhoneForSms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function disablePhoneForSmsRequest($id_or_number, $confirmation_password = null, string $contentType = self::contentTypes['disablePhoneForSms'][0])
    {

        // verify the required parameter 'id_or_number' is set
        if ($id_or_number === null || (is_array($id_or_number) && count($id_or_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_number when calling disablePhoneForSms'
            );
        }



        $resourcePath = '/phones/{idOrNumber}/disable-for-sms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($confirmation_password !== null) {
            $headerParams['confirmationPassword'] = ObjectSerializer::toHeaderValue($confirmation_password);
        }

        // path params
        if ($id_or_number !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrNumber' . '}',
                ObjectSerializer::toPathValue($id_or_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation enablePhoneForSms
     *
     * Marks a phone as enabled to receive SMS notifications and operate in the SMS channel
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enablePhoneForSms'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function enablePhoneForSms($id_or_number, string $contentType = self::contentTypes['enablePhoneForSms'][0])
    {
        $this->enablePhoneForSmsWithHttpInfo($id_or_number, $contentType);
    }

    /**
     * Operation enablePhoneForSmsWithHttpInfo
     *
     * Marks a phone as enabled to receive SMS notifications and operate in the SMS channel
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enablePhoneForSms'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function enablePhoneForSmsWithHttpInfo($id_or_number, string $contentType = self::contentTypes['enablePhoneForSms'][0])
    {
        $request = $this->enablePhoneForSmsRequest($id_or_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation enablePhoneForSmsAsync
     *
     * Marks a phone as enabled to receive SMS notifications and operate in the SMS channel
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enablePhoneForSms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enablePhoneForSmsAsync($id_or_number, string $contentType = self::contentTypes['enablePhoneForSms'][0])
    {
        return $this->enablePhoneForSmsAsyncWithHttpInfo($id_or_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation enablePhoneForSmsAsyncWithHttpInfo
     *
     * Marks a phone as enabled to receive SMS notifications and operate in the SMS channel
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enablePhoneForSms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function enablePhoneForSmsAsyncWithHttpInfo($id_or_number, string $contentType = self::contentTypes['enablePhoneForSms'][0])
    {
        $returnType = '';
        $request = $this->enablePhoneForSmsRequest($id_or_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'enablePhoneForSms'
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['enablePhoneForSms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function enablePhoneForSmsRequest($id_or_number, string $contentType = self::contentTypes['enablePhoneForSms'][0])
    {

        // verify the required parameter 'id_or_number' is set
        if ($id_or_number === null || (is_array($id_or_number) && count($id_or_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_number when calling enablePhoneForSms'
            );
        }


        $resourcePath = '/phones/{idOrNumber}/enable-for-sms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_or_number !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrNumber' . '}',
                ObjectSerializer::toPathValue($id_or_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPasswordInputForDisablePhoneForSms
     *
     * Returns a confirmation &#x60;PasswordInput&#x60; for disabling SMS of a phone, if any
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPasswordInputForDisablePhoneForSms'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PasswordInput|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function getPasswordInputForDisablePhoneForSms($id_or_number, $fields = null, string $contentType = self::contentTypes['getPasswordInputForDisablePhoneForSms'][0])
    {
        list($response) = $this->getPasswordInputForDisablePhoneForSmsWithHttpInfo($id_or_number, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getPasswordInputForDisablePhoneForSmsWithHttpInfo
     *
     * Returns a confirmation &#x60;PasswordInput&#x60; for disabling SMS of a phone, if any
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPasswordInputForDisablePhoneForSms'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PasswordInput|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPasswordInputForDisablePhoneForSmsWithHttpInfo($id_or_number, $fields = null, string $contentType = self::contentTypes['getPasswordInputForDisablePhoneForSms'][0])
    {
        $request = $this->getPasswordInputForDisablePhoneForSmsRequest($id_or_number, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PasswordInput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PasswordInput' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PasswordInput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PasswordInput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PasswordInput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPasswordInputForDisablePhoneForSmsAsync
     *
     * Returns a confirmation &#x60;PasswordInput&#x60; for disabling SMS of a phone, if any
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPasswordInputForDisablePhoneForSms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPasswordInputForDisablePhoneForSmsAsync($id_or_number, $fields = null, string $contentType = self::contentTypes['getPasswordInputForDisablePhoneForSms'][0])
    {
        return $this->getPasswordInputForDisablePhoneForSmsAsyncWithHttpInfo($id_or_number, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPasswordInputForDisablePhoneForSmsAsyncWithHttpInfo
     *
     * Returns a confirmation &#x60;PasswordInput&#x60; for disabling SMS of a phone, if any
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPasswordInputForDisablePhoneForSms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPasswordInputForDisablePhoneForSmsAsyncWithHttpInfo($id_or_number, $fields = null, string $contentType = self::contentTypes['getPasswordInputForDisablePhoneForSms'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PasswordInput';
        $request = $this->getPasswordInputForDisablePhoneForSmsRequest($id_or_number, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPasswordInputForDisablePhoneForSms'
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPasswordInputForDisablePhoneForSms'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPasswordInputForDisablePhoneForSmsRequest($id_or_number, $fields = null, string $contentType = self::contentTypes['getPasswordInputForDisablePhoneForSms'][0])
    {

        // verify the required parameter 'id_or_number' is set
        if ($id_or_number === null || (is_array($id_or_number) && count($id_or_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_number when calling getPasswordInputForDisablePhoneForSms'
            );
        }



        $resourcePath = '/phones/{idOrNumber}/password-for-disable-sms';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_or_number !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrNumber' . '}',
                ObjectSerializer::toPathValue($id_or_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPasswordInputForRemovePhone
     *
     * Returns a confirmation &#x60;PasswordInput&#x60; for removing a phone, if any
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPasswordInputForRemovePhone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PasswordInput|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function getPasswordInputForRemovePhone($id_or_number, $fields = null, string $contentType = self::contentTypes['getPasswordInputForRemovePhone'][0])
    {
        list($response) = $this->getPasswordInputForRemovePhoneWithHttpInfo($id_or_number, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getPasswordInputForRemovePhoneWithHttpInfo
     *
     * Returns a confirmation &#x60;PasswordInput&#x60; for removing a phone, if any
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPasswordInputForRemovePhone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PasswordInput|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPasswordInputForRemovePhoneWithHttpInfo($id_or_number, $fields = null, string $contentType = self::contentTypes['getPasswordInputForRemovePhone'][0])
    {
        $request = $this->getPasswordInputForRemovePhoneRequest($id_or_number, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PasswordInput' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PasswordInput' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PasswordInput', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PasswordInput';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PasswordInput',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPasswordInputForRemovePhoneAsync
     *
     * Returns a confirmation &#x60;PasswordInput&#x60; for removing a phone, if any
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPasswordInputForRemovePhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPasswordInputForRemovePhoneAsync($id_or_number, $fields = null, string $contentType = self::contentTypes['getPasswordInputForRemovePhone'][0])
    {
        return $this->getPasswordInputForRemovePhoneAsyncWithHttpInfo($id_or_number, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPasswordInputForRemovePhoneAsyncWithHttpInfo
     *
     * Returns a confirmation &#x60;PasswordInput&#x60; for removing a phone, if any
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPasswordInputForRemovePhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPasswordInputForRemovePhoneAsyncWithHttpInfo($id_or_number, $fields = null, string $contentType = self::contentTypes['getPasswordInputForRemovePhone'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PasswordInput';
        $request = $this->getPasswordInputForRemovePhoneRequest($id_or_number, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPasswordInputForRemovePhone'
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPasswordInputForRemovePhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPasswordInputForRemovePhoneRequest($id_or_number, $fields = null, string $contentType = self::contentTypes['getPasswordInputForRemovePhone'][0])
    {

        // verify the required parameter 'id_or_number' is set
        if ($id_or_number === null || (is_array($id_or_number) && count($id_or_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_number when calling getPasswordInputForRemovePhone'
            );
        }



        $resourcePath = '/phones/{idOrNumber}/password-for-remove';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_or_number !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrNumber' . '}',
                ObjectSerializer::toPathValue($id_or_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPhoneDataForEdit
     *
     * Returns data to edit an existing phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPhoneDataForEdit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PhoneDataForEdit|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function getPhoneDataForEdit($id_or_number, $fields = null, string $contentType = self::contentTypes['getPhoneDataForEdit'][0])
    {
        list($response) = $this->getPhoneDataForEditWithHttpInfo($id_or_number, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getPhoneDataForEditWithHttpInfo
     *
     * Returns data to edit an existing phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPhoneDataForEdit'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PhoneDataForEdit|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPhoneDataForEditWithHttpInfo($id_or_number, $fields = null, string $contentType = self::contentTypes['getPhoneDataForEdit'][0])
    {
        $request = $this->getPhoneDataForEditRequest($id_or_number, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PhoneDataForEdit' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PhoneDataForEdit' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PhoneDataForEdit', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PhoneDataForEdit';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PhoneDataForEdit',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPhoneDataForEditAsync
     *
     * Returns data to edit an existing phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPhoneDataForEdit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPhoneDataForEditAsync($id_or_number, $fields = null, string $contentType = self::contentTypes['getPhoneDataForEdit'][0])
    {
        return $this->getPhoneDataForEditAsyncWithHttpInfo($id_or_number, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPhoneDataForEditAsyncWithHttpInfo
     *
     * Returns data to edit an existing phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPhoneDataForEdit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPhoneDataForEditAsyncWithHttpInfo($id_or_number, $fields = null, string $contentType = self::contentTypes['getPhoneDataForEdit'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PhoneDataForEdit';
        $request = $this->getPhoneDataForEditRequest($id_or_number, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPhoneDataForEdit'
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPhoneDataForEdit'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPhoneDataForEditRequest($id_or_number, $fields = null, string $contentType = self::contentTypes['getPhoneDataForEdit'][0])
    {

        // verify the required parameter 'id_or_number' is set
        if ($id_or_number === null || (is_array($id_or_number) && count($id_or_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_number when calling getPhoneDataForEdit'
            );
        }



        $resourcePath = '/phones/{idOrNumber}/data-for-edit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_or_number !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrNumber' . '}',
                ObjectSerializer::toPathValue($id_or_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPhoneDataForNew
     *
     * Returns data to create a new phone
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  PhoneKind $type type (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPhoneDataForNew'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PhoneDataForNew|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function getPhoneDataForNew($user, $type, $fields = null, string $contentType = self::contentTypes['getPhoneDataForNew'][0])
    {
        list($response) = $this->getPhoneDataForNewWithHttpInfo($user, $type, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getPhoneDataForNewWithHttpInfo
     *
     * Returns data to create a new phone
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  PhoneKind $type (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPhoneDataForNew'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PhoneDataForNew|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPhoneDataForNewWithHttpInfo($user, $type, $fields = null, string $contentType = self::contentTypes['getPhoneDataForNew'][0])
    {
        $request = $this->getPhoneDataForNewRequest($user, $type, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PhoneDataForNew' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PhoneDataForNew' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PhoneDataForNew', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PhoneDataForNew';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PhoneDataForNew',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPhoneDataForNewAsync
     *
     * Returns data to create a new phone
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  PhoneKind $type (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPhoneDataForNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPhoneDataForNewAsync($user, $type, $fields = null, string $contentType = self::contentTypes['getPhoneDataForNew'][0])
    {
        return $this->getPhoneDataForNewAsyncWithHttpInfo($user, $type, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPhoneDataForNewAsyncWithHttpInfo
     *
     * Returns data to create a new phone
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  PhoneKind $type (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPhoneDataForNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPhoneDataForNewAsyncWithHttpInfo($user, $type, $fields = null, string $contentType = self::contentTypes['getPhoneDataForNew'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PhoneDataForNew';
        $request = $this->getPhoneDataForNewRequest($user, $type, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPhoneDataForNew'
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  PhoneKind $type (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getPhoneDataForNew'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getPhoneDataForNewRequest($user, $type, $fields = null, string $contentType = self::contentTypes['getPhoneDataForNew'][0])
    {

        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling getPhoneDataForNew'
            );
        }

        // verify the required parameter 'type' is set
        if ($type === null || (is_array($type) && count($type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $type when calling getPhoneDataForNew'
            );
        }



        $resourcePath = '/{user}/phones/data-for-new';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'PhoneKind', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($user !== null) {
            $resourcePath = str_replace(
                '{' . 'user' . '}',
                ObjectSerializer::toPathValue($user),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getUserPhonesListData
     *
     * Returns data for listing a user&#39;s phones
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserPhonesListData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\UserPhonesListData|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function getUserPhonesListData($user, $fields = null, string $contentType = self::contentTypes['getUserPhonesListData'][0])
    {
        list($response) = $this->getUserPhonesListDataWithHttpInfo($user, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getUserPhonesListDataWithHttpInfo
     *
     * Returns data for listing a user&#39;s phones
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserPhonesListData'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\UserPhonesListData|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getUserPhonesListDataWithHttpInfo($user, $fields = null, string $contentType = self::contentTypes['getUserPhonesListData'][0])
    {
        $request = $this->getUserPhonesListDataRequest($user, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\UserPhonesListData' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UserPhonesListData' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UserPhonesListData', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\UserPhonesListData';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UserPhonesListData',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getUserPhonesListDataAsync
     *
     * Returns data for listing a user&#39;s phones
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserPhonesListData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserPhonesListDataAsync($user, $fields = null, string $contentType = self::contentTypes['getUserPhonesListData'][0])
    {
        return $this->getUserPhonesListDataAsyncWithHttpInfo($user, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getUserPhonesListDataAsyncWithHttpInfo
     *
     * Returns data for listing a user&#39;s phones
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserPhonesListData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getUserPhonesListDataAsyncWithHttpInfo($user, $fields = null, string $contentType = self::contentTypes['getUserPhonesListData'][0])
    {
        $returnType = '\OpenAPI\Client\Model\UserPhonesListData';
        $request = $this->getUserPhonesListDataRequest($user, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getUserPhonesListData'
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getUserPhonesListData'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getUserPhonesListDataRequest($user, $fields = null, string $contentType = self::contentTypes['getUserPhonesListData'][0])
    {

        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling getUserPhonesListData'
            );
        }



        $resourcePath = '/{user}/phones/list-data';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($user !== null) {
            $resourcePath = str_replace(
                '{' . 'user' . '}',
                ObjectSerializer::toPathValue($user),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listPhonesByUser
     *
     * Lists all (visible) user phones
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPhonesByUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PhoneResult[]|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function listPhonesByUser($user, $fields = null, string $contentType = self::contentTypes['listPhonesByUser'][0])
    {
        list($response) = $this->listPhonesByUserWithHttpInfo($user, $fields, $contentType);
        return $response;
    }

    /**
     * Operation listPhonesByUserWithHttpInfo
     *
     * Lists all (visible) user phones
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPhonesByUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PhoneResult[]|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function listPhonesByUserWithHttpInfo($user, $fields = null, string $contentType = self::contentTypes['listPhonesByUser'][0])
    {
        $request = $this->listPhonesByUserRequest($user, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PhoneResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PhoneResult[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PhoneResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PhoneResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PhoneResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listPhonesByUserAsync
     *
     * Lists all (visible) user phones
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPhonesByUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPhonesByUserAsync($user, $fields = null, string $contentType = self::contentTypes['listPhonesByUser'][0])
    {
        return $this->listPhonesByUserAsyncWithHttpInfo($user, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listPhonesByUserAsyncWithHttpInfo
     *
     * Lists all (visible) user phones
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPhonesByUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listPhonesByUserAsyncWithHttpInfo($user, $fields = null, string $contentType = self::contentTypes['listPhonesByUser'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PhoneResult[]';
        $request = $this->listPhonesByUserRequest($user, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listPhonesByUser'
     *
     * @param  string $user Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listPhonesByUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listPhonesByUserRequest($user, $fields = null, string $contentType = self::contentTypes['listPhonesByUser'][0])
    {

        // verify the required parameter 'user' is set
        if ($user === null || (is_array($user) && count($user) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling listPhonesByUser'
            );
        }



        $resourcePath = '/{user}/phones';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($user !== null) {
            $resourcePath = str_replace(
                '{' . 'user' . '}',
                ObjectSerializer::toPathValue($user),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendPhoneVerificationCode
     *
     * Sends the verification code for a user to verify the mobile phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPhoneVerificationCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return string|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\InputError|\OpenAPI\Client\Model\Error
     */
    public function sendPhoneVerificationCode($id_or_number, string $contentType = self::contentTypes['sendPhoneVerificationCode'][0])
    {
        list($response) = $this->sendPhoneVerificationCodeWithHttpInfo($id_or_number, $contentType);
        return $response;
    }

    /**
     * Operation sendPhoneVerificationCodeWithHttpInfo
     *
     * Sends the verification code for a user to verify the mobile phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPhoneVerificationCode'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of string|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\InputError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendPhoneVerificationCodeWithHttpInfo($id_or_number, string $contentType = self::contentTypes['sendPhoneVerificationCode'][0])
    {
        $request = $this->sendPhoneVerificationCodeRequest($id_or_number, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('string' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('string' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'string', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\InputError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InputError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InputError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'string';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InputError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendPhoneVerificationCodeAsync
     *
     * Sends the verification code for a user to verify the mobile phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPhoneVerificationCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPhoneVerificationCodeAsync($id_or_number, string $contentType = self::contentTypes['sendPhoneVerificationCode'][0])
    {
        return $this->sendPhoneVerificationCodeAsyncWithHttpInfo($id_or_number, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendPhoneVerificationCodeAsyncWithHttpInfo
     *
     * Sends the verification code for a user to verify the mobile phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPhoneVerificationCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPhoneVerificationCodeAsyncWithHttpInfo($id_or_number, string $contentType = self::contentTypes['sendPhoneVerificationCode'][0])
    {
        $returnType = 'string';
        $request = $this->sendPhoneVerificationCodeRequest($id_or_number, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendPhoneVerificationCode'
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPhoneVerificationCode'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendPhoneVerificationCodeRequest($id_or_number, string $contentType = self::contentTypes['sendPhoneVerificationCode'][0])
    {

        // verify the required parameter 'id_or_number' is set
        if ($id_or_number === null || (is_array($id_or_number) && count($id_or_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_number when calling sendPhoneVerificationCode'
            );
        }


        $resourcePath = '/phones/{idOrNumber}/send-verification-code';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($id_or_number !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrNumber' . '}',
                ObjectSerializer::toPathValue($id_or_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePhone
     *
     * Updates an existing phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  \OpenAPI\Client\Model\PhoneEdit $phone_edit The phone to be edited (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePhone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updatePhone($id_or_number, $phone_edit, $confirmation_password = null, string $contentType = self::contentTypes['updatePhone'][0])
    {
        $this->updatePhoneWithHttpInfo($id_or_number, $phone_edit, $confirmation_password, $contentType);
    }

    /**
     * Operation updatePhoneWithHttpInfo
     *
     * Updates an existing phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  \OpenAPI\Client\Model\PhoneEdit $phone_edit The phone to be edited (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePhone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePhoneWithHttpInfo($id_or_number, $phone_edit, $confirmation_password = null, string $contentType = self::contentTypes['updatePhone'][0])
    {
        $request = $this->updatePhoneRequest($id_or_number, $phone_edit, $confirmation_password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ConflictError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InputError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePhoneAsync
     *
     * Updates an existing phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  \OpenAPI\Client\Model\PhoneEdit $phone_edit The phone to be edited (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePhoneAsync($id_or_number, $phone_edit, $confirmation_password = null, string $contentType = self::contentTypes['updatePhone'][0])
    {
        return $this->updatePhoneAsyncWithHttpInfo($id_or_number, $phone_edit, $confirmation_password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePhoneAsyncWithHttpInfo
     *
     * Updates an existing phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  \OpenAPI\Client\Model\PhoneEdit $phone_edit The phone to be edited (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePhoneAsyncWithHttpInfo($id_or_number, $phone_edit, $confirmation_password = null, string $contentType = self::contentTypes['updatePhone'][0])
    {
        $returnType = '';
        $request = $this->updatePhoneRequest($id_or_number, $phone_edit, $confirmation_password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePhone'
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  \OpenAPI\Client\Model\PhoneEdit $phone_edit The phone to be edited (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['updatePhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function updatePhoneRequest($id_or_number, $phone_edit, $confirmation_password = null, string $contentType = self::contentTypes['updatePhone'][0])
    {

        // verify the required parameter 'id_or_number' is set
        if ($id_or_number === null || (is_array($id_or_number) && count($id_or_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_number when calling updatePhone'
            );
        }

        // verify the required parameter 'phone_edit' is set
        if ($phone_edit === null || (is_array($phone_edit) && count($phone_edit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $phone_edit when calling updatePhone'
            );
        }



        $resourcePath = '/phones/{idOrNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($confirmation_password !== null) {
            $headerParams['confirmationPassword'] = ObjectSerializer::toHeaderValue($confirmation_password);
        }

        // path params
        if ($id_or_number !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrNumber' . '}',
                ObjectSerializer::toPathValue($id_or_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($phone_edit)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($phone_edit));
            } else {
                $httpBody = $phone_edit;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'PUT',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation verifyPhone
     *
     * Marks a mobile phone as verified if the code matches
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $code The verification code received by SMS (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyPhone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\CodeVerificationStatusEnum|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function verifyPhone($id_or_number, $code, string $contentType = self::contentTypes['verifyPhone'][0])
    {
        list($response) = $this->verifyPhoneWithHttpInfo($id_or_number, $code, $contentType);
        return $response;
    }

    /**
     * Operation verifyPhoneWithHttpInfo
     *
     * Marks a mobile phone as verified if the code matches
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $code The verification code received by SMS (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyPhone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\CodeVerificationStatusEnum|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function verifyPhoneWithHttpInfo($id_or_number, $code, string $contentType = self::contentTypes['verifyPhone'][0])
    {
        $request = $this->verifyPhoneRequest($id_or_number, $code, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\CodeVerificationStatusEnum' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\CodeVerificationStatusEnum' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\CodeVerificationStatusEnum', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\CodeVerificationStatusEnum';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\CodeVerificationStatusEnum',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation verifyPhoneAsync
     *
     * Marks a mobile phone as verified if the code matches
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $code The verification code received by SMS (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyPhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verifyPhoneAsync($id_or_number, $code, string $contentType = self::contentTypes['verifyPhone'][0])
    {
        return $this->verifyPhoneAsyncWithHttpInfo($id_or_number, $code, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation verifyPhoneAsyncWithHttpInfo
     *
     * Marks a mobile phone as verified if the code matches
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $code The verification code received by SMS (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyPhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function verifyPhoneAsyncWithHttpInfo($id_or_number, $code, string $contentType = self::contentTypes['verifyPhone'][0])
    {
        $returnType = '\OpenAPI\Client\Model\CodeVerificationStatusEnum';
        $request = $this->verifyPhoneRequest($id_or_number, $code, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'verifyPhone'
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used if the configuration sets mobile numbers to be unique. (required)
     * @param  string $code The verification code received by SMS (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['verifyPhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function verifyPhoneRequest($id_or_number, $code, string $contentType = self::contentTypes['verifyPhone'][0])
    {

        // verify the required parameter 'id_or_number' is set
        if ($id_or_number === null || (is_array($id_or_number) && count($id_or_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_number when calling verifyPhone'
            );
        }

        // verify the required parameter 'code' is set
        if ($code === null || (is_array($code) && count($code) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $code when calling verifyPhone'
            );
        }


        $resourcePath = '/phones/{idOrNumber}/verify';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $code,
            'code', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);


        // path params
        if ($id_or_number !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrNumber' . '}',
                ObjectSerializer::toPathValue($id_or_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['text/plain', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewPhone
     *
     * Returns details of a specific phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['viewPhone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PhoneView|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function viewPhone($id_or_number, $fields = null, string $contentType = self::contentTypes['viewPhone'][0])
    {
        list($response) = $this->viewPhoneWithHttpInfo($id_or_number, $fields, $contentType);
        return $response;
    }

    /**
     * Operation viewPhoneWithHttpInfo
     *
     * Returns details of a specific phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['viewPhone'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PhoneView|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewPhoneWithHttpInfo($id_or_number, $fields = null, string $contentType = self::contentTypes['viewPhone'][0])
    {
        $request = $this->viewPhoneRequest($id_or_number, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PhoneView' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PhoneView' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PhoneView', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PhoneView';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PhoneView',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewPhoneAsync
     *
     * Returns details of a specific phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['viewPhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewPhoneAsync($id_or_number, $fields = null, string $contentType = self::contentTypes['viewPhone'][0])
    {
        return $this->viewPhoneAsyncWithHttpInfo($id_or_number, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewPhoneAsyncWithHttpInfo
     *
     * Returns details of a specific phone
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['viewPhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewPhoneAsyncWithHttpInfo($id_or_number, $fields = null, string $contentType = self::contentTypes['viewPhone'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PhoneView';
        $request = $this->viewPhoneRequest($id_or_number, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewPhone'
     *
     * @param  string $id_or_number Either the id or phone number. Note that optional signs (&#x60;-&#x60; or &#x60;+&#x60;) immediately followed by digits-only are interpreted as ids. To use a phone number, either escape it starting or enclosing with single quotes (&#x60;&#39;&#x60;) or prefixing the value with &#x60;number:&#x60;. Phone number can only be used for mobile phones if the configuration sets mobile numbers to be unique. Land-line phone numbers are never unique, hence, can&#39;t be used. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['viewPhone'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewPhoneRequest($id_or_number, $fields = null, string $contentType = self::contentTypes['viewPhone'][0])
    {

        // verify the required parameter 'id_or_number' is set
        if ($id_or_number === null || (is_array($id_or_number) && count($id_or_number) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id_or_number when calling viewPhone'
            );
        }



        $resourcePath = '/phones/{idOrNumber}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($id_or_number !== null) {
            $resourcePath = str_replace(
                '{' . 'idOrNumber' . '}',
                ObjectSerializer::toPathValue($id_or_number),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
