<?php
/**
 * InstallmentsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * InstallmentsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class InstallmentsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'exportInstallments' => [
            'application/json',
        ],
        'exportInstallmentsOverview' => [
            'application/json',
        ],
        'getInstallmentsDataForSearch' => [
            'application/json',
        ],
        'getInstallmentsOverviewDataForSearch' => [
            'application/json',
        ],
        'processInstallment' => [
            'application/json',
        ],
        'searchInstallments' => [
            'application/json',
        ],
        'searchInstallmentsOverview' => [
            'application/json',
        ],
        'settleInstallment' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation exportInstallments
     *
     * Exports the owner installments search results as file
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstallments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\InputError|\OpenAPI\Client\Model\Error
     */
    public function exportInstallments($owner, $format, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportInstallments'][0])
    {
        list($response) = $this->exportInstallmentsWithHttpInfo($owner, $format, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);
        return $response;
    }

    /**
     * Operation exportInstallmentsWithHttpInfo
     *
     * Exports the owner installments search results as file
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstallments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\InputError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportInstallmentsWithHttpInfo($owner, $format, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportInstallments'][0])
    {
        $request = $this->exportInstallmentsRequest($owner, $format, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\InputError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InputError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InputError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InputError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportInstallmentsAsync
     *
     * Exports the owner installments search results as file
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstallments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInstallmentsAsync($owner, $format, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportInstallments'][0])
    {
        return $this->exportInstallmentsAsyncWithHttpInfo($owner, $format, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportInstallmentsAsyncWithHttpInfo
     *
     * Exports the owner installments search results as file
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstallments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInstallmentsAsyncWithHttpInfo($owner, $format, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportInstallments'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->exportInstallmentsRequest($owner, $format, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportInstallments'
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstallments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportInstallmentsRequest($owner, $format, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportInstallments'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling exportInstallments'
            );
        }

        // verify the required parameter 'format' is set
        if ($format === null || (is_array($format) && count($format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $format when calling exportInstallments'
            );
        }





























        $resourcePath = '/{owner}/installments/export/{format}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_clients,
            'accessClients', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_types,
            'accountTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount_range,
            'amountRange', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_performed_by,
            'authorizationPerformedBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_statuses,
            'authorizationStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorized,
            'authorized', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brokers,
            'brokers', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $by,
            'by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channels,
            'channels', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $creation_types,
            'creationTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_fields,
            'customFields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_period,
            'datePeriod', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'TransferDirectionEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excluded_ids,
            'excludedIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_current_access_client,
            'fromCurrentAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groups,
            'groups', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_generated_by_access_client,
            'includeGeneratedByAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $kinds,
            'kinds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'TransOrderByEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip_total_count,
            'skipTotalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_number,
            'transactionNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_filters,
            'transferFilters', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_types,
            'transferTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user,
            'user', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($format !== null) {
            $resourcePath = str_replace(
                '{' . 'format' . '}',
                ObjectSerializer::toPathValue($format),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportInstallmentsOverview
     *
     * Exports the installments overview search results as file
     *
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstallmentsOverview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\InputError|\OpenAPI\Client\Model\Error
     */
    public function exportInstallmentsOverview($format, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportInstallmentsOverview'][0])
    {
        list($response) = $this->exportInstallmentsOverviewWithHttpInfo($format, $access_clients, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);
        return $response;
    }

    /**
     * Operation exportInstallmentsOverviewWithHttpInfo
     *
     * Exports the installments overview search results as file
     *
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstallmentsOverview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\InputError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportInstallmentsOverviewWithHttpInfo($format, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportInstallmentsOverview'][0])
    {
        $request = $this->exportInstallmentsOverviewRequest($format, $access_clients, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\InputError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InputError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InputError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InputError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportInstallmentsOverviewAsync
     *
     * Exports the installments overview search results as file
     *
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstallmentsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInstallmentsOverviewAsync($format, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportInstallmentsOverview'][0])
    {
        return $this->exportInstallmentsOverviewAsyncWithHttpInfo($format, $access_clients, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportInstallmentsOverviewAsyncWithHttpInfo
     *
     * Exports the installments overview search results as file
     *
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstallmentsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportInstallmentsOverviewAsyncWithHttpInfo($format, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportInstallmentsOverview'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->exportInstallmentsOverviewRequest($format, $access_clients, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportInstallmentsOverview'
     *
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportInstallmentsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportInstallmentsOverviewRequest($format, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportInstallmentsOverview'][0])
    {

        // verify the required parameter 'format' is set
        if ($format === null || (is_array($format) && count($format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $format when calling exportInstallmentsOverview'
            );
        }






























        $resourcePath = '/installments/export/{format}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_clients,
            'accessClients', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount_range,
            'amountRange', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_performed_by,
            'authorizationPerformedBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_statuses,
            'authorizationStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorized,
            'authorized', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brokers,
            'brokers', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $by,
            'by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channels,
            'channels', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $creation_types,
            'creationTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currencies,
            'currencies', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_fields,
            'customFields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_period,
            'datePeriod', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excluded_ids,
            'excludedIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_account_types,
            'fromAccountTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_current_access_client,
            'fromCurrentAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groups,
            'groups', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_generated_by_access_client,
            'includeGeneratedByAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $kinds,
            'kinds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'TransOrderByEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip_total_count,
            'skipTotalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_account_types,
            'toAccountTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_number,
            'transactionNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_filters,
            'transferFilters', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_types,
            'transferTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user,
            'user', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($format !== null) {
            $resourcePath = str_replace(
                '{' . 'format' . '}',
                ObjectSerializer::toPathValue($format),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInstallmentsDataForSearch
     *
     * Returns data for searching installments of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstallmentsDataForSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InstallmentDataForSearch|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function getInstallmentsDataForSearch($owner, $fields = null, string $contentType = self::contentTypes['getInstallmentsDataForSearch'][0])
    {
        list($response) = $this->getInstallmentsDataForSearchWithHttpInfo($owner, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getInstallmentsDataForSearchWithHttpInfo
     *
     * Returns data for searching installments of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstallmentsDataForSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InstallmentDataForSearch|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInstallmentsDataForSearchWithHttpInfo($owner, $fields = null, string $contentType = self::contentTypes['getInstallmentsDataForSearch'][0])
    {
        $request = $this->getInstallmentsDataForSearchRequest($owner, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InstallmentDataForSearch' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InstallmentDataForSearch' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InstallmentDataForSearch', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InstallmentDataForSearch';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InstallmentDataForSearch',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInstallmentsDataForSearchAsync
     *
     * Returns data for searching installments of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstallmentsDataForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstallmentsDataForSearchAsync($owner, $fields = null, string $contentType = self::contentTypes['getInstallmentsDataForSearch'][0])
    {
        return $this->getInstallmentsDataForSearchAsyncWithHttpInfo($owner, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInstallmentsDataForSearchAsyncWithHttpInfo
     *
     * Returns data for searching installments of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstallmentsDataForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstallmentsDataForSearchAsyncWithHttpInfo($owner, $fields = null, string $contentType = self::contentTypes['getInstallmentsDataForSearch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InstallmentDataForSearch';
        $request = $this->getInstallmentsDataForSearchRequest($owner, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInstallmentsDataForSearch'
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstallmentsDataForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInstallmentsDataForSearchRequest($owner, $fields = null, string $contentType = self::contentTypes['getInstallmentsDataForSearch'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getInstallmentsDataForSearch'
            );
        }



        $resourcePath = '/{owner}/installments/data-for-search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getInstallmentsOverviewDataForSearch
     *
     * Returns data for searching installments regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstallmentsOverviewDataForSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InstallmentOverviewDataForSearch|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function getInstallmentsOverviewDataForSearch($fields = null, string $contentType = self::contentTypes['getInstallmentsOverviewDataForSearch'][0])
    {
        list($response) = $this->getInstallmentsOverviewDataForSearchWithHttpInfo($fields, $contentType);
        return $response;
    }

    /**
     * Operation getInstallmentsOverviewDataForSearchWithHttpInfo
     *
     * Returns data for searching installments regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstallmentsOverviewDataForSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InstallmentOverviewDataForSearch|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getInstallmentsOverviewDataForSearchWithHttpInfo($fields = null, string $contentType = self::contentTypes['getInstallmentsOverviewDataForSearch'][0])
    {
        $request = $this->getInstallmentsOverviewDataForSearchRequest($fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InstallmentOverviewDataForSearch' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InstallmentOverviewDataForSearch' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InstallmentOverviewDataForSearch', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InstallmentOverviewDataForSearch';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InstallmentOverviewDataForSearch',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getInstallmentsOverviewDataForSearchAsync
     *
     * Returns data for searching installments regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstallmentsOverviewDataForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstallmentsOverviewDataForSearchAsync($fields = null, string $contentType = self::contentTypes['getInstallmentsOverviewDataForSearch'][0])
    {
        return $this->getInstallmentsOverviewDataForSearchAsyncWithHttpInfo($fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getInstallmentsOverviewDataForSearchAsyncWithHttpInfo
     *
     * Returns data for searching installments regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstallmentsOverviewDataForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getInstallmentsOverviewDataForSearchAsyncWithHttpInfo($fields = null, string $contentType = self::contentTypes['getInstallmentsOverviewDataForSearch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InstallmentOverviewDataForSearch';
        $request = $this->getInstallmentsOverviewDataForSearchRequest($fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getInstallmentsOverviewDataForSearch'
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getInstallmentsOverviewDataForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getInstallmentsOverviewDataForSearchRequest($fields = null, string $contentType = self::contentTypes['getInstallmentsOverviewDataForSearch'][0])
    {



        $resourcePath = '/installments/data-for-search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation processInstallment
     *
     * Processes a installment, generating its corresponding transfer.
     *
     * @param  string $key Either the id or a string in the form &#x60;number@transaction&#x60;, beging transaction either the id or transaction number. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processInstallment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Transfer|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function processInstallment($key, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['processInstallment'][0])
    {
        list($response) = $this->processInstallmentWithHttpInfo($key, $fields, $confirmation_password, $contentType);
        return $response;
    }

    /**
     * Operation processInstallmentWithHttpInfo
     *
     * Processes a installment, generating its corresponding transfer.
     *
     * @param  string $key Either the id or a string in the form &#x60;number@transaction&#x60;, beging transaction either the id or transaction number. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processInstallment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Transfer|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function processInstallmentWithHttpInfo($key, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['processInstallment'][0])
    {
        $request = $this->processInstallmentRequest($key, $fields, $confirmation_password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Transfer' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Transfer' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Transfer', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Transfer';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Transfer',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation processInstallmentAsync
     *
     * Processes a installment, generating its corresponding transfer.
     *
     * @param  string $key Either the id or a string in the form &#x60;number@transaction&#x60;, beging transaction either the id or transaction number. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processInstallment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processInstallmentAsync($key, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['processInstallment'][0])
    {
        return $this->processInstallmentAsyncWithHttpInfo($key, $fields, $confirmation_password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation processInstallmentAsyncWithHttpInfo
     *
     * Processes a installment, generating its corresponding transfer.
     *
     * @param  string $key Either the id or a string in the form &#x60;number@transaction&#x60;, beging transaction either the id or transaction number. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processInstallment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function processInstallmentAsyncWithHttpInfo($key, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['processInstallment'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Transfer';
        $request = $this->processInstallmentRequest($key, $fields, $confirmation_password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'processInstallment'
     *
     * @param  string $key Either the id or a string in the form &#x60;number@transaction&#x60;, beging transaction either the id or transaction number. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['processInstallment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function processInstallmentRequest($key, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['processInstallment'][0])
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling processInstallment'
            );
        }




        $resourcePath = '/installments/{key}/process';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($confirmation_password !== null) {
            $headerParams['confirmationPassword'] = ObjectSerializer::toHeaderValue($confirmation_password);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchInstallments
     *
     * Searches installments of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchInstallments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InstallmentResult[]|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function searchInstallments($owner, $fields = null, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchInstallments'][0])
    {
        list($response) = $this->searchInstallmentsWithHttpInfo($owner, $fields, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);
        return $response;
    }

    /**
     * Operation searchInstallmentsWithHttpInfo
     *
     * Searches installments of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchInstallments'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InstallmentResult[]|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchInstallmentsWithHttpInfo($owner, $fields = null, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchInstallments'][0])
    {
        $request = $this->searchInstallmentsRequest($owner, $fields, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InstallmentResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InstallmentResult[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InstallmentResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InstallmentResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InstallmentResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchInstallmentsAsync
     *
     * Searches installments of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchInstallments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchInstallmentsAsync($owner, $fields = null, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchInstallments'][0])
    {
        return $this->searchInstallmentsAsyncWithHttpInfo($owner, $fields, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchInstallmentsAsyncWithHttpInfo
     *
     * Searches installments of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchInstallments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchInstallmentsAsyncWithHttpInfo($owner, $fields = null, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchInstallments'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InstallmentResult[]';
        $request = $this->searchInstallmentsRequest($owner, $fields, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchInstallments'
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchInstallments'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchInstallmentsRequest($owner, $fields = null, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchInstallments'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling searchInstallments'
            );
        }






























        $resourcePath = '/{owner}/installments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_clients,
            'accessClients', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_types,
            'accountTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount_range,
            'amountRange', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_performed_by,
            'authorizationPerformedBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_statuses,
            'authorizationStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorized,
            'authorized', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brokers,
            'brokers', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $by,
            'by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channels,
            'channels', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $creation_types,
            'creationTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_fields,
            'customFields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_period,
            'datePeriod', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'TransferDirectionEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excluded_ids,
            'excludedIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_current_access_client,
            'fromCurrentAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groups,
            'groups', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_generated_by_access_client,
            'includeGeneratedByAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $kinds,
            'kinds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'TransOrderByEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip_total_count,
            'skipTotalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_number,
            'transactionNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_filters,
            'transferFilters', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_types,
            'transferTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user,
            'user', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchInstallmentsOverview
     *
     * Searches installments regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchInstallmentsOverview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\InstallmentOverviewResult[]|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function searchInstallmentsOverview($fields = null, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchInstallmentsOverview'][0])
    {
        list($response) = $this->searchInstallmentsOverviewWithHttpInfo($fields, $access_clients, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);
        return $response;
    }

    /**
     * Operation searchInstallmentsOverviewWithHttpInfo
     *
     * Searches installments regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchInstallmentsOverview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\InstallmentOverviewResult[]|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchInstallmentsOverviewWithHttpInfo($fields = null, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchInstallmentsOverview'][0])
    {
        $request = $this->searchInstallmentsOverviewRequest($fields, $access_clients, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\InstallmentOverviewResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InstallmentOverviewResult[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InstallmentOverviewResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\InstallmentOverviewResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InstallmentOverviewResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchInstallmentsOverviewAsync
     *
     * Searches installments regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchInstallmentsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchInstallmentsOverviewAsync($fields = null, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchInstallmentsOverview'][0])
    {
        return $this->searchInstallmentsOverviewAsyncWithHttpInfo($fields, $access_clients, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchInstallmentsOverviewAsyncWithHttpInfo
     *
     * Searches installments regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchInstallmentsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchInstallmentsOverviewAsyncWithHttpInfo($fields = null, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchInstallmentsOverview'][0])
    {
        $returnType = '\OpenAPI\Client\Model\InstallmentOverviewResult[]';
        $request = $this->searchInstallmentsOverviewRequest($fields, $access_clients, $amount_range, $authorization_performed_by, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $skip_total_count, $statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchInstallmentsOverview'
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \OpenAPI\Client\Model\InstallmentStatusEnum[] $statuses Possible statuses for installments. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchInstallmentsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchInstallmentsOverviewRequest($fields = null, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $skip_total_count = null, $statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchInstallmentsOverview'][0])
    {































        $resourcePath = '/installments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_clients,
            'accessClients', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount_range,
            'amountRange', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_performed_by,
            'authorizationPerformedBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_statuses,
            'authorizationStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorized,
            'authorized', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brokers,
            'brokers', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $by,
            'by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channels,
            'channels', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $creation_types,
            'creationTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currencies,
            'currencies', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_fields,
            'customFields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_period,
            'datePeriod', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excluded_ids,
            'excludedIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_account_types,
            'fromAccountTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_current_access_client,
            'fromCurrentAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groups,
            'groups', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_generated_by_access_client,
            'includeGeneratedByAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $kinds,
            'kinds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'TransOrderByEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip_total_count,
            'skipTotalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $statuses,
            'statuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_account_types,
            'toAccountTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_number,
            'transactionNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_filters,
            'transferFilters', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_types,
            'transferTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user,
            'user', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation settleInstallment
     *
     * Settles a scheduled payment installment.
     *
     * @param  string $key Either the id or a string in the form &#x60;number@transaction&#x60;, beging transaction either the id or transaction number. (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settleInstallment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function settleInstallment($key, $confirmation_password = null, string $contentType = self::contentTypes['settleInstallment'][0])
    {
        $this->settleInstallmentWithHttpInfo($key, $confirmation_password, $contentType);
    }

    /**
     * Operation settleInstallmentWithHttpInfo
     *
     * Settles a scheduled payment installment.
     *
     * @param  string $key Either the id or a string in the form &#x60;number@transaction&#x60;, beging transaction either the id or transaction number. (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settleInstallment'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function settleInstallmentWithHttpInfo($key, $confirmation_password = null, string $contentType = self::contentTypes['settleInstallment'][0])
    {
        $request = $this->settleInstallmentRequest($key, $confirmation_password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation settleInstallmentAsync
     *
     * Settles a scheduled payment installment.
     *
     * @param  string $key Either the id or a string in the form &#x60;number@transaction&#x60;, beging transaction either the id or transaction number. (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settleInstallment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settleInstallmentAsync($key, $confirmation_password = null, string $contentType = self::contentTypes['settleInstallment'][0])
    {
        return $this->settleInstallmentAsyncWithHttpInfo($key, $confirmation_password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation settleInstallmentAsyncWithHttpInfo
     *
     * Settles a scheduled payment installment.
     *
     * @param  string $key Either the id or a string in the form &#x60;number@transaction&#x60;, beging transaction either the id or transaction number. (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settleInstallment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function settleInstallmentAsyncWithHttpInfo($key, $confirmation_password = null, string $contentType = self::contentTypes['settleInstallment'][0])
    {
        $returnType = '';
        $request = $this->settleInstallmentRequest($key, $confirmation_password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'settleInstallment'
     *
     * @param  string $key Either the id or a string in the form &#x60;number@transaction&#x60;, beging transaction either the id or transaction number. (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['settleInstallment'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function settleInstallmentRequest($key, $confirmation_password = null, string $contentType = self::contentTypes['settleInstallment'][0])
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling settleInstallment'
            );
        }



        $resourcePath = '/installments/{key}/settle';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($confirmation_password !== null) {
            $headerParams['confirmationPassword'] = ObjectSerializer::toHeaderValue($confirmation_password);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
