<?php
/**
 * OIDCApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * OIDCApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class OIDCApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'oidcAuthorize' => [
            'application/json',
        ],
        'oidcJwks' => [
            'application/json',
        ],
        'oidcRegister' => [
            'application/json',
        ],
        'oidcRevoke' => [
            'application/x-www-form-urlencoded',
        ],
        'oidcToken' => [
            'application/x-www-form-urlencoded',
        ],
        'oidcUserInfoGet' => [
            'application/json',
        ],
        'oidcUserInfoPost' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation oidcAuthorize
     *
     * The standard OAuth2 / OpenID Connect authorization endpoint.
     *
     * @param  string $scope A space-delimited list of requested scopes. Scopes are permissions to view user data and to perform operations in behalf of the user.  The OpenID standard scopes are supported: - &#x60;openid&#x60; for enabling the OpenID Connect id tokens. When not   requested, standard OAuth2 will be used;  - &#x60;profile&#x60; for basic profile data access; - &#x60;email&#x60; for e-mail access; - &#x60;phone&#x60; for phone number access; - &#x60;address&#x60; for address access; - &#x60;offline_access&#x60; for refresh tokens to be issued.  Other scopes are defined in Cyclos which represent permissions. These scopes are listed in http://localhost:8080/cyclos/.well-known/openid-configuration. (required)
     * @param  string $response_type A space-delimited list of response types for this authentication. Accepted avalues are:  - &#x60;code&#x60;: returing the Authorization code - &#x60;id_token&#x60;: returns the Id token - &#x60;token&#x60;: returns the access token (required)
     * @param  string $client_id The client id as registered in the Cyclos, in OpenID Connect client. (required)
     * @param  string $redirect_uri The URI to which users will be redirected after authentication. Must match one of the registered redirect URIs in Cyclos, in OpenID Connect client. (required)
     * @param  string $state A client-state string, which is opaque to the server. Will be passed back to the redirect URL as well as in the generated tokens. Can be used to prevent CSRF attacks by clients. (optional)
     * @param  string $response_mode How to pass parameters in the redirect URL. Accepted values are:  - &#x60;query&#x60;: Uses the query string, such as &#x60;https://example.com/result?param1&#x3D;value1&amp;param2&#x3D;value2&#x60; - &#x60;fragment&#x60;: Uses fragments / hash, such as &#x60;https://example.com/result#param1&#x3D;value1&amp;param2&#x3D;value2&#x60; - &#x60;form_post&#x60;: Renders an HTML that immediately performs a FORM POST with the parameters (optional)
     * @param  string $nonce A nonce provided by the client, which will be included in any ID token generated for this session. This is a opaque string for the server, but clients should use it to mitigate replay attacks. (optional)
     * @param  string $display How the consent page should be displayed. Though currently the consent page is responsive, and as such, doesn&#39;t depend on this value, the accepted values are the standard &#x60;page&#x60;, &#x60;popup&#x60; and &#x60;touch&#x60;. (optional)
     * @param  string $prompt Space-delimited string that determines how the consent page is displayed to the end user.  Cyclos currently presents the login and consent page together, so any value other than &#x60;none&#x60; will actually present the page to the end user to login and consent. There is no such state as a &#39;previously logged-in&#39; user that would only consent, or first login and then consent. As such, whenever &#x60;prompt&#x3D;none&#x60;, Cyclos always replies with &#x60;login_required&#x60;. (optional)
     * @param  string $login_hint A principal value (username, e-mail, phone number) for the user that will be initially presented in the authentication page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcAuthorize'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function oidcAuthorize($scope, $response_type, $client_id, $redirect_uri, $state = null, $response_mode = null, $nonce = null, $display = null, $prompt = null, $login_hint = null, string $contentType = self::contentTypes['oidcAuthorize'][0])
    {
        $this->oidcAuthorizeWithHttpInfo($scope, $response_type, $client_id, $redirect_uri, $state, $response_mode, $nonce, $display, $prompt, $login_hint, $contentType);
    }

    /**
     * Operation oidcAuthorizeWithHttpInfo
     *
     * The standard OAuth2 / OpenID Connect authorization endpoint.
     *
     * @param  string $scope A space-delimited list of requested scopes. Scopes are permissions to view user data and to perform operations in behalf of the user.  The OpenID standard scopes are supported: - &#x60;openid&#x60; for enabling the OpenID Connect id tokens. When not   requested, standard OAuth2 will be used;  - &#x60;profile&#x60; for basic profile data access; - &#x60;email&#x60; for e-mail access; - &#x60;phone&#x60; for phone number access; - &#x60;address&#x60; for address access; - &#x60;offline_access&#x60; for refresh tokens to be issued.  Other scopes are defined in Cyclos which represent permissions. These scopes are listed in http://localhost:8080/cyclos/.well-known/openid-configuration. (required)
     * @param  string $response_type A space-delimited list of response types for this authentication. Accepted avalues are:  - &#x60;code&#x60;: returing the Authorization code - &#x60;id_token&#x60;: returns the Id token - &#x60;token&#x60;: returns the access token (required)
     * @param  string $client_id The client id as registered in the Cyclos, in OpenID Connect client. (required)
     * @param  string $redirect_uri The URI to which users will be redirected after authentication. Must match one of the registered redirect URIs in Cyclos, in OpenID Connect client. (required)
     * @param  string $state A client-state string, which is opaque to the server. Will be passed back to the redirect URL as well as in the generated tokens. Can be used to prevent CSRF attacks by clients. (optional)
     * @param  string $response_mode How to pass parameters in the redirect URL. Accepted values are:  - &#x60;query&#x60;: Uses the query string, such as &#x60;https://example.com/result?param1&#x3D;value1&amp;param2&#x3D;value2&#x60; - &#x60;fragment&#x60;: Uses fragments / hash, such as &#x60;https://example.com/result#param1&#x3D;value1&amp;param2&#x3D;value2&#x60; - &#x60;form_post&#x60;: Renders an HTML that immediately performs a FORM POST with the parameters (optional)
     * @param  string $nonce A nonce provided by the client, which will be included in any ID token generated for this session. This is a opaque string for the server, but clients should use it to mitigate replay attacks. (optional)
     * @param  string $display How the consent page should be displayed. Though currently the consent page is responsive, and as such, doesn&#39;t depend on this value, the accepted values are the standard &#x60;page&#x60;, &#x60;popup&#x60; and &#x60;touch&#x60;. (optional)
     * @param  string $prompt Space-delimited string that determines how the consent page is displayed to the end user.  Cyclos currently presents the login and consent page together, so any value other than &#x60;none&#x60; will actually present the page to the end user to login and consent. There is no such state as a &#39;previously logged-in&#39; user that would only consent, or first login and then consent. As such, whenever &#x60;prompt&#x3D;none&#x60;, Cyclos always replies with &#x60;login_required&#x60;. (optional)
     * @param  string $login_hint A principal value (username, e-mail, phone number) for the user that will be initially presented in the authentication page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcAuthorize'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function oidcAuthorizeWithHttpInfo($scope, $response_type, $client_id, $redirect_uri, $state = null, $response_mode = null, $nonce = null, $display = null, $prompt = null, $login_hint = null, string $contentType = self::contentTypes['oidcAuthorize'][0])
    {
        $request = $this->oidcAuthorizeRequest($scope, $response_type, $client_id, $redirect_uri, $state, $response_mode, $nonce, $display, $prompt, $login_hint, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oidcAuthorizeAsync
     *
     * The standard OAuth2 / OpenID Connect authorization endpoint.
     *
     * @param  string $scope A space-delimited list of requested scopes. Scopes are permissions to view user data and to perform operations in behalf of the user.  The OpenID standard scopes are supported: - &#x60;openid&#x60; for enabling the OpenID Connect id tokens. When not   requested, standard OAuth2 will be used;  - &#x60;profile&#x60; for basic profile data access; - &#x60;email&#x60; for e-mail access; - &#x60;phone&#x60; for phone number access; - &#x60;address&#x60; for address access; - &#x60;offline_access&#x60; for refresh tokens to be issued.  Other scopes are defined in Cyclos which represent permissions. These scopes are listed in http://localhost:8080/cyclos/.well-known/openid-configuration. (required)
     * @param  string $response_type A space-delimited list of response types for this authentication. Accepted avalues are:  - &#x60;code&#x60;: returing the Authorization code - &#x60;id_token&#x60;: returns the Id token - &#x60;token&#x60;: returns the access token (required)
     * @param  string $client_id The client id as registered in the Cyclos, in OpenID Connect client. (required)
     * @param  string $redirect_uri The URI to which users will be redirected after authentication. Must match one of the registered redirect URIs in Cyclos, in OpenID Connect client. (required)
     * @param  string $state A client-state string, which is opaque to the server. Will be passed back to the redirect URL as well as in the generated tokens. Can be used to prevent CSRF attacks by clients. (optional)
     * @param  string $response_mode How to pass parameters in the redirect URL. Accepted values are:  - &#x60;query&#x60;: Uses the query string, such as &#x60;https://example.com/result?param1&#x3D;value1&amp;param2&#x3D;value2&#x60; - &#x60;fragment&#x60;: Uses fragments / hash, such as &#x60;https://example.com/result#param1&#x3D;value1&amp;param2&#x3D;value2&#x60; - &#x60;form_post&#x60;: Renders an HTML that immediately performs a FORM POST with the parameters (optional)
     * @param  string $nonce A nonce provided by the client, which will be included in any ID token generated for this session. This is a opaque string for the server, but clients should use it to mitigate replay attacks. (optional)
     * @param  string $display How the consent page should be displayed. Though currently the consent page is responsive, and as such, doesn&#39;t depend on this value, the accepted values are the standard &#x60;page&#x60;, &#x60;popup&#x60; and &#x60;touch&#x60;. (optional)
     * @param  string $prompt Space-delimited string that determines how the consent page is displayed to the end user.  Cyclos currently presents the login and consent page together, so any value other than &#x60;none&#x60; will actually present the page to the end user to login and consent. There is no such state as a &#39;previously logged-in&#39; user that would only consent, or first login and then consent. As such, whenever &#x60;prompt&#x3D;none&#x60;, Cyclos always replies with &#x60;login_required&#x60;. (optional)
     * @param  string $login_hint A principal value (username, e-mail, phone number) for the user that will be initially presented in the authentication page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcAuthorize'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcAuthorizeAsync($scope, $response_type, $client_id, $redirect_uri, $state = null, $response_mode = null, $nonce = null, $display = null, $prompt = null, $login_hint = null, string $contentType = self::contentTypes['oidcAuthorize'][0])
    {
        return $this->oidcAuthorizeAsyncWithHttpInfo($scope, $response_type, $client_id, $redirect_uri, $state, $response_mode, $nonce, $display, $prompt, $login_hint, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oidcAuthorizeAsyncWithHttpInfo
     *
     * The standard OAuth2 / OpenID Connect authorization endpoint.
     *
     * @param  string $scope A space-delimited list of requested scopes. Scopes are permissions to view user data and to perform operations in behalf of the user.  The OpenID standard scopes are supported: - &#x60;openid&#x60; for enabling the OpenID Connect id tokens. When not   requested, standard OAuth2 will be used;  - &#x60;profile&#x60; for basic profile data access; - &#x60;email&#x60; for e-mail access; - &#x60;phone&#x60; for phone number access; - &#x60;address&#x60; for address access; - &#x60;offline_access&#x60; for refresh tokens to be issued.  Other scopes are defined in Cyclos which represent permissions. These scopes are listed in http://localhost:8080/cyclos/.well-known/openid-configuration. (required)
     * @param  string $response_type A space-delimited list of response types for this authentication. Accepted avalues are:  - &#x60;code&#x60;: returing the Authorization code - &#x60;id_token&#x60;: returns the Id token - &#x60;token&#x60;: returns the access token (required)
     * @param  string $client_id The client id as registered in the Cyclos, in OpenID Connect client. (required)
     * @param  string $redirect_uri The URI to which users will be redirected after authentication. Must match one of the registered redirect URIs in Cyclos, in OpenID Connect client. (required)
     * @param  string $state A client-state string, which is opaque to the server. Will be passed back to the redirect URL as well as in the generated tokens. Can be used to prevent CSRF attacks by clients. (optional)
     * @param  string $response_mode How to pass parameters in the redirect URL. Accepted values are:  - &#x60;query&#x60;: Uses the query string, such as &#x60;https://example.com/result?param1&#x3D;value1&amp;param2&#x3D;value2&#x60; - &#x60;fragment&#x60;: Uses fragments / hash, such as &#x60;https://example.com/result#param1&#x3D;value1&amp;param2&#x3D;value2&#x60; - &#x60;form_post&#x60;: Renders an HTML that immediately performs a FORM POST with the parameters (optional)
     * @param  string $nonce A nonce provided by the client, which will be included in any ID token generated for this session. This is a opaque string for the server, but clients should use it to mitigate replay attacks. (optional)
     * @param  string $display How the consent page should be displayed. Though currently the consent page is responsive, and as such, doesn&#39;t depend on this value, the accepted values are the standard &#x60;page&#x60;, &#x60;popup&#x60; and &#x60;touch&#x60;. (optional)
     * @param  string $prompt Space-delimited string that determines how the consent page is displayed to the end user.  Cyclos currently presents the login and consent page together, so any value other than &#x60;none&#x60; will actually present the page to the end user to login and consent. There is no such state as a &#39;previously logged-in&#39; user that would only consent, or first login and then consent. As such, whenever &#x60;prompt&#x3D;none&#x60;, Cyclos always replies with &#x60;login_required&#x60;. (optional)
     * @param  string $login_hint A principal value (username, e-mail, phone number) for the user that will be initially presented in the authentication page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcAuthorize'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcAuthorizeAsyncWithHttpInfo($scope, $response_type, $client_id, $redirect_uri, $state = null, $response_mode = null, $nonce = null, $display = null, $prompt = null, $login_hint = null, string $contentType = self::contentTypes['oidcAuthorize'][0])
    {
        $returnType = '';
        $request = $this->oidcAuthorizeRequest($scope, $response_type, $client_id, $redirect_uri, $state, $response_mode, $nonce, $display, $prompt, $login_hint, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oidcAuthorize'
     *
     * @param  string $scope A space-delimited list of requested scopes. Scopes are permissions to view user data and to perform operations in behalf of the user.  The OpenID standard scopes are supported: - &#x60;openid&#x60; for enabling the OpenID Connect id tokens. When not   requested, standard OAuth2 will be used;  - &#x60;profile&#x60; for basic profile data access; - &#x60;email&#x60; for e-mail access; - &#x60;phone&#x60; for phone number access; - &#x60;address&#x60; for address access; - &#x60;offline_access&#x60; for refresh tokens to be issued.  Other scopes are defined in Cyclos which represent permissions. These scopes are listed in http://localhost:8080/cyclos/.well-known/openid-configuration. (required)
     * @param  string $response_type A space-delimited list of response types for this authentication. Accepted avalues are:  - &#x60;code&#x60;: returing the Authorization code - &#x60;id_token&#x60;: returns the Id token - &#x60;token&#x60;: returns the access token (required)
     * @param  string $client_id The client id as registered in the Cyclos, in OpenID Connect client. (required)
     * @param  string $redirect_uri The URI to which users will be redirected after authentication. Must match one of the registered redirect URIs in Cyclos, in OpenID Connect client. (required)
     * @param  string $state A client-state string, which is opaque to the server. Will be passed back to the redirect URL as well as in the generated tokens. Can be used to prevent CSRF attacks by clients. (optional)
     * @param  string $response_mode How to pass parameters in the redirect URL. Accepted values are:  - &#x60;query&#x60;: Uses the query string, such as &#x60;https://example.com/result?param1&#x3D;value1&amp;param2&#x3D;value2&#x60; - &#x60;fragment&#x60;: Uses fragments / hash, such as &#x60;https://example.com/result#param1&#x3D;value1&amp;param2&#x3D;value2&#x60; - &#x60;form_post&#x60;: Renders an HTML that immediately performs a FORM POST with the parameters (optional)
     * @param  string $nonce A nonce provided by the client, which will be included in any ID token generated for this session. This is a opaque string for the server, but clients should use it to mitigate replay attacks. (optional)
     * @param  string $display How the consent page should be displayed. Though currently the consent page is responsive, and as such, doesn&#39;t depend on this value, the accepted values are the standard &#x60;page&#x60;, &#x60;popup&#x60; and &#x60;touch&#x60;. (optional)
     * @param  string $prompt Space-delimited string that determines how the consent page is displayed to the end user.  Cyclos currently presents the login and consent page together, so any value other than &#x60;none&#x60; will actually present the page to the end user to login and consent. There is no such state as a &#39;previously logged-in&#39; user that would only consent, or first login and then consent. As such, whenever &#x60;prompt&#x3D;none&#x60;, Cyclos always replies with &#x60;login_required&#x60;. (optional)
     * @param  string $login_hint A principal value (username, e-mail, phone number) for the user that will be initially presented in the authentication page. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcAuthorize'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oidcAuthorizeRequest($scope, $response_type, $client_id, $redirect_uri, $state = null, $response_mode = null, $nonce = null, $display = null, $prompt = null, $login_hint = null, string $contentType = self::contentTypes['oidcAuthorize'][0])
    {

        // verify the required parameter 'scope' is set
        if ($scope === null || (is_array($scope) && count($scope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scope when calling oidcAuthorize'
            );
        }

        // verify the required parameter 'response_type' is set
        if ($response_type === null || (is_array($response_type) && count($response_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $response_type when calling oidcAuthorize'
            );
        }

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling oidcAuthorize'
            );
        }

        // verify the required parameter 'redirect_uri' is set
        if ($redirect_uri === null || (is_array($redirect_uri) && count($redirect_uri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redirect_uri when calling oidcAuthorize'
            );
        }








        $resourcePath = '/oidc/authorize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scope,
            'scope', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $response_type,
            'response_type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $client_id,
            'client_id', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $redirect_uri,
            'redirect_uri', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $state,
            'state', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $response_mode,
            'response_mode', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $nonce,
            'nonce', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $display,
            'display', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $prompt,
            'prompt', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $login_hint,
            'login_hint', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/x-www-form-urlencoded', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oidcJwks
     *
     * The standard OpenID Connect JWKS endpoint.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcJwks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\JWKSResponse
     */
    public function oidcJwks(string $contentType = self::contentTypes['oidcJwks'][0])
    {
        list($response) = $this->oidcJwksWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation oidcJwksWithHttpInfo
     *
     * The standard OpenID Connect JWKS endpoint.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcJwks'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\JWKSResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function oidcJwksWithHttpInfo(string $contentType = self::contentTypes['oidcJwks'][0])
    {
        $request = $this->oidcJwksRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\JWKSResponse' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\JWKSResponse' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\JWKSResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\JWKSResponse';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\JWKSResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oidcJwksAsync
     *
     * The standard OpenID Connect JWKS endpoint.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcJwks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcJwksAsync(string $contentType = self::contentTypes['oidcJwks'][0])
    {
        return $this->oidcJwksAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oidcJwksAsyncWithHttpInfo
     *
     * The standard OpenID Connect JWKS endpoint.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcJwks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcJwksAsyncWithHttpInfo(string $contentType = self::contentTypes['oidcJwks'][0])
    {
        $returnType = '\OpenAPI\Client\Model\JWKSResponse';
        $request = $this->oidcJwksRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oidcJwks'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcJwks'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oidcJwksRequest(string $contentType = self::contentTypes['oidcJwks'][0])
    {


        $resourcePath = '/oidc/jwks';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oidcRegister
     *
     * The standard OAuth2 / OpenID dynamic client registration endpoint.
     *
     * @param  \OpenAPI\Client\Model\OidcRegisterParams $oidc_register_params oidc_register_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcRegister'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OidcRegisterResult|\OpenAPI\Client\Model\OidcError|\OpenAPI\Client\Model\OidcError
     */
    public function oidcRegister($oidc_register_params, string $contentType = self::contentTypes['oidcRegister'][0])
    {
        list($response) = $this->oidcRegisterWithHttpInfo($oidc_register_params, $contentType);
        return $response;
    }

    /**
     * Operation oidcRegisterWithHttpInfo
     *
     * The standard OAuth2 / OpenID dynamic client registration endpoint.
     *
     * @param  \OpenAPI\Client\Model\OidcRegisterParams $oidc_register_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcRegister'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OidcRegisterResult|\OpenAPI\Client\Model\OidcError|\OpenAPI\Client\Model\OidcError, HTTP status code, HTTP response headers (array of strings)
     */
    public function oidcRegisterWithHttpInfo($oidc_register_params, string $contentType = self::contentTypes['oidcRegister'][0])
    {
        $request = $this->oidcRegisterRequest($oidc_register_params, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OidcRegisterResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OidcRegisterResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OidcRegisterResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\OidcError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OidcError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OidcError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\OidcError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OidcError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OidcError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OidcRegisterResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OidcRegisterResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OidcError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OidcError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oidcRegisterAsync
     *
     * The standard OAuth2 / OpenID dynamic client registration endpoint.
     *
     * @param  \OpenAPI\Client\Model\OidcRegisterParams $oidc_register_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcRegister'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcRegisterAsync($oidc_register_params, string $contentType = self::contentTypes['oidcRegister'][0])
    {
        return $this->oidcRegisterAsyncWithHttpInfo($oidc_register_params, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oidcRegisterAsyncWithHttpInfo
     *
     * The standard OAuth2 / OpenID dynamic client registration endpoint.
     *
     * @param  \OpenAPI\Client\Model\OidcRegisterParams $oidc_register_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcRegister'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcRegisterAsyncWithHttpInfo($oidc_register_params, string $contentType = self::contentTypes['oidcRegister'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OidcRegisterResult';
        $request = $this->oidcRegisterRequest($oidc_register_params, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oidcRegister'
     *
     * @param  \OpenAPI\Client\Model\OidcRegisterParams $oidc_register_params (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcRegister'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oidcRegisterRequest($oidc_register_params, string $contentType = self::contentTypes['oidcRegister'][0])
    {

        // verify the required parameter 'oidc_register_params' is set
        if ($oidc_register_params === null || (is_array($oidc_register_params) && count($oidc_register_params) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $oidc_register_params when calling oidcRegister'
            );
        }


        $resourcePath = '/oidc/register';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($oidc_register_params)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($oidc_register_params));
            } else {
                $httpBody = $oidc_register_params;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oidcRevoke
     *
     * The standard OAuth2 token revocation endpoint.
     *
     * @param  string $token The token to revoke. May correspond to either a refresh token or an access token. (required)
     * @param  string $client_id The client id when not using an HTTP Basic authentication. (optional)
     * @param  string $client_secret The client secret when not using an HTTP Basic authentication. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcRevoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function oidcRevoke($token, $client_id = null, $client_secret = null, string $contentType = self::contentTypes['oidcRevoke'][0])
    {
        $this->oidcRevokeWithHttpInfo($token, $client_id, $client_secret, $contentType);
    }

    /**
     * Operation oidcRevokeWithHttpInfo
     *
     * The standard OAuth2 token revocation endpoint.
     *
     * @param  string $token The token to revoke. May correspond to either a refresh token or an access token. (required)
     * @param  string $client_id The client id when not using an HTTP Basic authentication. (optional)
     * @param  string $client_secret The client secret when not using an HTTP Basic authentication. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcRevoke'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function oidcRevokeWithHttpInfo($token, $client_id = null, $client_secret = null, string $contentType = self::contentTypes['oidcRevoke'][0])
    {
        $request = $this->oidcRevokeRequest($token, $client_id, $client_secret, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation oidcRevokeAsync
     *
     * The standard OAuth2 token revocation endpoint.
     *
     * @param  string $token The token to revoke. May correspond to either a refresh token or an access token. (required)
     * @param  string $client_id The client id when not using an HTTP Basic authentication. (optional)
     * @param  string $client_secret The client secret when not using an HTTP Basic authentication. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcRevoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcRevokeAsync($token, $client_id = null, $client_secret = null, string $contentType = self::contentTypes['oidcRevoke'][0])
    {
        return $this->oidcRevokeAsyncWithHttpInfo($token, $client_id, $client_secret, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oidcRevokeAsyncWithHttpInfo
     *
     * The standard OAuth2 token revocation endpoint.
     *
     * @param  string $token The token to revoke. May correspond to either a refresh token or an access token. (required)
     * @param  string $client_id The client id when not using an HTTP Basic authentication. (optional)
     * @param  string $client_secret The client secret when not using an HTTP Basic authentication. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcRevoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcRevokeAsyncWithHttpInfo($token, $client_id = null, $client_secret = null, string $contentType = self::contentTypes['oidcRevoke'][0])
    {
        $returnType = '';
        $request = $this->oidcRevokeRequest($token, $client_id, $client_secret, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oidcRevoke'
     *
     * @param  string $token The token to revoke. May correspond to either a refresh token or an access token. (required)
     * @param  string $client_id The client id when not using an HTTP Basic authentication. (optional)
     * @param  string $client_secret The client secret when not using an HTTP Basic authentication. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcRevoke'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oidcRevokeRequest($token, $client_id = null, $client_secret = null, string $contentType = self::contentTypes['oidcRevoke'][0])
    {

        // verify the required parameter 'token' is set
        if ($token === null || (is_array($token) && count($token) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling oidcRevoke'
            );
        }




        $resourcePath = '/oidc/revoke';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($client_id !== null) {
            $formParams['client_id'] = ObjectSerializer::toFormValue($client_id);
        }
        // form params
        if ($client_secret !== null) {
            $formParams['client_secret'] = ObjectSerializer::toFormValue($client_secret);
        }
        // form params
        if ($token !== null) {
            $formParams['token'] = ObjectSerializer::toFormValue($token);
        }

        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oidcToken
     *
     * The standard OAuth2 / OpenID Connect token endpoint.
     *
     * @param  string $grant_type The supported values are &#x60;authorization_code&#x60; and &#x60;refresh_token&#x60;. (required)
     * @param  string $client_id The client id when not using an HTTP Basic authentication. (optional)
     * @param  string $client_secret The client secret when not using an HTTP Basic authentication. (optional)
     * @param  string $code The authorization code received in the authorize endpoint. Required when &#x60;grant_type&#x60; is &#x60;authorization_code&#x60;. (optional)
     * @param  string $redirect_uri The same &#x60;redirect_uri&#x60; passed in the &#x60;authorize&#x60; request. Required when &#x60;grant_type&#x60; is &#x60;authorization_code&#x60;. (optional)
     * @param  string $refresh_token The refresh token requested authorization code received in the authorize endpoint. Required when &#x60;grant_type&#x60; is &#x60;refresh_token&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\OidcTokenResult|\OpenAPI\Client\Model\OidcError|\OpenAPI\Client\Model\OidcError
     */
    public function oidcToken($grant_type, $client_id = null, $client_secret = null, $code = null, $redirect_uri = null, $refresh_token = null, string $contentType = self::contentTypes['oidcToken'][0])
    {
        list($response) = $this->oidcTokenWithHttpInfo($grant_type, $client_id, $client_secret, $code, $redirect_uri, $refresh_token, $contentType);
        return $response;
    }

    /**
     * Operation oidcTokenWithHttpInfo
     *
     * The standard OAuth2 / OpenID Connect token endpoint.
     *
     * @param  string $grant_type The supported values are &#x60;authorization_code&#x60; and &#x60;refresh_token&#x60;. (required)
     * @param  string $client_id The client id when not using an HTTP Basic authentication. (optional)
     * @param  string $client_secret The client secret when not using an HTTP Basic authentication. (optional)
     * @param  string $code The authorization code received in the authorize endpoint. Required when &#x60;grant_type&#x60; is &#x60;authorization_code&#x60;. (optional)
     * @param  string $redirect_uri The same &#x60;redirect_uri&#x60; passed in the &#x60;authorize&#x60; request. Required when &#x60;grant_type&#x60; is &#x60;authorization_code&#x60;. (optional)
     * @param  string $refresh_token The refresh token requested authorization code received in the authorize endpoint. Required when &#x60;grant_type&#x60; is &#x60;refresh_token&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcToken'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\OidcTokenResult|\OpenAPI\Client\Model\OidcError|\OpenAPI\Client\Model\OidcError, HTTP status code, HTTP response headers (array of strings)
     */
    public function oidcTokenWithHttpInfo($grant_type, $client_id = null, $client_secret = null, $code = null, $redirect_uri = null, $refresh_token = null, string $contentType = self::contentTypes['oidcToken'][0])
    {
        $request = $this->oidcTokenRequest($grant_type, $client_id, $client_secret, $code, $redirect_uri, $refresh_token, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\OidcTokenResult' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OidcTokenResult' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OidcTokenResult', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\OpenAPI\Client\Model\OidcError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OidcError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OidcError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\OidcError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OidcError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OidcError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\OidcTokenResult';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OidcTokenResult',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OidcError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OidcError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oidcTokenAsync
     *
     * The standard OAuth2 / OpenID Connect token endpoint.
     *
     * @param  string $grant_type The supported values are &#x60;authorization_code&#x60; and &#x60;refresh_token&#x60;. (required)
     * @param  string $client_id The client id when not using an HTTP Basic authentication. (optional)
     * @param  string $client_secret The client secret when not using an HTTP Basic authentication. (optional)
     * @param  string $code The authorization code received in the authorize endpoint. Required when &#x60;grant_type&#x60; is &#x60;authorization_code&#x60;. (optional)
     * @param  string $redirect_uri The same &#x60;redirect_uri&#x60; passed in the &#x60;authorize&#x60; request. Required when &#x60;grant_type&#x60; is &#x60;authorization_code&#x60;. (optional)
     * @param  string $refresh_token The refresh token requested authorization code received in the authorize endpoint. Required when &#x60;grant_type&#x60; is &#x60;refresh_token&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcTokenAsync($grant_type, $client_id = null, $client_secret = null, $code = null, $redirect_uri = null, $refresh_token = null, string $contentType = self::contentTypes['oidcToken'][0])
    {
        return $this->oidcTokenAsyncWithHttpInfo($grant_type, $client_id, $client_secret, $code, $redirect_uri, $refresh_token, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oidcTokenAsyncWithHttpInfo
     *
     * The standard OAuth2 / OpenID Connect token endpoint.
     *
     * @param  string $grant_type The supported values are &#x60;authorization_code&#x60; and &#x60;refresh_token&#x60;. (required)
     * @param  string $client_id The client id when not using an HTTP Basic authentication. (optional)
     * @param  string $client_secret The client secret when not using an HTTP Basic authentication. (optional)
     * @param  string $code The authorization code received in the authorize endpoint. Required when &#x60;grant_type&#x60; is &#x60;authorization_code&#x60;. (optional)
     * @param  string $redirect_uri The same &#x60;redirect_uri&#x60; passed in the &#x60;authorize&#x60; request. Required when &#x60;grant_type&#x60; is &#x60;authorization_code&#x60;. (optional)
     * @param  string $refresh_token The refresh token requested authorization code received in the authorize endpoint. Required when &#x60;grant_type&#x60; is &#x60;refresh_token&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcTokenAsyncWithHttpInfo($grant_type, $client_id = null, $client_secret = null, $code = null, $redirect_uri = null, $refresh_token = null, string $contentType = self::contentTypes['oidcToken'][0])
    {
        $returnType = '\OpenAPI\Client\Model\OidcTokenResult';
        $request = $this->oidcTokenRequest($grant_type, $client_id, $client_secret, $code, $redirect_uri, $refresh_token, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oidcToken'
     *
     * @param  string $grant_type The supported values are &#x60;authorization_code&#x60; and &#x60;refresh_token&#x60;. (required)
     * @param  string $client_id The client id when not using an HTTP Basic authentication. (optional)
     * @param  string $client_secret The client secret when not using an HTTP Basic authentication. (optional)
     * @param  string $code The authorization code received in the authorize endpoint. Required when &#x60;grant_type&#x60; is &#x60;authorization_code&#x60;. (optional)
     * @param  string $redirect_uri The same &#x60;redirect_uri&#x60; passed in the &#x60;authorize&#x60; request. Required when &#x60;grant_type&#x60; is &#x60;authorization_code&#x60;. (optional)
     * @param  string $refresh_token The refresh token requested authorization code received in the authorize endpoint. Required when &#x60;grant_type&#x60; is &#x60;refresh_token&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcToken'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oidcTokenRequest($grant_type, $client_id = null, $client_secret = null, $code = null, $redirect_uri = null, $refresh_token = null, string $contentType = self::contentTypes['oidcToken'][0])
    {

        // verify the required parameter 'grant_type' is set
        if ($grant_type === null || (is_array($grant_type) && count($grant_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grant_type when calling oidcToken'
            );
        }







        $resourcePath = '/oidc/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($client_id !== null) {
            $formParams['client_id'] = ObjectSerializer::toFormValue($client_id);
        }
        // form params
        if ($client_secret !== null) {
            $formParams['client_secret'] = ObjectSerializer::toFormValue($client_secret);
        }
        // form params
        if ($grant_type !== null) {
            $formParams['grant_type'] = ObjectSerializer::toFormValue($grant_type);
        }
        // form params
        if ($code !== null) {
            $formParams['code'] = ObjectSerializer::toFormValue($code);
        }
        // form params
        if ($redirect_uri !== null) {
            $formParams['redirect_uri'] = ObjectSerializer::toFormValue($redirect_uri);
        }
        // form params
        if ($refresh_token !== null) {
            $formParams['refresh_token'] = ObjectSerializer::toFormValue($refresh_token);
        }

        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oidcUserInfoGet
     *
     * The standard OpenID Connect UserInfo endpoint, using the &#x60;GET&#x60; method.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcUserInfoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\OidcError|\OpenAPI\Client\Model\OidcError|\OpenAPI\Client\Model\OidcError
     */
    public function oidcUserInfoGet(string $contentType = self::contentTypes['oidcUserInfoGet'][0])
    {
        list($response) = $this->oidcUserInfoGetWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation oidcUserInfoGetWithHttpInfo
     *
     * The standard OpenID Connect UserInfo endpoint, using the &#x60;GET&#x60; method.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcUserInfoGet'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\OidcError|\OpenAPI\Client\Model\OidcError|\OpenAPI\Client\Model\OidcError, HTTP status code, HTTP response headers (array of strings)
     */
    public function oidcUserInfoGetWithHttpInfo(string $contentType = self::contentTypes['oidcUserInfoGet'][0])
    {
        $request = $this->oidcUserInfoGetRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\OidcError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OidcError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OidcError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\OidcError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OidcError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OidcError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\OidcError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OidcError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OidcError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OidcError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OidcError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OidcError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oidcUserInfoGetAsync
     *
     * The standard OpenID Connect UserInfo endpoint, using the &#x60;GET&#x60; method.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcUserInfoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcUserInfoGetAsync(string $contentType = self::contentTypes['oidcUserInfoGet'][0])
    {
        return $this->oidcUserInfoGetAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oidcUserInfoGetAsyncWithHttpInfo
     *
     * The standard OpenID Connect UserInfo endpoint, using the &#x60;GET&#x60; method.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcUserInfoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcUserInfoGetAsyncWithHttpInfo(string $contentType = self::contentTypes['oidcUserInfoGet'][0])
    {
        $returnType = 'object';
        $request = $this->oidcUserInfoGetRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oidcUserInfoGet'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcUserInfoGet'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oidcUserInfoGetRequest(string $contentType = self::contentTypes['oidcUserInfoGet'][0])
    {


        $resourcePath = '/oidc/userinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation oidcUserInfoPost
     *
     * The standard OpenID Connect UserInfo endpoint, using the &#x60;POST&#x60; method.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcUserInfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return object|\OpenAPI\Client\Model\OidcError|\OpenAPI\Client\Model\OidcError|\OpenAPI\Client\Model\OidcError
     */
    public function oidcUserInfoPost(string $contentType = self::contentTypes['oidcUserInfoPost'][0])
    {
        list($response) = $this->oidcUserInfoPostWithHttpInfo($contentType);
        return $response;
    }

    /**
     * Operation oidcUserInfoPostWithHttpInfo
     *
     * The standard OpenID Connect UserInfo endpoint, using the &#x60;POST&#x60; method.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcUserInfoPost'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of object|\OpenAPI\Client\Model\OidcError|\OpenAPI\Client\Model\OidcError|\OpenAPI\Client\Model\OidcError, HTTP status code, HTTP response headers (array of strings)
     */
    public function oidcUserInfoPostWithHttpInfo(string $contentType = self::contentTypes['oidcUserInfoPost'][0])
    {
        $request = $this->oidcUserInfoPostRequest($contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('object' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('object' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'object', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\OidcError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OidcError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OidcError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\OidcError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OidcError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OidcError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\OidcError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\OidcError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\OidcError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'object';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OidcError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OidcError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\OidcError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation oidcUserInfoPostAsync
     *
     * The standard OpenID Connect UserInfo endpoint, using the &#x60;POST&#x60; method.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcUserInfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcUserInfoPostAsync(string $contentType = self::contentTypes['oidcUserInfoPost'][0])
    {
        return $this->oidcUserInfoPostAsyncWithHttpInfo($contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation oidcUserInfoPostAsyncWithHttpInfo
     *
     * The standard OpenID Connect UserInfo endpoint, using the &#x60;POST&#x60; method.
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcUserInfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function oidcUserInfoPostAsyncWithHttpInfo(string $contentType = self::contentTypes['oidcUserInfoPost'][0])
    {
        $returnType = 'object';
        $request = $this->oidcUserInfoPostRequest($contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'oidcUserInfoPost'
     *
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['oidcUserInfoPost'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function oidcUserInfoPostRequest(string $contentType = self::contentTypes['oidcUserInfoPost'][0])
    {


        $resourcePath = '/oidc/userinfo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
