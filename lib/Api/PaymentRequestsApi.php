<?php
/**
 * PaymentRequestsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * PaymentRequestsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentRequestsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'acceptPaymentRequest' => [
            'application/json',
        ],
        'cancelPaymentRequest' => [
            'text/plain',
        ],
        'changePaymentRequestExpirationDate' => [
            'application/json',
        ],
        'dataForSendPaymentRequest' => [
            'application/json',
        ],
        'previewPaymentRequest' => [
            'application/json',
        ],
        'rejectPaymentRequest' => [
            'text/plain',
        ],
        'reschedulePaymentRequest' => [
            'application/json',
        ],
        'sendPaymentRequest' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation acceptPaymentRequest
     *
     * Accepts a payment request.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  \OpenAPI\Client\Model\AcceptOrReschedulePaymentRequest $accept_or_reschedule_payment_request The parameters to accept a payment request (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptPaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Transaction|\OpenAPI\Client\Model\PaymentError
     */
    public function acceptPaymentRequest($key, $accept_or_reschedule_payment_request, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['acceptPaymentRequest'][0])
    {
        list($response) = $this->acceptPaymentRequestWithHttpInfo($key, $accept_or_reschedule_payment_request, $fields, $confirmation_password, $contentType);
        return $response;
    }

    /**
     * Operation acceptPaymentRequestWithHttpInfo
     *
     * Accepts a payment request.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  \OpenAPI\Client\Model\AcceptOrReschedulePaymentRequest $accept_or_reschedule_payment_request The parameters to accept a payment request (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptPaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Transaction|\OpenAPI\Client\Model\PaymentError, HTTP status code, HTTP response headers (array of strings)
     */
    public function acceptPaymentRequestWithHttpInfo($key, $accept_or_reschedule_payment_request, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['acceptPaymentRequest'][0])
    {
        $request = $this->acceptPaymentRequestRequest($key, $accept_or_reschedule_payment_request, $fields, $confirmation_password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Transaction' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Transaction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Transaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\PaymentError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PaymentError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PaymentError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Transaction';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Transaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaymentError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation acceptPaymentRequestAsync
     *
     * Accepts a payment request.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  \OpenAPI\Client\Model\AcceptOrReschedulePaymentRequest $accept_or_reschedule_payment_request The parameters to accept a payment request (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptPaymentRequestAsync($key, $accept_or_reschedule_payment_request, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['acceptPaymentRequest'][0])
    {
        return $this->acceptPaymentRequestAsyncWithHttpInfo($key, $accept_or_reschedule_payment_request, $fields, $confirmation_password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation acceptPaymentRequestAsyncWithHttpInfo
     *
     * Accepts a payment request.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  \OpenAPI\Client\Model\AcceptOrReschedulePaymentRequest $accept_or_reschedule_payment_request The parameters to accept a payment request (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function acceptPaymentRequestAsyncWithHttpInfo($key, $accept_or_reschedule_payment_request, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['acceptPaymentRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Transaction';
        $request = $this->acceptPaymentRequestRequest($key, $accept_or_reschedule_payment_request, $fields, $confirmation_password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'acceptPaymentRequest'
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  \OpenAPI\Client\Model\AcceptOrReschedulePaymentRequest $accept_or_reschedule_payment_request The parameters to accept a payment request (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['acceptPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function acceptPaymentRequestRequest($key, $accept_or_reschedule_payment_request, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['acceptPaymentRequest'][0])
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling acceptPaymentRequest'
            );
        }

        // verify the required parameter 'accept_or_reschedule_payment_request' is set
        if ($accept_or_reschedule_payment_request === null || (is_array($accept_or_reschedule_payment_request) && count($accept_or_reschedule_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept_or_reschedule_payment_request when calling acceptPaymentRequest'
            );
        }




        $resourcePath = '/payment-requests/{key}/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($confirmation_password !== null) {
            $headerParams['confirmationPassword'] = ObjectSerializer::toHeaderValue($confirmation_password);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($accept_or_reschedule_payment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($accept_or_reschedule_payment_request));
            } else {
                $httpBody = $accept_or_reschedule_payment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation cancelPaymentRequest
     *
     * Cancels a payment request.
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $body A comment for the cancel action the payee/manager can set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function cancelPaymentRequest($key, $confirmation_password = null, $body = null, string $contentType = self::contentTypes['cancelPaymentRequest'][0])
    {
        $this->cancelPaymentRequestWithHttpInfo($key, $confirmation_password, $body, $contentType);
    }

    /**
     * Operation cancelPaymentRequestWithHttpInfo
     *
     * Cancels a payment request.
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $body A comment for the cancel action the payee/manager can set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function cancelPaymentRequestWithHttpInfo($key, $confirmation_password = null, $body = null, string $contentType = self::contentTypes['cancelPaymentRequest'][0])
    {
        $request = $this->cancelPaymentRequestRequest($key, $confirmation_password, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation cancelPaymentRequestAsync
     *
     * Cancels a payment request.
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $body A comment for the cancel action the payee/manager can set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPaymentRequestAsync($key, $confirmation_password = null, $body = null, string $contentType = self::contentTypes['cancelPaymentRequest'][0])
    {
        return $this->cancelPaymentRequestAsyncWithHttpInfo($key, $confirmation_password, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation cancelPaymentRequestAsyncWithHttpInfo
     *
     * Cancels a payment request.
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $body A comment for the cancel action the payee/manager can set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function cancelPaymentRequestAsyncWithHttpInfo($key, $confirmation_password = null, $body = null, string $contentType = self::contentTypes['cancelPaymentRequest'][0])
    {
        $returnType = '';
        $request = $this->cancelPaymentRequestRequest($key, $confirmation_password, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'cancelPaymentRequest'
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $body A comment for the cancel action the payee/manager can set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['cancelPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function cancelPaymentRequestRequest($key, $confirmation_password = null, $body = null, string $contentType = self::contentTypes['cancelPaymentRequest'][0])
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling cancelPaymentRequest'
            );
        }




        $resourcePath = '/payment-requests/{key}/cancel';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($confirmation_password !== null) {
            $headerParams['confirmationPassword'] = ObjectSerializer::toHeaderValue($confirmation_password);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation changePaymentRequestExpirationDate
     *
     * Changes the payment request expiration.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  \OpenAPI\Client\Model\ChangePaymentRequestExpirationDate $change_payment_request_expiration_date The parameters to change the payment request&#39;s expiration date (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changePaymentRequestExpirationDate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function changePaymentRequestExpirationDate($key, $change_payment_request_expiration_date, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['changePaymentRequestExpirationDate'][0])
    {
        $this->changePaymentRequestExpirationDateWithHttpInfo($key, $change_payment_request_expiration_date, $fields, $confirmation_password, $contentType);
    }

    /**
     * Operation changePaymentRequestExpirationDateWithHttpInfo
     *
     * Changes the payment request expiration.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  \OpenAPI\Client\Model\ChangePaymentRequestExpirationDate $change_payment_request_expiration_date The parameters to change the payment request&#39;s expiration date (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changePaymentRequestExpirationDate'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function changePaymentRequestExpirationDateWithHttpInfo($key, $change_payment_request_expiration_date, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['changePaymentRequestExpirationDate'][0])
    {
        $request = $this->changePaymentRequestExpirationDateRequest($key, $change_payment_request_expiration_date, $fields, $confirmation_password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaymentError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation changePaymentRequestExpirationDateAsync
     *
     * Changes the payment request expiration.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  \OpenAPI\Client\Model\ChangePaymentRequestExpirationDate $change_payment_request_expiration_date The parameters to change the payment request&#39;s expiration date (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changePaymentRequestExpirationDate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changePaymentRequestExpirationDateAsync($key, $change_payment_request_expiration_date, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['changePaymentRequestExpirationDate'][0])
    {
        return $this->changePaymentRequestExpirationDateAsyncWithHttpInfo($key, $change_payment_request_expiration_date, $fields, $confirmation_password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation changePaymentRequestExpirationDateAsyncWithHttpInfo
     *
     * Changes the payment request expiration.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  \OpenAPI\Client\Model\ChangePaymentRequestExpirationDate $change_payment_request_expiration_date The parameters to change the payment request&#39;s expiration date (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changePaymentRequestExpirationDate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function changePaymentRequestExpirationDateAsyncWithHttpInfo($key, $change_payment_request_expiration_date, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['changePaymentRequestExpirationDate'][0])
    {
        $returnType = '';
        $request = $this->changePaymentRequestExpirationDateRequest($key, $change_payment_request_expiration_date, $fields, $confirmation_password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'changePaymentRequestExpirationDate'
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  \OpenAPI\Client\Model\ChangePaymentRequestExpirationDate $change_payment_request_expiration_date The parameters to change the payment request&#39;s expiration date (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['changePaymentRequestExpirationDate'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function changePaymentRequestExpirationDateRequest($key, $change_payment_request_expiration_date, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['changePaymentRequestExpirationDate'][0])
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling changePaymentRequestExpirationDate'
            );
        }

        // verify the required parameter 'change_payment_request_expiration_date' is set
        if ($change_payment_request_expiration_date === null || (is_array($change_payment_request_expiration_date) && count($change_payment_request_expiration_date) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $change_payment_request_expiration_date when calling changePaymentRequestExpirationDate'
            );
        }




        $resourcePath = '/payment-requests/{key}/change-expiration';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($confirmation_password !== null) {
            $headerParams['confirmationPassword'] = ObjectSerializer::toHeaderValue($confirmation_password);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($change_payment_request_expiration_date)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($change_payment_request_expiration_date));
            } else {
                $httpBody = $change_payment_request_expiration_date;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dataForSendPaymentRequest
     *
     * Returns configuration data for sending a payment request
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $to The payment request destination, which is either string &#x60;system&#x60; for a payment request to system or a user identification. The payment request destination is the one that performs the payment once it is accepted. (optional)
     * @param  string $type The payment type id or qualified internal name (in the form &#x60;fromAccountType.paymentType&#x60;). If no payment type is provided, the possible types will be returned, so the payer can choose. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataForSendPaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DataForTransaction|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function dataForSendPaymentRequest($owner, $fields = null, $to = null, $type = null, string $contentType = self::contentTypes['dataForSendPaymentRequest'][0])
    {
        list($response) = $this->dataForSendPaymentRequestWithHttpInfo($owner, $fields, $to, $type, $contentType);
        return $response;
    }

    /**
     * Operation dataForSendPaymentRequestWithHttpInfo
     *
     * Returns configuration data for sending a payment request
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $to The payment request destination, which is either string &#x60;system&#x60; for a payment request to system or a user identification. The payment request destination is the one that performs the payment once it is accepted. (optional)
     * @param  string $type The payment type id or qualified internal name (in the form &#x60;fromAccountType.paymentType&#x60;). If no payment type is provided, the possible types will be returned, so the payer can choose. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataForSendPaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DataForTransaction|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function dataForSendPaymentRequestWithHttpInfo($owner, $fields = null, $to = null, $type = null, string $contentType = self::contentTypes['dataForSendPaymentRequest'][0])
    {
        $request = $this->dataForSendPaymentRequestRequest($owner, $fields, $to, $type, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DataForTransaction' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DataForTransaction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DataForTransaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\DataForTransaction';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DataForTransaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dataForSendPaymentRequestAsync
     *
     * Returns configuration data for sending a payment request
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $to The payment request destination, which is either string &#x60;system&#x60; for a payment request to system or a user identification. The payment request destination is the one that performs the payment once it is accepted. (optional)
     * @param  string $type The payment type id or qualified internal name (in the form &#x60;fromAccountType.paymentType&#x60;). If no payment type is provided, the possible types will be returned, so the payer can choose. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataForSendPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataForSendPaymentRequestAsync($owner, $fields = null, $to = null, $type = null, string $contentType = self::contentTypes['dataForSendPaymentRequest'][0])
    {
        return $this->dataForSendPaymentRequestAsyncWithHttpInfo($owner, $fields, $to, $type, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dataForSendPaymentRequestAsyncWithHttpInfo
     *
     * Returns configuration data for sending a payment request
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $to The payment request destination, which is either string &#x60;system&#x60; for a payment request to system or a user identification. The payment request destination is the one that performs the payment once it is accepted. (optional)
     * @param  string $type The payment type id or qualified internal name (in the form &#x60;fromAccountType.paymentType&#x60;). If no payment type is provided, the possible types will be returned, so the payer can choose. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataForSendPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dataForSendPaymentRequestAsyncWithHttpInfo($owner, $fields = null, $to = null, $type = null, string $contentType = self::contentTypes['dataForSendPaymentRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DataForTransaction';
        $request = $this->dataForSendPaymentRequestRequest($owner, $fields, $to, $type, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dataForSendPaymentRequest'
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $to The payment request destination, which is either string &#x60;system&#x60; for a payment request to system or a user identification. The payment request destination is the one that performs the payment once it is accepted. (optional)
     * @param  string $type The payment type id or qualified internal name (in the form &#x60;fromAccountType.paymentType&#x60;). If no payment type is provided, the possible types will be returned, so the payer can choose. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dataForSendPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dataForSendPaymentRequestRequest($owner, $fields = null, $to = null, $type = null, string $contentType = self::contentTypes['dataForSendPaymentRequest'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling dataForSendPaymentRequest'
            );
        }





        $resourcePath = '/{owner}/payment-requests/data-for-send';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to,
            'to', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $type,
            'type', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation previewPaymentRequest
     *
     * Previews the payment performed when accepting the given payment request.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewPaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\PaymentRequestPreview|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\InputError|\OpenAPI\Client\Model\Error
     */
    public function previewPaymentRequest($key, $fields = null, string $contentType = self::contentTypes['previewPaymentRequest'][0])
    {
        list($response) = $this->previewPaymentRequestWithHttpInfo($key, $fields, $contentType);
        return $response;
    }

    /**
     * Operation previewPaymentRequestWithHttpInfo
     *
     * Previews the payment performed when accepting the given payment request.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewPaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\PaymentRequestPreview|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\InputError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function previewPaymentRequestWithHttpInfo($key, $fields = null, string $contentType = self::contentTypes['previewPaymentRequest'][0])
    {
        $request = $this->previewPaymentRequestRequest($key, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\PaymentRequestPreview' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PaymentRequestPreview' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PaymentRequestPreview', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\InputError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InputError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InputError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\PaymentRequestPreview';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaymentRequestPreview',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InputError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation previewPaymentRequestAsync
     *
     * Previews the payment performed when accepting the given payment request.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewPaymentRequestAsync($key, $fields = null, string $contentType = self::contentTypes['previewPaymentRequest'][0])
    {
        return $this->previewPaymentRequestAsyncWithHttpInfo($key, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation previewPaymentRequestAsyncWithHttpInfo
     *
     * Previews the payment performed when accepting the given payment request.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function previewPaymentRequestAsyncWithHttpInfo($key, $fields = null, string $contentType = self::contentTypes['previewPaymentRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\PaymentRequestPreview';
        $request = $this->previewPaymentRequestRequest($key, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'previewPaymentRequest'
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['previewPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function previewPaymentRequestRequest($key, $fields = null, string $contentType = self::contentTypes['previewPaymentRequest'][0])
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling previewPaymentRequest'
            );
        }



        $resourcePath = '/payment-requests/{key}/preview';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation rejectPaymentRequest
     *
     * Rejects a payment request.
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $body A comment for the reject action the payer can set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectPaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function rejectPaymentRequest($key, $confirmation_password = null, $body = null, string $contentType = self::contentTypes['rejectPaymentRequest'][0])
    {
        $this->rejectPaymentRequestWithHttpInfo($key, $confirmation_password, $body, $contentType);
    }

    /**
     * Operation rejectPaymentRequestWithHttpInfo
     *
     * Rejects a payment request.
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $body A comment for the reject action the payer can set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectPaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function rejectPaymentRequestWithHttpInfo($key, $confirmation_password = null, $body = null, string $contentType = self::contentTypes['rejectPaymentRequest'][0])
    {
        $request = $this->rejectPaymentRequestRequest($key, $confirmation_password, $body, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation rejectPaymentRequestAsync
     *
     * Rejects a payment request.
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $body A comment for the reject action the payer can set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectPaymentRequestAsync($key, $confirmation_password = null, $body = null, string $contentType = self::contentTypes['rejectPaymentRequest'][0])
    {
        return $this->rejectPaymentRequestAsyncWithHttpInfo($key, $confirmation_password, $body, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation rejectPaymentRequestAsyncWithHttpInfo
     *
     * Rejects a payment request.
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $body A comment for the reject action the payer can set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function rejectPaymentRequestAsyncWithHttpInfo($key, $confirmation_password = null, $body = null, string $contentType = self::contentTypes['rejectPaymentRequest'][0])
    {
        $returnType = '';
        $request = $this->rejectPaymentRequestRequest($key, $confirmation_password, $body, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'rejectPaymentRequest'
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $body A comment for the reject action the payer can set. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['rejectPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function rejectPaymentRequestRequest($key, $confirmation_password = null, $body = null, string $contentType = self::contentTypes['rejectPaymentRequest'][0])
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling rejectPaymentRequest'
            );
        }




        $resourcePath = '/payment-requests/{key}/reject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($confirmation_password !== null) {
            $headerParams['confirmationPassword'] = ObjectSerializer::toHeaderValue($confirmation_password);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($body)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation reschedulePaymentRequest
     *
     * Reschedules a payment request.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  \OpenAPI\Client\Model\AcceptOrReschedulePaymentRequest $accept_or_reschedule_payment_request The parameters to reschedule a payment request. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reschedulePaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Transaction|\OpenAPI\Client\Model\PaymentError
     */
    public function reschedulePaymentRequest($key, $accept_or_reschedule_payment_request, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['reschedulePaymentRequest'][0])
    {
        list($response) = $this->reschedulePaymentRequestWithHttpInfo($key, $accept_or_reschedule_payment_request, $fields, $confirmation_password, $contentType);
        return $response;
    }

    /**
     * Operation reschedulePaymentRequestWithHttpInfo
     *
     * Reschedules a payment request.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  \OpenAPI\Client\Model\AcceptOrReschedulePaymentRequest $accept_or_reschedule_payment_request The parameters to reschedule a payment request. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reschedulePaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Transaction|\OpenAPI\Client\Model\PaymentError, HTTP status code, HTTP response headers (array of strings)
     */
    public function reschedulePaymentRequestWithHttpInfo($key, $accept_or_reschedule_payment_request, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['reschedulePaymentRequest'][0])
    {
        $request = $this->reschedulePaymentRequestRequest($key, $accept_or_reschedule_payment_request, $fields, $confirmation_password, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Transaction' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Transaction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Transaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\PaymentError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PaymentError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PaymentError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Transaction';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Transaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaymentError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation reschedulePaymentRequestAsync
     *
     * Reschedules a payment request.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  \OpenAPI\Client\Model\AcceptOrReschedulePaymentRequest $accept_or_reschedule_payment_request The parameters to reschedule a payment request. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reschedulePaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reschedulePaymentRequestAsync($key, $accept_or_reschedule_payment_request, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['reschedulePaymentRequest'][0])
    {
        return $this->reschedulePaymentRequestAsyncWithHttpInfo($key, $accept_or_reschedule_payment_request, $fields, $confirmation_password, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation reschedulePaymentRequestAsyncWithHttpInfo
     *
     * Reschedules a payment request.
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  \OpenAPI\Client\Model\AcceptOrReschedulePaymentRequest $accept_or_reschedule_payment_request The parameters to reschedule a payment request. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reschedulePaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function reschedulePaymentRequestAsyncWithHttpInfo($key, $accept_or_reschedule_payment_request, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['reschedulePaymentRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Transaction';
        $request = $this->reschedulePaymentRequestRequest($key, $accept_or_reschedule_payment_request, $fields, $confirmation_password, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'reschedulePaymentRequest'
     *
     * @param  string $key Either the id or transaction number. (required)
     * @param  \OpenAPI\Client\Model\AcceptOrReschedulePaymentRequest $accept_or_reschedule_payment_request The parameters to reschedule a payment request. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $confirmation_password The credential used to confirm this action, if needed. The name is kept for historical reasons, and not necessarily means a password value, but any of the accepted credential types. The actual credential used for confirmation depends on the channel configuration, and can be one of the following: - A password: The channel configuration defines which password   type is used. The value is the plain password value, unprefixed. - A trusted device confirmation: The value must be in fhe format   &#x60;confirmation:&lt;deviceConfirmationId&gt;&#x60;, and must use the id of   a device confirmation which has been previously approved with a   trusted device. Generally the page would subscribe itself to   a push notification (see the &#x60;Push&#x60; tag in this API) when the   device confirmation is approved, and immediately submit the form. - A TOTP, which is a numeric password generated by an authenticator app.   This kind of confirmation is very secure and convenient, because the   password itself isn&#39;t stored anywhere, and the user doesn&#39;t have to   memorize another password. The value must be in the format &#x60;totp:123456&#x60;. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['reschedulePaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function reschedulePaymentRequestRequest($key, $accept_or_reschedule_payment_request, $fields = null, $confirmation_password = null, string $contentType = self::contentTypes['reschedulePaymentRequest'][0])
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling reschedulePaymentRequest'
            );
        }

        // verify the required parameter 'accept_or_reschedule_payment_request' is set
        if ($accept_or_reschedule_payment_request === null || (is_array($accept_or_reschedule_payment_request) && count($accept_or_reschedule_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $accept_or_reschedule_payment_request when calling reschedulePaymentRequest'
            );
        }




        $resourcePath = '/payment-requests/{key}/reschedule';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);

        // header params
        if ($confirmation_password !== null) {
            $headerParams['confirmationPassword'] = ObjectSerializer::toHeaderValue($confirmation_password);
        }

        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($accept_or_reschedule_payment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($accept_or_reschedule_payment_request));
            } else {
                $httpBody = $accept_or_reschedule_payment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sendPaymentRequest
     *
     * Sends a payment request from the given owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  \OpenAPI\Client\Model\SendPaymentRequest $send_payment_request The send payment request parameters (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Transaction|\OpenAPI\Client\Model\PaymentError
     */
    public function sendPaymentRequest($owner, $send_payment_request, $fields = null, string $contentType = self::contentTypes['sendPaymentRequest'][0])
    {
        list($response) = $this->sendPaymentRequestWithHttpInfo($owner, $send_payment_request, $fields, $contentType);
        return $response;
    }

    /**
     * Operation sendPaymentRequestWithHttpInfo
     *
     * Sends a payment request from the given owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  \OpenAPI\Client\Model\SendPaymentRequest $send_payment_request The send payment request parameters (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPaymentRequest'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Transaction|\OpenAPI\Client\Model\PaymentError, HTTP status code, HTTP response headers (array of strings)
     */
    public function sendPaymentRequestWithHttpInfo($owner, $send_payment_request, $fields = null, string $contentType = self::contentTypes['sendPaymentRequest'][0])
    {
        $request = $this->sendPaymentRequestRequest($owner, $send_payment_request, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 201:
                    if ('\OpenAPI\Client\Model\Transaction' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Transaction' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Transaction', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\PaymentError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\PaymentError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\PaymentError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\Transaction';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Transaction',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\PaymentError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sendPaymentRequestAsync
     *
     * Sends a payment request from the given owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  \OpenAPI\Client\Model\SendPaymentRequest $send_payment_request The send payment request parameters (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPaymentRequestAsync($owner, $send_payment_request, $fields = null, string $contentType = self::contentTypes['sendPaymentRequest'][0])
    {
        return $this->sendPaymentRequestAsyncWithHttpInfo($owner, $send_payment_request, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sendPaymentRequestAsyncWithHttpInfo
     *
     * Sends a payment request from the given owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  \OpenAPI\Client\Model\SendPaymentRequest $send_payment_request The send payment request parameters (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sendPaymentRequestAsyncWithHttpInfo($owner, $send_payment_request, $fields = null, string $contentType = self::contentTypes['sendPaymentRequest'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Transaction';
        $request = $this->sendPaymentRequestRequest($owner, $send_payment_request, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sendPaymentRequest'
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  \OpenAPI\Client\Model\SendPaymentRequest $send_payment_request The send payment request parameters (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sendPaymentRequest'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sendPaymentRequestRequest($owner, $send_payment_request, $fields = null, string $contentType = self::contentTypes['sendPaymentRequest'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling sendPaymentRequest'
            );
        }

        // verify the required parameter 'send_payment_request' is set
        if ($send_payment_request === null || (is_array($send_payment_request) && count($send_payment_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $send_payment_request when calling sendPaymentRequest'
            );
        }



        $resourcePath = '/{owner}/payment-requests';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($send_payment_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($send_payment_request));
            } else {
                $httpBody = $send_payment_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
