<?php
/**
 * TransactionsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * TransactionsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class TransactionsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'exportTransaction' => [
            'application/json',
        ],
        'exportTransactions' => [
            'application/json',
        ],
        'exportTransactionsOverview' => [
            'application/json',
        ],
        'getTransactionsDataForSearch' => [
            'application/json',
        ],
        'getTransactionsOverviewDataForSearch' => [
            'application/json',
        ],
        'searchTransactions' => [
            'application/json',
        ],
        'searchTransactionsOverview' => [
            'application/json',
        ],
        'viewTransaction' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation exportTransaction
     *
     * Exports the transaction details to a file.
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $format The format to export the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportTransaction'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function exportTransaction($key, $format, string $contentType = self::contentTypes['exportTransaction'][0])
    {
        list($response) = $this->exportTransactionWithHttpInfo($key, $format, $contentType);
        return $response;
    }

    /**
     * Operation exportTransactionWithHttpInfo
     *
     * Exports the transaction details to a file.
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $format The format to export the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportTransaction'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportTransactionWithHttpInfo($key, $format, string $contentType = self::contentTypes['exportTransaction'][0])
    {
        $request = $this->exportTransactionRequest($key, $format, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportTransactionAsync
     *
     * Exports the transaction details to a file.
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $format The format to export the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportTransactionAsync($key, $format, string $contentType = self::contentTypes['exportTransaction'][0])
    {
        return $this->exportTransactionAsyncWithHttpInfo($key, $format, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportTransactionAsyncWithHttpInfo
     *
     * Exports the transaction details to a file.
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $format The format to export the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportTransactionAsyncWithHttpInfo($key, $format, string $contentType = self::contentTypes['exportTransaction'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->exportTransactionRequest($key, $format, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportTransaction'
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string $format The format to export the data (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportTransactionRequest($key, $format, string $contentType = self::contentTypes['exportTransaction'][0])
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling exportTransaction'
            );
        }

        // verify the required parameter 'format' is set
        if ($format === null || (is_array($format) && count($format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $format when calling exportTransaction'
            );
        }


        $resourcePath = '/transactions/{key}/export/{format}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }
        // path params
        if ($format !== null) {
            $resourcePath = str_replace(
                '{' . 'format' . '}',
                ObjectSerializer::toPathValue($format),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportTransactions
     *
     * Exports the owner transactions search results as file
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportTransactions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\InputError|\OpenAPI\Client\Model\Error
     */
    public function exportTransactions($owner, $format, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportTransactions'][0])
    {
        list($response) = $this->exportTransactionsWithHttpInfo($owner, $format, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);
        return $response;
    }

    /**
     * Operation exportTransactionsWithHttpInfo
     *
     * Exports the owner transactions search results as file
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportTransactions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\InputError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportTransactionsWithHttpInfo($owner, $format, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportTransactions'][0])
    {
        $request = $this->exportTransactionsRequest($owner, $format, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\InputError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InputError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InputError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InputError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportTransactionsAsync
     *
     * Exports the owner transactions search results as file
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportTransactionsAsync($owner, $format, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportTransactions'][0])
    {
        return $this->exportTransactionsAsyncWithHttpInfo($owner, $format, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportTransactionsAsyncWithHttpInfo
     *
     * Exports the owner transactions search results as file
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportTransactionsAsyncWithHttpInfo($owner, $format, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportTransactions'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->exportTransactionsRequest($owner, $format, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportTransactions'
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportTransactionsRequest($owner, $format, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportTransactions'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling exportTransactions'
            );
        }

        // verify the required parameter 'format' is set
        if ($format === null || (is_array($format) && count($format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $format when calling exportTransactions'
            );
        }





































        $resourcePath = '/{owner}/transactions/export/{format}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_clients,
            'accessClients', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_types,
            'accountTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount_range,
            'amountRange', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_performed_by,
            'authorizationPerformedBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_roles,
            'authorizationRoles', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_statuses,
            'authorizationStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorized,
            'authorized', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brokers,
            'brokers', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $by,
            'by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channels,
            'channels', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $creation_types,
            'creationTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_fields,
            'customFields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_period,
            'datePeriod', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'TransferDirectionEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excluded_ids,
            'excludedIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_payment_expiration,
            'externalPaymentExpiration', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_payment_statuses,
            'externalPaymentStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_current_access_client,
            'fromCurrentAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groups,
            'groups', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_generated_by_access_client,
            'includeGeneratedByAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $kinds,
            'kinds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'TransOrderByEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_request_expiration,
            'paymentRequestExpiration', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_request_statuses,
            'paymentRequestStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recurring_payment_statuses,
            'recurringPaymentStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scheduled_payment_statuses,
            'scheduledPaymentStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip_total_count,
            'skipTotalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ticket_expiration,
            'ticketExpiration', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ticket_statuses,
            'ticketStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_number,
            'transactionNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_filters,
            'transferFilters', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_types,
            'transferTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user,
            'user', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }
        // path params
        if ($format !== null) {
            $resourcePath = str_replace(
                '{' . 'format' . '}',
                ObjectSerializer::toPathValue($format),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation exportTransactionsOverview
     *
     * Exports the transactions overview search results as file
     *
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  bool $pending_my_authorization When set to true will only return transactions (&#x60;payment&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;) in pending authorization state that the logged user can authorize (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportTransactionsOverview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\InputError|\OpenAPI\Client\Model\Error
     */
    public function exportTransactionsOverview($format, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $pending_my_authorization = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportTransactionsOverview'][0])
    {
        list($response) = $this->exportTransactionsOverviewWithHttpInfo($format, $access_clients, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $pending_my_authorization, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);
        return $response;
    }

    /**
     * Operation exportTransactionsOverviewWithHttpInfo
     *
     * Exports the transactions overview search results as file
     *
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  bool $pending_my_authorization When set to true will only return transactions (&#x60;payment&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;) in pending authorization state that the logged user can authorize (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportTransactionsOverview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\InputError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function exportTransactionsOverviewWithHttpInfo($format, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $pending_my_authorization = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportTransactionsOverview'][0])
    {
        $request = $this->exportTransactionsOverviewRequest($format, $access_clients, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $pending_my_authorization, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 422:
                    if ('\OpenAPI\Client\Model\InputError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\InputError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\InputError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 422:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\InputError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation exportTransactionsOverviewAsync
     *
     * Exports the transactions overview search results as file
     *
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  bool $pending_my_authorization When set to true will only return transactions (&#x60;payment&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;) in pending authorization state that the logged user can authorize (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportTransactionsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportTransactionsOverviewAsync($format, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $pending_my_authorization = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportTransactionsOverview'][0])
    {
        return $this->exportTransactionsOverviewAsyncWithHttpInfo($format, $access_clients, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $pending_my_authorization, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation exportTransactionsOverviewAsyncWithHttpInfo
     *
     * Exports the transactions overview search results as file
     *
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  bool $pending_my_authorization When set to true will only return transactions (&#x60;payment&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;) in pending authorization state that the logged user can authorize (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportTransactionsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function exportTransactionsOverviewAsyncWithHttpInfo($format, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $pending_my_authorization = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportTransactionsOverview'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->exportTransactionsOverviewRequest($format, $access_clients, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $pending_my_authorization, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'exportTransactionsOverview'
     *
     * @param  string $format The format to export the data (required)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  bool $pending_my_authorization When set to true will only return transactions (&#x60;payment&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;) in pending authorization state that the logged user can authorize (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['exportTransactionsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function exportTransactionsOverviewRequest($format, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $pending_my_authorization = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['exportTransactionsOverview'][0])
    {

        // verify the required parameter 'format' is set
        if ($format === null || (is_array($format) && count($format) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $format when calling exportTransactionsOverview'
            );
        }







































        $resourcePath = '/transactions/export/{format}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_clients,
            'accessClients', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount_range,
            'amountRange', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_performed_by,
            'authorizationPerformedBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_roles,
            'authorizationRoles', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_statuses,
            'authorizationStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorized,
            'authorized', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brokers,
            'brokers', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $by,
            'by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channels,
            'channels', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $creation_types,
            'creationTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currencies,
            'currencies', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_fields,
            'customFields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_period,
            'datePeriod', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excluded_ids,
            'excludedIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_payment_expiration,
            'externalPaymentExpiration', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_payment_statuses,
            'externalPaymentStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_account_types,
            'fromAccountTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_current_access_client,
            'fromCurrentAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groups,
            'groups', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_generated_by_access_client,
            'includeGeneratedByAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $kinds,
            'kinds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'TransOrderByEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_request_expiration,
            'paymentRequestExpiration', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_request_statuses,
            'paymentRequestStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pending_my_authorization,
            'pendingMyAuthorization', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recurring_payment_statuses,
            'recurringPaymentStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scheduled_payment_statuses,
            'scheduledPaymentStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip_total_count,
            'skipTotalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ticket_expiration,
            'ticketExpiration', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ticket_statuses,
            'ticketStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_account_types,
            'toAccountTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_number,
            'transactionNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_filters,
            'transferFilters', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_types,
            'transferTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user,
            'user', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($format !== null) {
            $resourcePath = str_replace(
                '{' . 'format' . '}',
                ObjectSerializer::toPathValue($format),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['*/*', 'application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionsDataForSearch
     *
     * Returns data for searching transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionsDataForSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransactionDataForSearch|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function getTransactionsDataForSearch($owner, $fields = null, string $contentType = self::contentTypes['getTransactionsDataForSearch'][0])
    {
        list($response) = $this->getTransactionsDataForSearchWithHttpInfo($owner, $fields, $contentType);
        return $response;
    }

    /**
     * Operation getTransactionsDataForSearchWithHttpInfo
     *
     * Returns data for searching transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionsDataForSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransactionDataForSearch|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsDataForSearchWithHttpInfo($owner, $fields = null, string $contentType = self::contentTypes['getTransactionsDataForSearch'][0])
    {
        $request = $this->getTransactionsDataForSearchRequest($owner, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TransactionDataForSearch' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TransactionDataForSearch' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TransactionDataForSearch', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TransactionDataForSearch';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransactionDataForSearch',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionsDataForSearchAsync
     *
     * Returns data for searching transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionsDataForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsDataForSearchAsync($owner, $fields = null, string $contentType = self::contentTypes['getTransactionsDataForSearch'][0])
    {
        return $this->getTransactionsDataForSearchAsyncWithHttpInfo($owner, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsDataForSearchAsyncWithHttpInfo
     *
     * Returns data for searching transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionsDataForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsDataForSearchAsyncWithHttpInfo($owner, $fields = null, string $contentType = self::contentTypes['getTransactionsDataForSearch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TransactionDataForSearch';
        $request = $this->getTransactionsDataForSearchRequest($owner, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionsDataForSearch'
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionsDataForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionsDataForSearchRequest($owner, $fields = null, string $contentType = self::contentTypes['getTransactionsDataForSearch'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling getTransactionsDataForSearch'
            );
        }



        $resourcePath = '/{owner}/transactions/data-for-search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getTransactionsOverviewDataForSearch
     *
     * Returns data for searching transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  bool $pending_my_authorization When set to true will search for transactions which are currently pending authorization, and the authenticated user can authorize. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionsOverviewDataForSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransactionOverviewDataForSearch|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function getTransactionsOverviewDataForSearch($fields = null, $pending_my_authorization = null, string $contentType = self::contentTypes['getTransactionsOverviewDataForSearch'][0])
    {
        list($response) = $this->getTransactionsOverviewDataForSearchWithHttpInfo($fields, $pending_my_authorization, $contentType);
        return $response;
    }

    /**
     * Operation getTransactionsOverviewDataForSearchWithHttpInfo
     *
     * Returns data for searching transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  bool $pending_my_authorization When set to true will search for transactions which are currently pending authorization, and the authenticated user can authorize. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionsOverviewDataForSearch'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransactionOverviewDataForSearch|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function getTransactionsOverviewDataForSearchWithHttpInfo($fields = null, $pending_my_authorization = null, string $contentType = self::contentTypes['getTransactionsOverviewDataForSearch'][0])
    {
        $request = $this->getTransactionsOverviewDataForSearchRequest($fields, $pending_my_authorization, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TransactionOverviewDataForSearch' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TransactionOverviewDataForSearch' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TransactionOverviewDataForSearch', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TransactionOverviewDataForSearch';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransactionOverviewDataForSearch',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getTransactionsOverviewDataForSearchAsync
     *
     * Returns data for searching transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  bool $pending_my_authorization When set to true will search for transactions which are currently pending authorization, and the authenticated user can authorize. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionsOverviewDataForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsOverviewDataForSearchAsync($fields = null, $pending_my_authorization = null, string $contentType = self::contentTypes['getTransactionsOverviewDataForSearch'][0])
    {
        return $this->getTransactionsOverviewDataForSearchAsyncWithHttpInfo($fields, $pending_my_authorization, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getTransactionsOverviewDataForSearchAsyncWithHttpInfo
     *
     * Returns data for searching transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  bool $pending_my_authorization When set to true will search for transactions which are currently pending authorization, and the authenticated user can authorize. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionsOverviewDataForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getTransactionsOverviewDataForSearchAsyncWithHttpInfo($fields = null, $pending_my_authorization = null, string $contentType = self::contentTypes['getTransactionsOverviewDataForSearch'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TransactionOverviewDataForSearch';
        $request = $this->getTransactionsOverviewDataForSearchRequest($fields, $pending_my_authorization, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getTransactionsOverviewDataForSearch'
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  bool $pending_my_authorization When set to true will search for transactions which are currently pending authorization, and the authenticated user can authorize. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getTransactionsOverviewDataForSearch'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getTransactionsOverviewDataForSearchRequest($fields = null, $pending_my_authorization = null, string $contentType = self::contentTypes['getTransactionsOverviewDataForSearch'][0])
    {




        $resourcePath = '/transactions/data-for-search';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pending_my_authorization,
            'pendingMyAuthorization', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTransactions
     *
     * Searches transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTransactions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransactionResult[]|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function searchTransactions($owner, $fields = null, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchTransactions'][0])
    {
        list($response) = $this->searchTransactionsWithHttpInfo($owner, $fields, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);
        return $response;
    }

    /**
     * Operation searchTransactionsWithHttpInfo
     *
     * Searches transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTransactions'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransactionResult[]|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTransactionsWithHttpInfo($owner, $fields = null, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchTransactions'][0])
    {
        $request = $this->searchTransactionsRequest($owner, $fields, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TransactionResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TransactionResult[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TransactionResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TransactionResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransactionResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchTransactionsAsync
     *
     * Searches transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTransactionsAsync($owner, $fields = null, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchTransactions'][0])
    {
        return $this->searchTransactionsAsyncWithHttpInfo($owner, $fields, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTransactionsAsyncWithHttpInfo
     *
     * Searches transactions of an account owner
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTransactionsAsyncWithHttpInfo($owner, $fields = null, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchTransactions'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TransactionResult[]';
        $request = $this->searchTransactionsRequest($owner, $fields, $access_clients, $account_types, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $custom_fields, $date_period, $direction, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTransactions'
     *
     * @param  string $owner Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix\\   the value with a single quote (like in Excel spreadsheets);  -  &#x60;self&#x60; for the currently authenticated user; - &#x60;system&#x60; for the system owner. (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  string[] $account_types The account types (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  TransferDirectionEnum $direction (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTransactions'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchTransactionsRequest($owner, $fields = null, $access_clients = null, $account_types = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $custom_fields = null, $date_period = null, $direction = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchTransactions'][0])
    {

        // verify the required parameter 'owner' is set
        if ($owner === null || (is_array($owner) && count($owner) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $owner when calling searchTransactions'
            );
        }






































        $resourcePath = '/{owner}/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_clients,
            'accessClients', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $account_types,
            'accountTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount_range,
            'amountRange', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_performed_by,
            'authorizationPerformedBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_roles,
            'authorizationRoles', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_statuses,
            'authorizationStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorized,
            'authorized', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brokers,
            'brokers', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $by,
            'by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channels,
            'channels', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $creation_types,
            'creationTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_fields,
            'customFields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_period,
            'datePeriod', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $direction,
            'direction', // param base name
            'TransferDirectionEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excluded_ids,
            'excludedIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_payment_expiration,
            'externalPaymentExpiration', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_payment_statuses,
            'externalPaymentStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_current_access_client,
            'fromCurrentAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groups,
            'groups', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_generated_by_access_client,
            'includeGeneratedByAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $kinds,
            'kinds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'TransOrderByEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_request_expiration,
            'paymentRequestExpiration', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_request_statuses,
            'paymentRequestStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recurring_payment_statuses,
            'recurringPaymentStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scheduled_payment_statuses,
            'scheduledPaymentStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip_total_count,
            'skipTotalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ticket_expiration,
            'ticketExpiration', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ticket_statuses,
            'ticketStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_number,
            'transactionNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_filters,
            'transferFilters', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_types,
            'transferTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user,
            'user', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);


        // path params
        if ($owner !== null) {
            $resourcePath = str_replace(
                '{' . 'owner' . '}',
                ObjectSerializer::toPathValue($owner),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchTransactionsOverview
     *
     * Searches transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  bool $pending_my_authorization When set to true will only return transactions (&#x60;payment&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;) in pending authorization state that the logged user can authorize (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTransactionsOverview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransactionOverviewResult[]|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function searchTransactionsOverview($fields = null, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $pending_my_authorization = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchTransactionsOverview'][0])
    {
        list($response) = $this->searchTransactionsOverviewWithHttpInfo($fields, $access_clients, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $pending_my_authorization, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);
        return $response;
    }

    /**
     * Operation searchTransactionsOverviewWithHttpInfo
     *
     * Searches transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  bool $pending_my_authorization When set to true will only return transactions (&#x60;payment&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;) in pending authorization state that the logged user can authorize (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTransactionsOverview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransactionOverviewResult[]|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchTransactionsOverviewWithHttpInfo($fields = null, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $pending_my_authorization = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchTransactionsOverview'][0])
    {
        $request = $this->searchTransactionsOverviewRequest($fields, $access_clients, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $pending_my_authorization, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TransactionOverviewResult[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TransactionOverviewResult[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TransactionOverviewResult[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TransactionOverviewResult[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransactionOverviewResult[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchTransactionsOverviewAsync
     *
     * Searches transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  bool $pending_my_authorization When set to true will only return transactions (&#x60;payment&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;) in pending authorization state that the logged user can authorize (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTransactionsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTransactionsOverviewAsync($fields = null, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $pending_my_authorization = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchTransactionsOverview'][0])
    {
        return $this->searchTransactionsOverviewAsyncWithHttpInfo($fields, $access_clients, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $pending_my_authorization, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchTransactionsOverviewAsyncWithHttpInfo
     *
     * Searches transactions regardless of a owner
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  bool $pending_my_authorization When set to true will only return transactions (&#x60;payment&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;) in pending authorization state that the logged user can authorize (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTransactionsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchTransactionsOverviewAsyncWithHttpInfo($fields = null, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $pending_my_authorization = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchTransactionsOverview'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TransactionOverviewResult[]';
        $request = $this->searchTransactionsOverviewRequest($fields, $access_clients, $amount_range, $authorization_performed_by, $authorization_roles, $authorization_statuses, $authorized, $brokers, $by, $channels, $creation_types, $currencies, $custom_fields, $date_period, $excluded_ids, $external_payment_expiration, $external_payment_statuses, $from_account_types, $from_current_access_client, $groups, $include_generated_by_access_client, $kinds, $order_by, $page, $page_size, $payment_request_expiration, $payment_request_statuses, $pending_my_authorization, $recurring_payment_statuses, $scheduled_payment_statuses, $skip_total_count, $ticket_expiration, $ticket_statuses, $to_account_types, $transaction_number, $transfer_filters, $transfer_types, $user, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchTransactionsOverview'
     *
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string[] $access_clients References to access clients (id or token) used to perform / receive the transfer. (optional)
     * @param  float[] $amount_range The minimum / maximum amount. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string $authorization_performed_by Id or other identifier (login name, email, etc) of the user that performed an authorization action (authorize, deny or cancel). (optional)
     * @param  string[] $authorization_roles Either internal names or ids of authorization roles. To match, transactions must be pending authorization in a level which can be authorized by any of the given roles. (optional)
     * @param  \OpenAPI\Client\Model\TransactionAuthorizationStatusEnum[] $authorization_statuses Authorization statuses used as search criteria. When set, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  bool $authorized When set, will only return transactions that went through the authorization process (if true) or that never went through it (when false). In either case, only kinds that can go through authorization are returned (&#x60;payment&#x60;, &#x60;order&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;). (optional)
     * @param  string[] $brokers Reference to the broker of users involved in transfers. Is only taken into account if authenticated as administrator. (optional)
     * @param  string $by Reference to the user that was authenticated when the transfer was performed. Is only taken into account if authenticated as administrator. (optional)
     * @param  string[] $channels Reference to the channel used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  \OpenAPI\Client\Model\PaymentCreationTypeEnum[] $creation_types Include only payments created as one of these. This filter only applies to the following kinds: &#x60;payment&#x60;, &#x60;scheduledPayment&#x60; and &#x60;recurringPayment&#x60;. It doesn&#39;t affect other kinds of returned transactions. If you only want payments to be returned, set these in the &#x60;kinds&#x60; filter. (optional)
     * @param  string[] $currencies The currencies internal names or ids. (optional)
     * @param  string[] $custom_fields Transaction custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, &#x60;customFields&#x3D;field1:value1,field2:value2&#x60;. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields&#x3D;field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, &#x60;customFields&#x3D;rank:bronze|silver,documentDate:2000-01-01|2001-12-31&#x60; would match results whose custom field with internal name &#x60;rank&#x60; is either &#x60;bronze&#x60; or &#x60;silver&#x60;, and whose &#x60;documentDate&#x60; is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like &#x60;customFields&#x3D;documentDate:|2001-12-31&#x60;. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: &#x60;customFields&#x3D;dynamic:a|b|c&#x60;. However, it is also possible to perform a partial-match search using the dynamic value label. In this case a single value, prefixed or enclosed by single quotes should be used. For example: &#x60;customFields&#x3D;dynamic:&#39;business&#x60; or &#x60;customFields&#x3D;dynamic:&#39;business&#39;&#x60;. (optional)
     * @param  \DateTime[] $date_period The minimum / maximum transfer date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  string[] $excluded_ids List of transfers ids to be excluded from the result. (optional)
     * @param  \DateTime[] $external_payment_expiration The minimum / maximum date for external payment expiration. Only affects external payments. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\ExternalPaymentStatusEnum[] $external_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;externalPayment&#x60;. (optional)
     * @param  string[] $from_account_types The source account types internal names or ids. (optional)
     * @param  bool $from_current_access_client Flag indicating whether to include only transfers by the current access client. (optional)
     * @param  string[] $groups Reference to the user group used to perform / receive the transfer. Only taken into account if authenticated as administrator. (optional)
     * @param  bool $include_generated_by_access_client Flag indicating whether to include or not the generated transfer. Only valid if there is at least one access client specified. For example if a &#x60;ticket&#x60; or &#x60;paymentRequest&#x60; was processed then a new transfer will be generated. (optional)
     * @param  \OpenAPI\Client\Model\TransactionKind[] $kinds The kinds of transactions to include (optional)
     * @param  TransOrderByEnum $order_by (optional)
     * @param  int $page The page number (zero-based) of the search. The default value is zero. (optional)
     * @param  int $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting. (optional)
     * @param  \DateTime[] $payment_request_expiration The minimum / maximum date for payment request expiration. Only affects payment requests. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\PaymentRequestStatusEnum[] $payment_request_statuses Statuses used as search criteria applied only to transactions of kind &#x60;paymentRequest&#x60;. (optional)
     * @param  bool $pending_my_authorization When set to true will only return transactions (&#x60;payment&#x60;, &#x60;recurringPayment&#x60; or &#x60;scheduledPayment&#x60;) in pending authorization state that the logged user can authorize (optional)
     * @param  \OpenAPI\Client\Model\RecurringPaymentStatusEnum[] $recurring_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;recurringPayment&#x60;. If this filter is not empty then pending recurring payments will be excluded from the result. Pending recurring payments does not have a status. (optional)
     * @param  \OpenAPI\Client\Model\ScheduledPaymentStatusEnum[] $scheduled_payment_statuses Statuses used as search criteria applied only to transactions of kind &#x60;scheduledPayment&#x60;. If this filter is not empty then pending scheduled payments will be excluded from the result. Pending scheduled payments does not have a status. (optional)
     * @param  bool $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn&#39;t need it, setting this to true can increase performance a bit. (optional)
     * @param  \DateTime[] $ticket_expiration The minimum / maximum date for ticket expiration. Only affects tickets. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma. (optional)
     * @param  \OpenAPI\Client\Model\TicketStatusEnum[] $ticket_statuses Statuses used as search criteria applied only to transactions of kind &#x60;ticket&#x60;. (optional)
     * @param  string[] $to_account_types The source account types internal names or ids. (optional)
     * @param  string $transaction_number The transaction number of the matching transfer (optional)
     * @param  string[] $transfer_filters Reference to the transfer filters, which filters transfers by type. May be either the internal id or qualified transfer filter internal name, in the format &#x60;accountType.transferFilter&#x60;. (optional)
     * @param  string[] $transfer_types Reference to the transfer types for filter. May be either the internal id or qualified transfer type internal name, in the format &#x60;accountType.transferType&#x60;. (optional)
     * @param  string $user Reference a user that should have either received / performed the transfer. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['searchTransactionsOverview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function searchTransactionsOverviewRequest($fields = null, $access_clients = null, $amount_range = null, $authorization_performed_by = null, $authorization_roles = null, $authorization_statuses = null, $authorized = null, $brokers = null, $by = null, $channels = null, $creation_types = null, $currencies = null, $custom_fields = null, $date_period = null, $excluded_ids = null, $external_payment_expiration = null, $external_payment_statuses = null, $from_account_types = null, $from_current_access_client = null, $groups = null, $include_generated_by_access_client = null, $kinds = null, $order_by = null, $page = null, $page_size = null, $payment_request_expiration = null, $payment_request_statuses = null, $pending_my_authorization = null, $recurring_payment_statuses = null, $scheduled_payment_statuses = null, $skip_total_count = null, $ticket_expiration = null, $ticket_statuses = null, $to_account_types = null, $transaction_number = null, $transfer_filters = null, $transfer_types = null, $user = null, string $contentType = self::contentTypes['searchTransactionsOverview'][0])
    {








































        $resourcePath = '/transactions';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $access_clients,
            'accessClients', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $amount_range,
            'amountRange', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_performed_by,
            'authorizationPerformedBy', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_roles,
            'authorizationRoles', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorization_statuses,
            'authorizationStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $authorized,
            'authorized', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $brokers,
            'brokers', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $by,
            'by', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $channels,
            'channels', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $creation_types,
            'creationTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $currencies,
            'currencies', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $custom_fields,
            'customFields', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $date_period,
            'datePeriod', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $excluded_ids,
            'excludedIds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_payment_expiration,
            'externalPaymentExpiration', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $external_payment_statuses,
            'externalPaymentStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_account_types,
            'fromAccountTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $from_current_access_client,
            'fromCurrentAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $groups,
            'groups', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $include_generated_by_access_client,
            'includeGeneratedByAccessClient', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $kinds,
            'kinds', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $order_by,
            'orderBy', // param base name
            'TransOrderByEnum', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page,
            'page', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $page_size,
            'pageSize', // param base name
            'integer', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_request_expiration,
            'paymentRequestExpiration', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $payment_request_statuses,
            'paymentRequestStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $pending_my_authorization,
            'pendingMyAuthorization', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recurring_payment_statuses,
            'recurringPaymentStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $scheduled_payment_statuses,
            'scheduledPaymentStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $skip_total_count,
            'skipTotalCount', // param base name
            'boolean', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ticket_expiration,
            'ticketExpiration', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $ticket_statuses,
            'ticketStatuses', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $to_account_types,
            'toAccountTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transaction_number,
            'transactionNumber', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_filters,
            'transferFilters', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $transfer_types,
            'transferTypes', // param base name
            'array', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $user,
            'user', // param base name
            'string', // openApiType
            'form', // style
            true, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation viewTransaction
     *
     * Returns details about a transaction
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['viewTransaction'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TransactionView|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error
     */
    public function viewTransaction($key, $fields = null, string $contentType = self::contentTypes['viewTransaction'][0])
    {
        list($response) = $this->viewTransactionWithHttpInfo($key, $fields, $contentType);
        return $response;
    }

    /**
     * Operation viewTransactionWithHttpInfo
     *
     * Returns details about a transaction
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['viewTransaction'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TransactionView|\OpenAPI\Client\Model\UnauthorizedError|\OpenAPI\Client\Model\ForbiddenError|\OpenAPI\Client\Model\NotFoundError|\OpenAPI\Client\Model\UnavailableError|\OpenAPI\Client\Model\Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function viewTransactionWithHttpInfo($key, $fields = null, string $contentType = self::contentTypes['viewTransaction'][0])
    {
        $request = $this->viewTransactionRequest($key, $fields, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TransactionView' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TransactionView' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TransactionView', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\OpenAPI\Client\Model\UnauthorizedError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnauthorizedError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnauthorizedError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\OpenAPI\Client\Model\ForbiddenError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ForbiddenError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ForbiddenError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\OpenAPI\Client\Model\NotFoundError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\NotFoundError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\NotFoundError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\OpenAPI\Client\Model\UnavailableError' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\UnavailableError' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\UnavailableError', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 500:
                    if ('\OpenAPI\Client\Model\Error' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Error' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\OpenAPI\Client\Model\TransactionView';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TransactionView',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnauthorizedError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ForbiddenError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\NotFoundError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\UnavailableError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation viewTransactionAsync
     *
     * Returns details about a transaction
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['viewTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewTransactionAsync($key, $fields = null, string $contentType = self::contentTypes['viewTransaction'][0])
    {
        return $this->viewTransactionAsyncWithHttpInfo($key, $fields, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation viewTransactionAsyncWithHttpInfo
     *
     * Returns details about a transaction
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['viewTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function viewTransactionAsyncWithHttpInfo($key, $fields = null, string $contentType = self::contentTypes['viewTransaction'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TransactionView';
        $request = $this->viewTransactionRequest($key, $fields, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'viewTransaction'
     *
     * @param  string $key Either the id or transaction number (required)
     * @param  string[] $fields Select which fields to include on returned data. On the beginning of this page is an explanation on how this parameter works. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['viewTransaction'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function viewTransactionRequest($key, $fields = null, string $contentType = self::contentTypes['viewTransaction'][0])
    {

        // verify the required parameter 'key' is set
        if ($key === null || (is_array($key) && count($key) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling viewTransaction'
            );
        }



        $resourcePath = '/transactions/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $fields,
            'fields', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Session-Token');
        if ($apiKey !== null) {
            $headers['Session-Token'] = $apiKey;
        }
        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Access-Client-Token');
        if ($apiKey !== null) {
            $headers['Access-Client-Token'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
