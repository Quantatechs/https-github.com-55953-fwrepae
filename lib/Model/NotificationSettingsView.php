<?php
/**
 * NotificationSettingsView
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * NotificationSettingsView Class Doc Comment
 *
 * @category Class
 * @description Contains the current notification settings for a given user. The regular user (member / broker) and administrator notification settings use different notification kinds.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class NotificationSettingsView implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'NotificationSettingsView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user' => '\OpenAPI\Client\Model\User',
        'role' => '\OpenAPI\Client\Model\RoleEnum',
        'can_edit' => 'bool',
        'email_allowed' => 'bool',
        'sms_allowed' => 'bool',
        'app_allowed' => 'bool',
        'max_sms_per_month' => 'int',
        'sms_count_this_month' => 'int',
        'forward_messages_allowed' => 'bool',
        'email_mailings_allowed' => 'bool',
        'sms_mailings_allowed' => 'bool',
        'app_mailings_allowed' => 'bool',
        'notifications' => '\OpenAPI\Client\Model\NotificationTypeMediums[]',
        'forward_messages' => 'bool',
        'email_mailings' => 'bool',
        'sms_mailings' => 'bool',
        'app_mailings' => 'bool',
        'user_accounts' => '\OpenAPI\Client\Model\AccountNotificationSettingsView[]',
        'payments' => '\OpenAPI\Client\Model\TransferType[]',
        'authorizable_payments' => '\OpenAPI\Client\Model\TransferType[]',
        'external_payments_failed' => '\OpenAPI\Client\Model\TransferType[]',
        'external_payments_expired' => '\OpenAPI\Client\Model\TransferType[]',
        'voucher_configurations' => '\OpenAPI\Client\Model\EntityReference[]',
        'voucher_configurations_buying' => '\OpenAPI\Client\Model\EntityReference[]',
        'user_groups' => '\OpenAPI\Client\Model\Group[]',
        'system_alerts' => '\OpenAPI\Client\Model\SystemAlertTypeEnum[]',
        'user_alerts' => '\OpenAPI\Client\Model\UserAlertTypeEnum[]',
        'forward_message_categories' => '\OpenAPI\Client\Model\EntityReference[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user' => null,
        'role' => null,
        'can_edit' => null,
        'email_allowed' => null,
        'sms_allowed' => null,
        'app_allowed' => null,
        'max_sms_per_month' => null,
        'sms_count_this_month' => null,
        'forward_messages_allowed' => null,
        'email_mailings_allowed' => null,
        'sms_mailings_allowed' => null,
        'app_mailings_allowed' => null,
        'notifications' => null,
        'forward_messages' => null,
        'email_mailings' => null,
        'sms_mailings' => null,
        'app_mailings' => null,
        'user_accounts' => null,
        'payments' => null,
        'authorizable_payments' => null,
        'external_payments_failed' => null,
        'external_payments_expired' => null,
        'voucher_configurations' => null,
        'voucher_configurations_buying' => null,
        'user_groups' => null,
        'system_alerts' => null,
        'user_alerts' => null,
        'forward_message_categories' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user' => false,
        'role' => false,
        'can_edit' => false,
        'email_allowed' => false,
        'sms_allowed' => false,
        'app_allowed' => false,
        'max_sms_per_month' => false,
        'sms_count_this_month' => false,
        'forward_messages_allowed' => false,
        'email_mailings_allowed' => false,
        'sms_mailings_allowed' => false,
        'app_mailings_allowed' => false,
        'notifications' => false,
        'forward_messages' => false,
        'email_mailings' => false,
        'sms_mailings' => false,
        'app_mailings' => false,
        'user_accounts' => false,
        'payments' => false,
        'authorizable_payments' => false,
        'external_payments_failed' => false,
        'external_payments_expired' => false,
        'voucher_configurations' => false,
        'voucher_configurations_buying' => false,
        'user_groups' => false,
        'system_alerts' => false,
        'user_alerts' => false,
        'forward_message_categories' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user' => 'user',
        'role' => 'role',
        'can_edit' => 'canEdit',
        'email_allowed' => 'emailAllowed',
        'sms_allowed' => 'smsAllowed',
        'app_allowed' => 'appAllowed',
        'max_sms_per_month' => 'maxSmsPerMonth',
        'sms_count_this_month' => 'smsCountThisMonth',
        'forward_messages_allowed' => 'forwardMessagesAllowed',
        'email_mailings_allowed' => 'emailMailingsAllowed',
        'sms_mailings_allowed' => 'smsMailingsAllowed',
        'app_mailings_allowed' => 'appMailingsAllowed',
        'notifications' => 'notifications',
        'forward_messages' => 'forwardMessages',
        'email_mailings' => 'emailMailings',
        'sms_mailings' => 'smsMailings',
        'app_mailings' => 'appMailings',
        'user_accounts' => 'userAccounts',
        'payments' => 'payments',
        'authorizable_payments' => 'authorizablePayments',
        'external_payments_failed' => 'externalPaymentsFailed',
        'external_payments_expired' => 'externalPaymentsExpired',
        'voucher_configurations' => 'voucherConfigurations',
        'voucher_configurations_buying' => 'voucherConfigurationsBuying',
        'user_groups' => 'userGroups',
        'system_alerts' => 'systemAlerts',
        'user_alerts' => 'userAlerts',
        'forward_message_categories' => 'forwardMessageCategories'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user' => 'setUser',
        'role' => 'setRole',
        'can_edit' => 'setCanEdit',
        'email_allowed' => 'setEmailAllowed',
        'sms_allowed' => 'setSmsAllowed',
        'app_allowed' => 'setAppAllowed',
        'max_sms_per_month' => 'setMaxSmsPerMonth',
        'sms_count_this_month' => 'setSmsCountThisMonth',
        'forward_messages_allowed' => 'setForwardMessagesAllowed',
        'email_mailings_allowed' => 'setEmailMailingsAllowed',
        'sms_mailings_allowed' => 'setSmsMailingsAllowed',
        'app_mailings_allowed' => 'setAppMailingsAllowed',
        'notifications' => 'setNotifications',
        'forward_messages' => 'setForwardMessages',
        'email_mailings' => 'setEmailMailings',
        'sms_mailings' => 'setSmsMailings',
        'app_mailings' => 'setAppMailings',
        'user_accounts' => 'setUserAccounts',
        'payments' => 'setPayments',
        'authorizable_payments' => 'setAuthorizablePayments',
        'external_payments_failed' => 'setExternalPaymentsFailed',
        'external_payments_expired' => 'setExternalPaymentsExpired',
        'voucher_configurations' => 'setVoucherConfigurations',
        'voucher_configurations_buying' => 'setVoucherConfigurationsBuying',
        'user_groups' => 'setUserGroups',
        'system_alerts' => 'setSystemAlerts',
        'user_alerts' => 'setUserAlerts',
        'forward_message_categories' => 'setForwardMessageCategories'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user' => 'getUser',
        'role' => 'getRole',
        'can_edit' => 'getCanEdit',
        'email_allowed' => 'getEmailAllowed',
        'sms_allowed' => 'getSmsAllowed',
        'app_allowed' => 'getAppAllowed',
        'max_sms_per_month' => 'getMaxSmsPerMonth',
        'sms_count_this_month' => 'getSmsCountThisMonth',
        'forward_messages_allowed' => 'getForwardMessagesAllowed',
        'email_mailings_allowed' => 'getEmailMailingsAllowed',
        'sms_mailings_allowed' => 'getSmsMailingsAllowed',
        'app_mailings_allowed' => 'getAppMailingsAllowed',
        'notifications' => 'getNotifications',
        'forward_messages' => 'getForwardMessages',
        'email_mailings' => 'getEmailMailings',
        'sms_mailings' => 'getSmsMailings',
        'app_mailings' => 'getAppMailings',
        'user_accounts' => 'getUserAccounts',
        'payments' => 'getPayments',
        'authorizable_payments' => 'getAuthorizablePayments',
        'external_payments_failed' => 'getExternalPaymentsFailed',
        'external_payments_expired' => 'getExternalPaymentsExpired',
        'voucher_configurations' => 'getVoucherConfigurations',
        'voucher_configurations_buying' => 'getVoucherConfigurationsBuying',
        'user_groups' => 'getUserGroups',
        'system_alerts' => 'getSystemAlerts',
        'user_alerts' => 'getUserAlerts',
        'forward_message_categories' => 'getForwardMessageCategories'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('can_edit', $data ?? [], null);
        $this->setIfExists('email_allowed', $data ?? [], null);
        $this->setIfExists('sms_allowed', $data ?? [], null);
        $this->setIfExists('app_allowed', $data ?? [], null);
        $this->setIfExists('max_sms_per_month', $data ?? [], null);
        $this->setIfExists('sms_count_this_month', $data ?? [], null);
        $this->setIfExists('forward_messages_allowed', $data ?? [], null);
        $this->setIfExists('email_mailings_allowed', $data ?? [], null);
        $this->setIfExists('sms_mailings_allowed', $data ?? [], null);
        $this->setIfExists('app_mailings_allowed', $data ?? [], null);
        $this->setIfExists('notifications', $data ?? [], null);
        $this->setIfExists('forward_messages', $data ?? [], null);
        $this->setIfExists('email_mailings', $data ?? [], null);
        $this->setIfExists('sms_mailings', $data ?? [], null);
        $this->setIfExists('app_mailings', $data ?? [], null);
        $this->setIfExists('user_accounts', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('authorizable_payments', $data ?? [], null);
        $this->setIfExists('external_payments_failed', $data ?? [], null);
        $this->setIfExists('external_payments_expired', $data ?? [], null);
        $this->setIfExists('voucher_configurations', $data ?? [], null);
        $this->setIfExists('voucher_configurations_buying', $data ?? [], null);
        $this->setIfExists('user_groups', $data ?? [], null);
        $this->setIfExists('system_alerts', $data ?? [], null);
        $this->setIfExists('user_alerts', $data ?? [], null);
        $this->setIfExists('forward_message_categories', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\User|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\User|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets role
     *
     * @return \OpenAPI\Client\Model\RoleEnum|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param \OpenAPI\Client\Model\RoleEnum|null $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool|null
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool|null $can_edit Indicates whether the logged user can edit the notitification settings of this user.
     *
     * @return self
     */
    public function setCanEdit($can_edit)
    {
        if (is_null($can_edit)) {
            throw new \InvalidArgumentException('non-nullable can_edit cannot be null');
        }
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets email_allowed
     *
     * @return bool|null
     */
    public function getEmailAllowed()
    {
        return $this->container['email_allowed'];
    }

    /**
     * Sets email_allowed
     *
     * @param bool|null $email_allowed Indicates whether e-mail notifications are allowed
     *
     * @return self
     */
    public function setEmailAllowed($email_allowed)
    {
        if (is_null($email_allowed)) {
            throw new \InvalidArgumentException('non-nullable email_allowed cannot be null');
        }
        $this->container['email_allowed'] = $email_allowed;

        return $this;
    }

    /**
     * Gets sms_allowed
     *
     * @return bool|null
     */
    public function getSmsAllowed()
    {
        return $this->container['sms_allowed'];
    }

    /**
     * Sets sms_allowed
     *
     * @param bool|null $sms_allowed Indicates whether SMS notifications are allowed
     *
     * @return self
     */
    public function setSmsAllowed($sms_allowed)
    {
        if (is_null($sms_allowed)) {
            throw new \InvalidArgumentException('non-nullable sms_allowed cannot be null');
        }
        $this->container['sms_allowed'] = $sms_allowed;

        return $this;
    }

    /**
     * Gets app_allowed
     *
     * @return bool|null
     */
    public function getAppAllowed()
    {
        return $this->container['app_allowed'];
    }

    /**
     * Sets app_allowed
     *
     * @param bool|null $app_allowed Indicates whether mobile application push notifications are allowed
     *
     * @return self
     */
    public function setAppAllowed($app_allowed)
    {
        if (is_null($app_allowed)) {
            throw new \InvalidArgumentException('non-nullable app_allowed cannot be null');
        }
        $this->container['app_allowed'] = $app_allowed;

        return $this;
    }

    /**
     * Gets max_sms_per_month
     *
     * @return int|null
     */
    public function getMaxSmsPerMonth()
    {
        return $this->container['max_sms_per_month'];
    }

    /**
     * Sets max_sms_per_month
     *
     * @param int|null $max_sms_per_month The maximum number of allowed SMS messages per month
     *
     * @return self
     */
    public function setMaxSmsPerMonth($max_sms_per_month)
    {
        if (is_null($max_sms_per_month)) {
            throw new \InvalidArgumentException('non-nullable max_sms_per_month cannot be null');
        }
        $this->container['max_sms_per_month'] = $max_sms_per_month;

        return $this;
    }

    /**
     * Gets sms_count_this_month
     *
     * @return int|null
     */
    public function getSmsCountThisMonth()
    {
        return $this->container['sms_count_this_month'];
    }

    /**
     * Sets sms_count_this_month
     *
     * @param int|null $sms_count_this_month The number of SMS messages already sent this month
     *
     * @return self
     */
    public function setSmsCountThisMonth($sms_count_this_month)
    {
        if (is_null($sms_count_this_month)) {
            throw new \InvalidArgumentException('non-nullable sms_count_this_month cannot be null');
        }
        $this->container['sms_count_this_month'] = $sms_count_this_month;

        return $this;
    }

    /**
     * Gets forward_messages_allowed
     *
     * @return bool|null
     */
    public function getForwardMessagesAllowed()
    {
        return $this->container['forward_messages_allowed'];
    }

    /**
     * Sets forward_messages_allowed
     *
     * @param bool|null $forward_messages_allowed Indicates whether it can be configured to forward received internal messages to the user's e-mail. Only applicable for users (members / brokers), not administrators.
     *
     * @return self
     */
    public function setForwardMessagesAllowed($forward_messages_allowed)
    {
        if (is_null($forward_messages_allowed)) {
            throw new \InvalidArgumentException('non-nullable forward_messages_allowed cannot be null');
        }
        $this->container['forward_messages_allowed'] = $forward_messages_allowed;

        return $this;
    }

    /**
     * Gets email_mailings_allowed
     *
     * @return bool|null
     */
    public function getEmailMailingsAllowed()
    {
        return $this->container['email_mailings_allowed'];
    }

    /**
     * Sets email_mailings_allowed
     *
     * @param bool|null $email_mailings_allowed Indicates whether email mailings are allowed to be configured by users. Only applicable for users (members / brokers), not administrators.
     *
     * @return self
     */
    public function setEmailMailingsAllowed($email_mailings_allowed)
    {
        if (is_null($email_mailings_allowed)) {
            throw new \InvalidArgumentException('non-nullable email_mailings_allowed cannot be null');
        }
        $this->container['email_mailings_allowed'] = $email_mailings_allowed;

        return $this;
    }

    /**
     * Gets sms_mailings_allowed
     *
     * @return bool|null
     */
    public function getSmsMailingsAllowed()
    {
        return $this->container['sms_mailings_allowed'];
    }

    /**
     * Sets sms_mailings_allowed
     *
     * @param bool|null $sms_mailings_allowed Indicates whether sms mailings are allowed to be configured by users. Only applicable for users (members / brokers), not administrators.
     *
     * @return self
     */
    public function setSmsMailingsAllowed($sms_mailings_allowed)
    {
        if (is_null($sms_mailings_allowed)) {
            throw new \InvalidArgumentException('non-nullable sms_mailings_allowed cannot be null');
        }
        $this->container['sms_mailings_allowed'] = $sms_mailings_allowed;

        return $this;
    }

    /**
     * Gets app_mailings_allowed
     *
     * @return bool|null
     */
    public function getAppMailingsAllowed()
    {
        return $this->container['app_mailings_allowed'];
    }

    /**
     * Sets app_mailings_allowed
     *
     * @param bool|null $app_mailings_allowed Indicates whether FCM mobile notification mailings are allowed to be configured by users. Only applicable for users (members / brokers), not administrators.
     *
     * @return self
     */
    public function setAppMailingsAllowed($app_mailings_allowed)
    {
        if (is_null($app_mailings_allowed)) {
            throw new \InvalidArgumentException('non-nullable app_mailings_allowed cannot be null');
        }
        $this->container['app_mailings_allowed'] = $app_mailings_allowed;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return \OpenAPI\Client\Model\NotificationTypeMediums[]|null
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param \OpenAPI\Client\Model\NotificationTypeMediums[]|null $notifications Per notification kind, indicates the mediums it is sent. It is guaranteed that all and only the allowed kinds are sent.
     *
     * @return self
     */
    public function setNotifications($notifications)
    {
        if (is_null($notifications)) {
            throw new \InvalidArgumentException('non-nullable notifications cannot be null');
        }
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets forward_messages
     *
     * @return bool|null
     */
    public function getForwardMessages()
    {
        return $this->container['forward_messages'];
    }

    /**
     * Sets forward_messages
     *
     * @param bool|null $forward_messages Indicates whether to forward received internal messages to the user's e-mail. Only applicable for users, not administrators.
     *
     * @return self
     */
    public function setForwardMessages($forward_messages)
    {
        if (is_null($forward_messages)) {
            throw new \InvalidArgumentException('non-nullable forward_messages cannot be null');
        }
        $this->container['forward_messages'] = $forward_messages;

        return $this;
    }

    /**
     * Gets email_mailings
     *
     * @return bool|null
     */
    public function getEmailMailings()
    {
        return $this->container['email_mailings'];
    }

    /**
     * Sets email_mailings
     *
     * @param bool|null $email_mailings Indicates whether the user will receive email mailings. Only applicable for users (members / brokers), not administrators.
     *
     * @return self
     */
    public function setEmailMailings($email_mailings)
    {
        if (is_null($email_mailings)) {
            throw new \InvalidArgumentException('non-nullable email_mailings cannot be null');
        }
        $this->container['email_mailings'] = $email_mailings;

        return $this;
    }

    /**
     * Gets sms_mailings
     *
     * @return bool|null
     */
    public function getSmsMailings()
    {
        return $this->container['sms_mailings'];
    }

    /**
     * Sets sms_mailings
     *
     * @param bool|null $sms_mailings Indicates whether the user will receive SMS mailings. Only applicable for users (members / brokers), not administrators.
     *
     * @return self
     */
    public function setSmsMailings($sms_mailings)
    {
        if (is_null($sms_mailings)) {
            throw new \InvalidArgumentException('non-nullable sms_mailings cannot be null');
        }
        $this->container['sms_mailings'] = $sms_mailings;

        return $this;
    }

    /**
     * Gets app_mailings
     *
     * @return bool|null
     */
    public function getAppMailings()
    {
        return $this->container['app_mailings'];
    }

    /**
     * Sets app_mailings
     *
     * @param bool|null $app_mailings Indicates whether the user will receive FCM mobile notification mailings. Only applicable for users (members / brokers), not administrators.
     *
     * @return self
     */
    public function setAppMailings($app_mailings)
    {
        if (is_null($app_mailings)) {
            throw new \InvalidArgumentException('non-nullable app_mailings cannot be null');
        }
        $this->container['app_mailings'] = $app_mailings;

        return $this;
    }

    /**
     * Gets user_accounts
     *
     * @return \OpenAPI\Client\Model\AccountNotificationSettingsView[]|null
     */
    public function getUserAccounts()
    {
        return $this->container['user_accounts'];
    }

    /**
     * Sets user_accounts
     *
     * @param \OpenAPI\Client\Model\AccountNotificationSettingsView[]|null $user_accounts Contains the settings for each user account. Only applicable for users (members / brokers), not administrators.
     *
     * @return self
     */
    public function setUserAccounts($user_accounts)
    {
        if (is_null($user_accounts)) {
            throw new \InvalidArgumentException('non-nullable user_accounts cannot be null');
        }
        $this->container['user_accounts'] = $user_accounts;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return \OpenAPI\Client\Model\TransferType[]|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param \OpenAPI\Client\Model\TransferType[]|null $payments The payment types to be notified for notifications of type `paymentPerformed`. Only applicable for administrators, not users (members / brokers).
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            throw new \InvalidArgumentException('non-nullable payments cannot be null');
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets authorizable_payments
     *
     * @return \OpenAPI\Client\Model\TransferType[]|null
     */
    public function getAuthorizablePayments()
    {
        return $this->container['authorizable_payments'];
    }

    /**
     * Sets authorizable_payments
     *
     * @param \OpenAPI\Client\Model\TransferType[]|null $authorizable_payments The payment types to be notified for notifications of type `paymentAwaitingAdminAuthorization`. Only applicable for administrators, not users (members / brokers).
     *
     * @return self
     */
    public function setAuthorizablePayments($authorizable_payments)
    {
        if (is_null($authorizable_payments)) {
            throw new \InvalidArgumentException('non-nullable authorizable_payments cannot be null');
        }
        $this->container['authorizable_payments'] = $authorizable_payments;

        return $this;
    }

    /**
     * Gets external_payments_failed
     *
     * @return \OpenAPI\Client\Model\TransferType[]|null
     */
    public function getExternalPaymentsFailed()
    {
        return $this->container['external_payments_failed'];
    }

    /**
     * Sets external_payments_failed
     *
     * @param \OpenAPI\Client\Model\TransferType[]|null $external_payments_failed The payment types to be notified for notifications of type `externalUserPaymentPerformedFailed`. Only applicable for administrators, not users (members / brokers).
     *
     * @return self
     */
    public function setExternalPaymentsFailed($external_payments_failed)
    {
        if (is_null($external_payments_failed)) {
            throw new \InvalidArgumentException('non-nullable external_payments_failed cannot be null');
        }
        $this->container['external_payments_failed'] = $external_payments_failed;

        return $this;
    }

    /**
     * Gets external_payments_expired
     *
     * @return \OpenAPI\Client\Model\TransferType[]|null
     */
    public function getExternalPaymentsExpired()
    {
        return $this->container['external_payments_expired'];
    }

    /**
     * Sets external_payments_expired
     *
     * @param \OpenAPI\Client\Model\TransferType[]|null $external_payments_expired The payment types to be notified for notifications of type `externalUserPaymentExpired`. Only applicable for administrators, not users (members / brokers).
     *
     * @return self
     */
    public function setExternalPaymentsExpired($external_payments_expired)
    {
        if (is_null($external_payments_expired)) {
            throw new \InvalidArgumentException('non-nullable external_payments_expired cannot be null');
        }
        $this->container['external_payments_expired'] = $external_payments_expired;

        return $this;
    }

    /**
     * Gets voucher_configurations
     *
     * @return \OpenAPI\Client\Model\EntityReference[]|null
     */
    public function getVoucherConfigurations()
    {
        return $this->container['voucher_configurations'];
    }

    /**
     * Sets voucher_configurations
     *
     * @param \OpenAPI\Client\Model\EntityReference[]|null $voucher_configurations The voucher configurations to be notified for notifications of types `generatedVouchersAboutToExpire` and `generatedVouchersExpired`. Only applicable for administrators, not users (members / brokers).
     *
     * @return self
     */
    public function setVoucherConfigurations($voucher_configurations)
    {
        if (is_null($voucher_configurations)) {
            throw new \InvalidArgumentException('non-nullable voucher_configurations cannot be null');
        }
        $this->container['voucher_configurations'] = $voucher_configurations;

        return $this;
    }

    /**
     * Gets voucher_configurations_buying
     *
     * @return \OpenAPI\Client\Model\EntityReference[]|null
     */
    public function getVoucherConfigurationsBuying()
    {
        return $this->container['voucher_configurations_buying'];
    }

    /**
     * Sets voucher_configurations_buying
     *
     * @param \OpenAPI\Client\Model\EntityReference[]|null $voucher_configurations_buying The voucher configurations to be notified for notifications of type `voucherBuyingAboutToExpire`. Only applicable for administrators, not users (members / brokers).
     *
     * @return self
     */
    public function setVoucherConfigurationsBuying($voucher_configurations_buying)
    {
        if (is_null($voucher_configurations_buying)) {
            throw new \InvalidArgumentException('non-nullable voucher_configurations_buying cannot be null');
        }
        $this->container['voucher_configurations_buying'] = $voucher_configurations_buying;

        return $this;
    }

    /**
     * Gets user_groups
     *
     * @return \OpenAPI\Client\Model\Group[]|null
     */
    public function getUserGroups()
    {
        return $this->container['user_groups'];
    }

    /**
     * Sets user_groups
     *
     * @param \OpenAPI\Client\Model\Group[]|null $user_groups The groups to be notified for notifications of type `userRegistration`. Only applicable for administrators, not users (members / brokers).
     *
     * @return self
     */
    public function setUserGroups($user_groups)
    {
        if (is_null($user_groups)) {
            throw new \InvalidArgumentException('non-nullable user_groups cannot be null');
        }
        $this->container['user_groups'] = $user_groups;

        return $this;
    }

    /**
     * Gets system_alerts
     *
     * @return \OpenAPI\Client\Model\SystemAlertTypeEnum[]|null
     */
    public function getSystemAlerts()
    {
        return $this->container['system_alerts'];
    }

    /**
     * Sets system_alerts
     *
     * @param \OpenAPI\Client\Model\SystemAlertTypeEnum[]|null $system_alerts The kinds of system alerts to be notified for notifications of type `systemAlert`. Only applicable for administrators, not users (members / brokers).
     *
     * @return self
     */
    public function setSystemAlerts($system_alerts)
    {
        if (is_null($system_alerts)) {
            throw new \InvalidArgumentException('non-nullable system_alerts cannot be null');
        }
        $this->container['system_alerts'] = $system_alerts;

        return $this;
    }

    /**
     * Gets user_alerts
     *
     * @return \OpenAPI\Client\Model\UserAlertTypeEnum[]|null
     */
    public function getUserAlerts()
    {
        return $this->container['user_alerts'];
    }

    /**
     * Sets user_alerts
     *
     * @param \OpenAPI\Client\Model\UserAlertTypeEnum[]|null $user_alerts The kinds of user alerts to be notified for notifications of type `userAlert`. Only applicable for administrators, not users (members / brokers).
     *
     * @return self
     */
    public function setUserAlerts($user_alerts)
    {
        if (is_null($user_alerts)) {
            throw new \InvalidArgumentException('non-nullable user_alerts cannot be null');
        }
        $this->container['user_alerts'] = $user_alerts;

        return $this;
    }

    /**
     * Gets forward_message_categories
     *
     * @return \OpenAPI\Client\Model\EntityReference[]|null
     */
    public function getForwardMessageCategories()
    {
        return $this->container['forward_message_categories'];
    }

    /**
     * Sets forward_message_categories
     *
     * @param \OpenAPI\Client\Model\EntityReference[]|null $forward_message_categories The message categories to which new messages to system will be forwarded to the administrator e-mail. Not tied to any notification type. Only applicable for administrators, not users (members / brokers).
     *
     * @return self
     */
    public function setForwardMessageCategories($forward_message_categories)
    {
        if (is_null($forward_message_categories)) {
            throw new \InvalidArgumentException('non-nullable forward_message_categories cannot be null');
        }
        $this->container['forward_message_categories'] = $forward_message_categories;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


