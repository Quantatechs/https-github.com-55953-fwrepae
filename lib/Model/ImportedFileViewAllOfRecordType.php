<?php
/**
 * ImportedFileViewAllOfRecordType
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ImportedFileViewAllOfRecordType Class Doc Comment
 *
 * @category Class
 * @description The type for imported records. Only if &#x60;kind&#x60; is &#x60;records&#x60;.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ImportedFileViewAllOfRecordType implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImportedFileView_allOf_recordType';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'internal_name' => 'string',
        'plural_name' => 'string',
        'svg_icon' => 'string',
        'icon' => 'string',
        'custom_icon_content' => 'string',
        'use_view_page' => 'bool',
        'layout' => '\OpenAPI\Client\Model\RecordLayoutEnum',
        'admin_menu' => '\OpenAPI\Client\Model\RecordTypeAllOfAdminMenu',
        'user_menu' => '\OpenAPI\Client\Model\RecordTypeAllOfUserMenu',
        'user_profile_section' => '\OpenAPI\Client\Model\RecordTypeAllOfUserProfileSection'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'internal_name' => null,
        'plural_name' => null,
        'svg_icon' => null,
        'icon' => null,
        'custom_icon_content' => null,
        'use_view_page' => null,
        'layout' => null,
        'admin_menu' => null,
        'user_menu' => null,
        'user_profile_section' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'internal_name' => false,
        'plural_name' => false,
        'svg_icon' => false,
        'icon' => false,
        'custom_icon_content' => false,
        'use_view_page' => false,
        'layout' => false,
        'admin_menu' => false,
        'user_menu' => false,
        'user_profile_section' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'internal_name' => 'internalName',
        'plural_name' => 'pluralName',
        'svg_icon' => 'svgIcon',
        'icon' => 'icon',
        'custom_icon_content' => 'customIconContent',
        'use_view_page' => 'useViewPage',
        'layout' => 'layout',
        'admin_menu' => 'adminMenu',
        'user_menu' => 'userMenu',
        'user_profile_section' => 'userProfileSection'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'internal_name' => 'setInternalName',
        'plural_name' => 'setPluralName',
        'svg_icon' => 'setSvgIcon',
        'icon' => 'setIcon',
        'custom_icon_content' => 'setCustomIconContent',
        'use_view_page' => 'setUseViewPage',
        'layout' => 'setLayout',
        'admin_menu' => 'setAdminMenu',
        'user_menu' => 'setUserMenu',
        'user_profile_section' => 'setUserProfileSection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'internal_name' => 'getInternalName',
        'plural_name' => 'getPluralName',
        'svg_icon' => 'getSvgIcon',
        'icon' => 'getIcon',
        'custom_icon_content' => 'getCustomIconContent',
        'use_view_page' => 'getUseViewPage',
        'layout' => 'getLayout',
        'admin_menu' => 'getAdminMenu',
        'user_menu' => 'getUserMenu',
        'user_profile_section' => 'getUserProfileSection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('internal_name', $data ?? [], null);
        $this->setIfExists('plural_name', $data ?? [], null);
        $this->setIfExists('svg_icon', $data ?? [], null);
        $this->setIfExists('icon', $data ?? [], null);
        $this->setIfExists('custom_icon_content', $data ?? [], null);
        $this->setIfExists('use_view_page', $data ?? [], null);
        $this->setIfExists('layout', $data ?? [], null);
        $this->setIfExists('admin_menu', $data ?? [], null);
        $this->setIfExists('user_menu', $data ?? [], null);
        $this->setIfExists('user_profile_section', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The internal entity identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The entity name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets internal_name
     *
     * @return string|null
     */
    public function getInternalName()
    {
        return $this->container['internal_name'];
    }

    /**
     * Sets internal_name
     *
     * @param string|null $internal_name The entity internal name, which can be seen as an extra identifier
     *
     * @return self
     */
    public function setInternalName($internal_name)
    {
        if (is_null($internal_name)) {
            throw new \InvalidArgumentException('non-nullable internal_name cannot be null');
        }
        $this->container['internal_name'] = $internal_name;

        return $this;
    }

    /**
     * Gets plural_name
     *
     * @return string|null
     */
    public function getPluralName()
    {
        return $this->container['plural_name'];
    }

    /**
     * Sets plural_name
     *
     * @param string|null $plural_name The name for the plural form
     *
     * @return self
     */
    public function setPluralName($plural_name)
    {
        if (is_null($plural_name)) {
            throw new \InvalidArgumentException('non-nullable plural_name cannot be null');
        }
        $this->container['plural_name'] = $plural_name;

        return $this;
    }

    /**
     * Gets svg_icon
     *
     * @return string|null
     */
    public function getSvgIcon()
    {
        return $this->container['svg_icon'];
    }

    /**
     * Sets svg_icon
     *
     * @param string|null $svg_icon The name of the SVG icon. The content of the icon can be obtained with `GET /images/svg-icons/{name}.svg`
     *
     * @return self
     */
    public function setSvgIcon($svg_icon)
    {
        if (is_null($svg_icon)) {
            throw new \InvalidArgumentException('non-nullable svg_icon cannot be null');
        }
        $this->container['svg_icon'] = $svg_icon;

        return $this;
    }

    /**
     * Gets icon
     *
     * @return string|null
     */
    public function getIcon()
    {
        return $this->container['icon'];
    }

    /**
     * Sets icon
     *
     * @param string|null $icon The character that represents the icon in the Cyclos font. Only used by the mobile application.
     *
     * @return self
     */
    public function setIcon($icon)
    {
        if (is_null($icon)) {
            throw new \InvalidArgumentException('non-nullable icon cannot be null');
        }
        $this->container['icon'] = $icon;

        return $this;
    }

    /**
     * Gets custom_icon_content
     *
     * @return string|null
     */
    public function getCustomIconContent()
    {
        return $this->container['custom_icon_content'];
    }

    /**
     * Sets custom_icon_content
     *
     * @param string|null $custom_icon_content The content of the custom SVG icon. Used only by the mobile application.
     *
     * @return self
     */
    public function setCustomIconContent($custom_icon_content)
    {
        if (is_null($custom_icon_content)) {
            throw new \InvalidArgumentException('non-nullable custom_icon_content cannot be null');
        }
        $this->container['custom_icon_content'] = $custom_icon_content;

        return $this;
    }

    /**
     * Gets use_view_page
     *
     * @return bool|null
     */
    public function getUseViewPage()
    {
        return $this->container['use_view_page'];
    }

    /**
     * Sets use_view_page
     *
     * @param bool|null $use_view_page Whether the record type is set to use a separated view / edit page
     *
     * @return self
     */
    public function setUseViewPage($use_view_page)
    {
        if (is_null($use_view_page)) {
            throw new \InvalidArgumentException('non-nullable use_view_page cannot be null');
        }
        $this->container['use_view_page'] = $use_view_page;

        return $this;
    }

    /**
     * Gets layout
     *
     * @return \OpenAPI\Client\Model\RecordLayoutEnum|null
     */
    public function getLayout()
    {
        return $this->container['layout'];
    }

    /**
     * Sets layout
     *
     * @param \OpenAPI\Client\Model\RecordLayoutEnum|null $layout layout
     *
     * @return self
     */
    public function setLayout($layout)
    {
        if (is_null($layout)) {
            throw new \InvalidArgumentException('non-nullable layout cannot be null');
        }
        $this->container['layout'] = $layout;

        return $this;
    }

    /**
     * Gets admin_menu
     *
     * @return \OpenAPI\Client\Model\RecordTypeAllOfAdminMenu|null
     */
    public function getAdminMenu()
    {
        return $this->container['admin_menu'];
    }

    /**
     * Sets admin_menu
     *
     * @param \OpenAPI\Client\Model\RecordTypeAllOfAdminMenu|null $admin_menu admin_menu
     *
     * @return self
     */
    public function setAdminMenu($admin_menu)
    {
        if (is_null($admin_menu)) {
            throw new \InvalidArgumentException('non-nullable admin_menu cannot be null');
        }
        $this->container['admin_menu'] = $admin_menu;

        return $this;
    }

    /**
     * Gets user_menu
     *
     * @return \OpenAPI\Client\Model\RecordTypeAllOfUserMenu|null
     */
    public function getUserMenu()
    {
        return $this->container['user_menu'];
    }

    /**
     * Sets user_menu
     *
     * @param \OpenAPI\Client\Model\RecordTypeAllOfUserMenu|null $user_menu user_menu
     *
     * @return self
     */
    public function setUserMenu($user_menu)
    {
        if (is_null($user_menu)) {
            throw new \InvalidArgumentException('non-nullable user_menu cannot be null');
        }
        $this->container['user_menu'] = $user_menu;

        return $this;
    }

    /**
     * Gets user_profile_section
     *
     * @return \OpenAPI\Client\Model\RecordTypeAllOfUserProfileSection|null
     */
    public function getUserProfileSection()
    {
        return $this->container['user_profile_section'];
    }

    /**
     * Sets user_profile_section
     *
     * @param \OpenAPI\Client\Model\RecordTypeAllOfUserProfileSection|null $user_profile_section user_profile_section
     *
     * @return self
     */
    public function setUserProfileSection($user_profile_section)
    {
        if (is_null($user_profile_section)) {
            throw new \InvalidArgumentException('non-nullable user_profile_section cannot be null');
        }
        $this->container['user_profile_section'] = $user_profile_section;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


