<?php
/**
 * AdView
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AdView Class Doc Comment
 *
 * @category Class
 * @description Detailed information when viewing an advertisement
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AdView implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AdView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'image' => '\OpenAPI\Client\Model\AdAllOfImage',
        'kind' => '\OpenAPI\Client\Model\AdKind',
        'status' => '\OpenAPI\Client\Model\AdStatusEnum',
        'price' => 'float',
        'product_number' => 'string',
        'description' => 'string',
        'user' => '\OpenAPI\Client\Model\AdDetailedAllOfUser',
        'publication_period' => '\OpenAPI\Client\Model\DatePeriod',
        'stock_quantity' => 'float',
        'unlimited_stock' => 'bool',
        'max_allowed_in_cart' => 'float',
        'min_allowed_in_cart' => 'float',
        'promotional_price' => 'float',
        'categories' => '\OpenAPI\Client\Model\AdCategoryWithParent[]',
        'custom_values' => '\OpenAPI\Client\Model\CustomFieldValue[]',
        'currency' => '\OpenAPI\Client\Model\Currency',
        'promotional_period' => '\OpenAPI\Client\Model\AdViewAllOfPromotionalPeriod',
        'promotional_period_active' => 'bool',
        'can_edit' => 'bool',
        'can_remove' => 'bool',
        'can_buy' => 'bool',
        'can_ask' => 'bool',
        'can_hide' => 'bool',
        'can_unhide' => 'bool',
        'can_set_as_draft' => 'bool',
        'can_request_authorization' => 'bool',
        'can_approve' => 'bool',
        'can_reject' => 'bool',
        'can_set_as_favorite' => 'bool',
        'favorite' => 'bool',
        'questions_enabled' => 'bool',
        'last_authorization_comments' => 'string',
        'additional_images' => '\OpenAPI\Client\Model\Image[]',
        'user_addresses' => '\OpenAPI\Client\Model\Address[]',
        'ad_addresses' => '\OpenAPI\Client\Model\Address[]',
        'questions' => '\OpenAPI\Client\Model\AdQuestion[]',
        'allow_decimal' => 'bool',
        'delivery_methods' => '\OpenAPI\Client\Model\DeliveryMethod[]',
        'operations' => '\OpenAPI\Client\Model\Operation[]',
        'hide_price' => 'bool',
        'hide_owner' => 'bool',
        'export_formats' => '\OpenAPI\Client\Model\ExportFormat[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'image' => null,
        'kind' => null,
        'status' => null,
        'price' => 'number',
        'product_number' => null,
        'description' => null,
        'user' => null,
        'publication_period' => null,
        'stock_quantity' => 'number',
        'unlimited_stock' => null,
        'max_allowed_in_cart' => 'number',
        'min_allowed_in_cart' => 'number',
        'promotional_price' => 'number',
        'categories' => null,
        'custom_values' => null,
        'currency' => null,
        'promotional_period' => null,
        'promotional_period_active' => null,
        'can_edit' => null,
        'can_remove' => null,
        'can_buy' => null,
        'can_ask' => null,
        'can_hide' => null,
        'can_unhide' => null,
        'can_set_as_draft' => null,
        'can_request_authorization' => null,
        'can_approve' => null,
        'can_reject' => null,
        'can_set_as_favorite' => null,
        'favorite' => null,
        'questions_enabled' => null,
        'last_authorization_comments' => null,
        'additional_images' => null,
        'user_addresses' => null,
        'ad_addresses' => null,
        'questions' => null,
        'allow_decimal' => null,
        'delivery_methods' => null,
        'operations' => null,
        'hide_price' => null,
        'hide_owner' => null,
        'export_formats' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'image' => false,
        'kind' => false,
        'status' => false,
        'price' => false,
        'product_number' => false,
        'description' => false,
        'user' => false,
        'publication_period' => false,
        'stock_quantity' => false,
        'unlimited_stock' => false,
        'max_allowed_in_cart' => false,
        'min_allowed_in_cart' => false,
        'promotional_price' => false,
        'categories' => false,
        'custom_values' => false,
        'currency' => false,
        'promotional_period' => false,
        'promotional_period_active' => false,
        'can_edit' => false,
        'can_remove' => false,
        'can_buy' => false,
        'can_ask' => false,
        'can_hide' => false,
        'can_unhide' => false,
        'can_set_as_draft' => false,
        'can_request_authorization' => false,
        'can_approve' => false,
        'can_reject' => false,
        'can_set_as_favorite' => false,
        'favorite' => false,
        'questions_enabled' => false,
        'last_authorization_comments' => false,
        'additional_images' => false,
        'user_addresses' => false,
        'ad_addresses' => false,
        'questions' => false,
        'allow_decimal' => false,
        'delivery_methods' => false,
        'operations' => false,
        'hide_price' => false,
        'hide_owner' => false,
        'export_formats' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'image' => 'image',
        'kind' => 'kind',
        'status' => 'status',
        'price' => 'price',
        'product_number' => 'productNumber',
        'description' => 'description',
        'user' => 'user',
        'publication_period' => 'publicationPeriod',
        'stock_quantity' => 'stockQuantity',
        'unlimited_stock' => 'unlimitedStock',
        'max_allowed_in_cart' => 'maxAllowedInCart',
        'min_allowed_in_cart' => 'minAllowedInCart',
        'promotional_price' => 'promotionalPrice',
        'categories' => 'categories',
        'custom_values' => 'customValues',
        'currency' => 'currency',
        'promotional_period' => 'promotionalPeriod',
        'promotional_period_active' => 'promotionalPeriodActive',
        'can_edit' => 'canEdit',
        'can_remove' => 'canRemove',
        'can_buy' => 'canBuy',
        'can_ask' => 'canAsk',
        'can_hide' => 'canHide',
        'can_unhide' => 'canUnhide',
        'can_set_as_draft' => 'canSetAsDraft',
        'can_request_authorization' => 'canRequestAuthorization',
        'can_approve' => 'canApprove',
        'can_reject' => 'canReject',
        'can_set_as_favorite' => 'canSetAsFavorite',
        'favorite' => 'favorite',
        'questions_enabled' => 'questionsEnabled',
        'last_authorization_comments' => 'lastAuthorizationComments',
        'additional_images' => 'additionalImages',
        'user_addresses' => 'userAddresses',
        'ad_addresses' => 'adAddresses',
        'questions' => 'questions',
        'allow_decimal' => 'allowDecimal',
        'delivery_methods' => 'deliveryMethods',
        'operations' => 'operations',
        'hide_price' => 'hidePrice',
        'hide_owner' => 'hideOwner',
        'export_formats' => 'exportFormats'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'image' => 'setImage',
        'kind' => 'setKind',
        'status' => 'setStatus',
        'price' => 'setPrice',
        'product_number' => 'setProductNumber',
        'description' => 'setDescription',
        'user' => 'setUser',
        'publication_period' => 'setPublicationPeriod',
        'stock_quantity' => 'setStockQuantity',
        'unlimited_stock' => 'setUnlimitedStock',
        'max_allowed_in_cart' => 'setMaxAllowedInCart',
        'min_allowed_in_cart' => 'setMinAllowedInCart',
        'promotional_price' => 'setPromotionalPrice',
        'categories' => 'setCategories',
        'custom_values' => 'setCustomValues',
        'currency' => 'setCurrency',
        'promotional_period' => 'setPromotionalPeriod',
        'promotional_period_active' => 'setPromotionalPeriodActive',
        'can_edit' => 'setCanEdit',
        'can_remove' => 'setCanRemove',
        'can_buy' => 'setCanBuy',
        'can_ask' => 'setCanAsk',
        'can_hide' => 'setCanHide',
        'can_unhide' => 'setCanUnhide',
        'can_set_as_draft' => 'setCanSetAsDraft',
        'can_request_authorization' => 'setCanRequestAuthorization',
        'can_approve' => 'setCanApprove',
        'can_reject' => 'setCanReject',
        'can_set_as_favorite' => 'setCanSetAsFavorite',
        'favorite' => 'setFavorite',
        'questions_enabled' => 'setQuestionsEnabled',
        'last_authorization_comments' => 'setLastAuthorizationComments',
        'additional_images' => 'setAdditionalImages',
        'user_addresses' => 'setUserAddresses',
        'ad_addresses' => 'setAdAddresses',
        'questions' => 'setQuestions',
        'allow_decimal' => 'setAllowDecimal',
        'delivery_methods' => 'setDeliveryMethods',
        'operations' => 'setOperations',
        'hide_price' => 'setHidePrice',
        'hide_owner' => 'setHideOwner',
        'export_formats' => 'setExportFormats'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'image' => 'getImage',
        'kind' => 'getKind',
        'status' => 'getStatus',
        'price' => 'getPrice',
        'product_number' => 'getProductNumber',
        'description' => 'getDescription',
        'user' => 'getUser',
        'publication_period' => 'getPublicationPeriod',
        'stock_quantity' => 'getStockQuantity',
        'unlimited_stock' => 'getUnlimitedStock',
        'max_allowed_in_cart' => 'getMaxAllowedInCart',
        'min_allowed_in_cart' => 'getMinAllowedInCart',
        'promotional_price' => 'getPromotionalPrice',
        'categories' => 'getCategories',
        'custom_values' => 'getCustomValues',
        'currency' => 'getCurrency',
        'promotional_period' => 'getPromotionalPeriod',
        'promotional_period_active' => 'getPromotionalPeriodActive',
        'can_edit' => 'getCanEdit',
        'can_remove' => 'getCanRemove',
        'can_buy' => 'getCanBuy',
        'can_ask' => 'getCanAsk',
        'can_hide' => 'getCanHide',
        'can_unhide' => 'getCanUnhide',
        'can_set_as_draft' => 'getCanSetAsDraft',
        'can_request_authorization' => 'getCanRequestAuthorization',
        'can_approve' => 'getCanApprove',
        'can_reject' => 'getCanReject',
        'can_set_as_favorite' => 'getCanSetAsFavorite',
        'favorite' => 'getFavorite',
        'questions_enabled' => 'getQuestionsEnabled',
        'last_authorization_comments' => 'getLastAuthorizationComments',
        'additional_images' => 'getAdditionalImages',
        'user_addresses' => 'getUserAddresses',
        'ad_addresses' => 'getAdAddresses',
        'questions' => 'getQuestions',
        'allow_decimal' => 'getAllowDecimal',
        'delivery_methods' => 'getDeliveryMethods',
        'operations' => 'getOperations',
        'hide_price' => 'getHidePrice',
        'hide_owner' => 'getHideOwner',
        'export_formats' => 'getExportFormats'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('kind', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('price', $data ?? [], null);
        $this->setIfExists('product_number', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('publication_period', $data ?? [], null);
        $this->setIfExists('stock_quantity', $data ?? [], null);
        $this->setIfExists('unlimited_stock', $data ?? [], null);
        $this->setIfExists('max_allowed_in_cart', $data ?? [], null);
        $this->setIfExists('min_allowed_in_cart', $data ?? [], null);
        $this->setIfExists('promotional_price', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('custom_values', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('promotional_period', $data ?? [], null);
        $this->setIfExists('promotional_period_active', $data ?? [], null);
        $this->setIfExists('can_edit', $data ?? [], null);
        $this->setIfExists('can_remove', $data ?? [], null);
        $this->setIfExists('can_buy', $data ?? [], null);
        $this->setIfExists('can_ask', $data ?? [], null);
        $this->setIfExists('can_hide', $data ?? [], null);
        $this->setIfExists('can_unhide', $data ?? [], null);
        $this->setIfExists('can_set_as_draft', $data ?? [], null);
        $this->setIfExists('can_request_authorization', $data ?? [], null);
        $this->setIfExists('can_approve', $data ?? [], null);
        $this->setIfExists('can_reject', $data ?? [], null);
        $this->setIfExists('can_set_as_favorite', $data ?? [], null);
        $this->setIfExists('favorite', $data ?? [], null);
        $this->setIfExists('questions_enabled', $data ?? [], null);
        $this->setIfExists('last_authorization_comments', $data ?? [], null);
        $this->setIfExists('additional_images', $data ?? [], null);
        $this->setIfExists('user_addresses', $data ?? [], null);
        $this->setIfExists('ad_addresses', $data ?? [], null);
        $this->setIfExists('questions', $data ?? [], null);
        $this->setIfExists('allow_decimal', $data ?? [], null);
        $this->setIfExists('delivery_methods', $data ?? [], null);
        $this->setIfExists('operations', $data ?? [], null);
        $this->setIfExists('hide_price', $data ?? [], null);
        $this->setIfExists('hide_owner', $data ?? [], null);
        $this->setIfExists('export_formats', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The internal entity identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The entity name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \OpenAPI\Client\Model\AdAllOfImage|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \OpenAPI\Client\Model\AdAllOfImage|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return \OpenAPI\Client\Model\AdKind|null
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param \OpenAPI\Client\Model\AdKind|null $kind kind
     *
     * @return self
     */
    public function setKind($kind)
    {
        if (is_null($kind)) {
            throw new \InvalidArgumentException('non-nullable kind cannot be null');
        }
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\AdStatusEnum|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\AdStatusEnum|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets price
     *
     * @return float|null
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param float|null $price The regular price.
     *
     * @return self
     */
    public function setPrice($price)
    {
        if (is_null($price)) {
            throw new \InvalidArgumentException('non-nullable price cannot be null');
        }
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets product_number
     *
     * @return string|null
     */
    public function getProductNumber()
    {
        return $this->container['product_number'];
    }

    /**
     * Sets product_number
     *
     * @param string|null $product_number The product number according to the webshop settings.
     *
     * @return self
     */
    public function setProductNumber($product_number)
    {
        if (is_null($product_number)) {
            throw new \InvalidArgumentException('non-nullable product_number cannot be null');
        }
        $this->container['product_number'] = $product_number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The advertisement description content, formatted as HTML
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\AdDetailedAllOfUser|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\AdDetailedAllOfUser|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets publication_period
     *
     * @return \OpenAPI\Client\Model\DatePeriod|null
     */
    public function getPublicationPeriod()
    {
        return $this->container['publication_period'];
    }

    /**
     * Sets publication_period
     *
     * @param \OpenAPI\Client\Model\DatePeriod|null $publication_period publication_period
     *
     * @return self
     */
    public function setPublicationPeriod($publication_period)
    {
        if (is_null($publication_period)) {
            throw new \InvalidArgumentException('non-nullable publication_period cannot be null');
        }
        $this->container['publication_period'] = $publication_period;

        return $this;
    }

    /**
     * Gets stock_quantity
     *
     * @return float|null
     */
    public function getStockQuantity()
    {
        return $this->container['stock_quantity'];
    }

    /**
     * Sets stock_quantity
     *
     * @param float|null $stock_quantity The stock disponibility. Only if `unlimitedStock` is false and the  'Stock type' was not marked as 'Not available' (through the web  interface).
     *
     * @return self
     */
    public function setStockQuantity($stock_quantity)
    {
        if (is_null($stock_quantity)) {
            throw new \InvalidArgumentException('non-nullable stock_quantity cannot be null');
        }
        $this->container['stock_quantity'] = $stock_quantity;

        return $this;
    }

    /**
     * Gets unlimited_stock
     *
     * @return bool|null
     */
    public function getUnlimitedStock()
    {
        return $this->container['unlimited_stock'];
    }

    /**
     * Sets unlimited_stock
     *
     * @param bool|null $unlimited_stock If true then it means there is always disponibility of the webshop ad.
     *
     * @return self
     */
    public function setUnlimitedStock($unlimited_stock)
    {
        if (is_null($unlimited_stock)) {
            throw new \InvalidArgumentException('non-nullable unlimited_stock cannot be null');
        }
        $this->container['unlimited_stock'] = $unlimited_stock;

        return $this;
    }

    /**
     * Gets max_allowed_in_cart
     *
     * @return float|null
     */
    public function getMaxAllowedInCart()
    {
        return $this->container['max_allowed_in_cart'];
    }

    /**
     * Sets max_allowed_in_cart
     *
     * @param float|null $max_allowed_in_cart The maximum quantity that can be specified in the shopping cart.
     *
     * @return self
     */
    public function setMaxAllowedInCart($max_allowed_in_cart)
    {
        if (is_null($max_allowed_in_cart)) {
            throw new \InvalidArgumentException('non-nullable max_allowed_in_cart cannot be null');
        }
        $this->container['max_allowed_in_cart'] = $max_allowed_in_cart;

        return $this;
    }

    /**
     * Gets min_allowed_in_cart
     *
     * @return float|null
     */
    public function getMinAllowedInCart()
    {
        return $this->container['min_allowed_in_cart'];
    }

    /**
     * Sets min_allowed_in_cart
     *
     * @param float|null $min_allowed_in_cart The minimum quantity that can be specified in the shopping cart.
     *
     * @return self
     */
    public function setMinAllowedInCart($min_allowed_in_cart)
    {
        if (is_null($min_allowed_in_cart)) {
            throw new \InvalidArgumentException('non-nullable min_allowed_in_cart cannot be null');
        }
        $this->container['min_allowed_in_cart'] = $min_allowed_in_cart;

        return $this;
    }

    /**
     * Gets promotional_price
     *
     * @return float|null
     */
    public function getPromotionalPrice()
    {
        return $this->container['promotional_price'];
    }

    /**
     * Sets promotional_price
     *
     * @param float|null $promotional_price The promotional price, to be applied on the promotional period is active
     *
     * @return self
     */
    public function setPromotionalPrice($promotional_price)
    {
        if (is_null($promotional_price)) {
            throw new \InvalidArgumentException('non-nullable promotional_price cannot be null');
        }
        $this->container['promotional_price'] = $promotional_price;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \OpenAPI\Client\Model\AdCategoryWithParent[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \OpenAPI\Client\Model\AdCategoryWithParent[]|null $categories Either internal name or id of categories this advertisement belongs to. In most cases an advertisement will have a single category, but this depends on the Cyclos configuration.
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets custom_values
     *
     * @return \OpenAPI\Client\Model\CustomFieldValue[]|null
     */
    public function getCustomValues()
    {
        return $this->container['custom_values'];
    }

    /**
     * Sets custom_values
     *
     * @param \OpenAPI\Client\Model\CustomFieldValue[]|null $custom_values The list of custom field values this advertisement has
     *
     * @return self
     */
    public function setCustomValues($custom_values)
    {
        if (is_null($custom_values)) {
            throw new \InvalidArgumentException('non-nullable custom_values cannot be null');
        }
        $this->container['custom_values'] = $custom_values;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\Currency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\Currency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets promotional_period
     *
     * @return \OpenAPI\Client\Model\AdViewAllOfPromotionalPeriod|null
     */
    public function getPromotionalPeriod()
    {
        return $this->container['promotional_period'];
    }

    /**
     * Sets promotional_period
     *
     * @param \OpenAPI\Client\Model\AdViewAllOfPromotionalPeriod|null $promotional_period promotional_period
     *
     * @return self
     */
    public function setPromotionalPeriod($promotional_period)
    {
        if (is_null($promotional_period)) {
            throw new \InvalidArgumentException('non-nullable promotional_period cannot be null');
        }
        $this->container['promotional_period'] = $promotional_period;

        return $this;
    }

    /**
     * Gets promotional_period_active
     *
     * @return bool|null
     */
    public function getPromotionalPeriodActive()
    {
        return $this->container['promotional_period_active'];
    }

    /**
     * Sets promotional_period_active
     *
     * @param bool|null $promotional_period_active Indicates whether the promotional period is active at the moment this data is returned
     *
     * @return self
     */
    public function setPromotionalPeriodActive($promotional_period_active)
    {
        if (is_null($promotional_period_active)) {
            throw new \InvalidArgumentException('non-nullable promotional_period_active cannot be null');
        }
        $this->container['promotional_period_active'] = $promotional_period_active;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool|null
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool|null $can_edit Indicates if the authenticated user can edit this advertisement
     *
     * @return self
     */
    public function setCanEdit($can_edit)
    {
        if (is_null($can_edit)) {
            throw new \InvalidArgumentException('non-nullable can_edit cannot be null');
        }
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets can_remove
     *
     * @return bool|null
     */
    public function getCanRemove()
    {
        return $this->container['can_remove'];
    }

    /**
     * Sets can_remove
     *
     * @param bool|null $can_remove Indicates if the authenticated user can remove this advertisement. The owner of the ad with manage permissions can remove the advertisement regardless the ad status.
     *
     * @return self
     */
    public function setCanRemove($can_remove)
    {
        if (is_null($can_remove)) {
            throw new \InvalidArgumentException('non-nullable can_remove cannot be null');
        }
        $this->container['can_remove'] = $can_remove;

        return $this;
    }

    /**
     * Gets can_buy
     *
     * @return bool|null
     */
    public function getCanBuy()
    {
        return $this->container['can_buy'];
    }

    /**
     * Sets can_buy
     *
     * @param bool|null $can_buy Indicates if the authenticated user can buy this webshop ad.
     *
     * @return self
     */
    public function setCanBuy($can_buy)
    {
        if (is_null($can_buy)) {
            throw new \InvalidArgumentException('non-nullable can_buy cannot be null');
        }
        $this->container['can_buy'] = $can_buy;

        return $this;
    }

    /**
     * Gets can_ask
     *
     * @return bool|null
     */
    public function getCanAsk()
    {
        return $this->container['can_ask'];
    }

    /**
     * Sets can_ask
     *
     * @param bool|null $can_ask Indicates if the authenticated user can ask questions about this advertisement.
     *
     * @return self
     */
    public function setCanAsk($can_ask)
    {
        if (is_null($can_ask)) {
            throw new \InvalidArgumentException('non-nullable can_ask cannot be null');
        }
        $this->container['can_ask'] = $can_ask;

        return $this;
    }

    /**
     * Gets can_hide
     *
     * @return bool|null
     */
    public function getCanHide()
    {
        return $this->container['can_hide'];
    }

    /**
     * Sets can_hide
     *
     * @param bool|null $can_hide Indicates if the authenticated user can hide this advertisement.
     *
     * @return self
     */
    public function setCanHide($can_hide)
    {
        if (is_null($can_hide)) {
            throw new \InvalidArgumentException('non-nullable can_hide cannot be null');
        }
        $this->container['can_hide'] = $can_hide;

        return $this;
    }

    /**
     * Gets can_unhide
     *
     * @return bool|null
     */
    public function getCanUnhide()
    {
        return $this->container['can_unhide'];
    }

    /**
     * Sets can_unhide
     *
     * @param bool|null $can_unhide Indicates if the authenticated user can unhide this advertisement.
     *
     * @return self
     */
    public function setCanUnhide($can_unhide)
    {
        if (is_null($can_unhide)) {
            throw new \InvalidArgumentException('non-nullable can_unhide cannot be null');
        }
        $this->container['can_unhide'] = $can_unhide;

        return $this;
    }

    /**
     * Gets can_set_as_draft
     *
     * @return bool|null
     */
    public function getCanSetAsDraft()
    {
        return $this->container['can_set_as_draft'];
    }

    /**
     * Sets can_set_as_draft
     *
     * @param bool|null $can_set_as_draft Indicates if the authenticated user can set as draft an already authorized (published) advertisement.
     *
     * @return self
     */
    public function setCanSetAsDraft($can_set_as_draft)
    {
        if (is_null($can_set_as_draft)) {
            throw new \InvalidArgumentException('non-nullable can_set_as_draft cannot be null');
        }
        $this->container['can_set_as_draft'] = $can_set_as_draft;

        return $this;
    }

    /**
     * Gets can_request_authorization
     *
     * @return bool|null
     */
    public function getCanRequestAuthorization()
    {
        return $this->container['can_request_authorization'];
    }

    /**
     * Sets can_request_authorization
     *
     * @param bool|null $can_request_authorization Indicates if the authenticated user can request for authorization for this advertisement.
     *
     * @return self
     */
    public function setCanRequestAuthorization($can_request_authorization)
    {
        if (is_null($can_request_authorization)) {
            throw new \InvalidArgumentException('non-nullable can_request_authorization cannot be null');
        }
        $this->container['can_request_authorization'] = $can_request_authorization;

        return $this;
    }

    /**
     * Gets can_approve
     *
     * @return bool|null
     */
    public function getCanApprove()
    {
        return $this->container['can_approve'];
    }

    /**
     * Sets can_approve
     *
     * @param bool|null $can_approve Indicates if the authenticated user can authorize this advertisement (user managers only).
     *
     * @return self
     */
    public function setCanApprove($can_approve)
    {
        if (is_null($can_approve)) {
            throw new \InvalidArgumentException('non-nullable can_approve cannot be null');
        }
        $this->container['can_approve'] = $can_approve;

        return $this;
    }

    /**
     * Gets can_reject
     *
     * @return bool|null
     */
    public function getCanReject()
    {
        return $this->container['can_reject'];
    }

    /**
     * Sets can_reject
     *
     * @param bool|null $can_reject Indicates if the authenticated user can reject this advertisement (user managers only).
     *
     * @return self
     */
    public function setCanReject($can_reject)
    {
        if (is_null($can_reject)) {
            throw new \InvalidArgumentException('non-nullable can_reject cannot be null');
        }
        $this->container['can_reject'] = $can_reject;

        return $this;
    }

    /**
     * Gets can_set_as_favorite
     *
     * @return bool|null
     */
    public function getCanSetAsFavorite()
    {
        return $this->container['can_set_as_favorite'];
    }

    /**
     * Sets can_set_as_favorite
     *
     * @param bool|null $can_set_as_favorite Indicates if the authenticated user can set this ad as favorite
     *
     * @return self
     */
    public function setCanSetAsFavorite($can_set_as_favorite)
    {
        if (is_null($can_set_as_favorite)) {
            throw new \InvalidArgumentException('non-nullable can_set_as_favorite cannot be null');
        }
        $this->container['can_set_as_favorite'] = $can_set_as_favorite;

        return $this;
    }

    /**
     * Gets favorite
     *
     * @return bool|null
     */
    public function getFavorite()
    {
        return $this->container['favorite'];
    }

    /**
     * Sets favorite
     *
     * @param bool|null $favorite Indicates if the authenticated user set this ad as favorite
     *
     * @return self
     */
    public function setFavorite($favorite)
    {
        if (is_null($favorite)) {
            throw new \InvalidArgumentException('non-nullable favorite cannot be null');
        }
        $this->container['favorite'] = $favorite;

        return $this;
    }

    /**
     * Gets questions_enabled
     *
     * @return bool|null
     */
    public function getQuestionsEnabled()
    {
        return $this->container['questions_enabled'];
    }

    /**
     * Sets questions_enabled
     *
     * @param bool|null $questions_enabled Indicates if this ad is in favorites for the current user
     *
     * @return self
     */
    public function setQuestionsEnabled($questions_enabled)
    {
        if (is_null($questions_enabled)) {
            throw new \InvalidArgumentException('non-nullable questions_enabled cannot be null');
        }
        $this->container['questions_enabled'] = $questions_enabled;

        return $this;
    }

    /**
     * Gets last_authorization_comments
     *
     * @return string|null
     */
    public function getLastAuthorizationComments()
    {
        return $this->container['last_authorization_comments'];
    }

    /**
     * Sets last_authorization_comments
     *
     * @param string|null $last_authorization_comments The last comments set by a manager when rejecting or set as draft this advertisement. Only send if the advertisement requires authorization and the authenticated user can view the comments.
     *
     * @return self
     */
    public function setLastAuthorizationComments($last_authorization_comments)
    {
        if (is_null($last_authorization_comments)) {
            throw new \InvalidArgumentException('non-nullable last_authorization_comments cannot be null');
        }
        $this->container['last_authorization_comments'] = $last_authorization_comments;

        return $this;
    }

    /**
     * Gets additional_images
     *
     * @return \OpenAPI\Client\Model\Image[]|null
     */
    public function getAdditionalImages()
    {
        return $this->container['additional_images'];
    }

    /**
     * Sets additional_images
     *
     * @param \OpenAPI\Client\Model\Image[]|null $additional_images Holds the images other than the primary image, which is returned in the `image` field
     *
     * @return self
     */
    public function setAdditionalImages($additional_images)
    {
        if (is_null($additional_images)) {
            throw new \InvalidArgumentException('non-nullable additional_images cannot be null');
        }
        $this->container['additional_images'] = $additional_images;

        return $this;
    }

    /**
     * Gets user_addresses
     *
     * @return \OpenAPI\Client\Model\Address[]|null
     */
    public function getUserAddresses()
    {
        return $this->container['user_addresses'];
    }

    /**
     * Sets user_addresses
     *
     * @param \OpenAPI\Client\Model\Address[]|null $user_addresses The addresses (belonging to the advertisement's owner) where this  advertisement is available.
     *
     * @return self
     */
    public function setUserAddresses($user_addresses)
    {
        if (is_null($user_addresses)) {
            throw new \InvalidArgumentException('non-nullable user_addresses cannot be null');
        }
        $this->container['user_addresses'] = $user_addresses;

        return $this;
    }

    /**
     * Gets ad_addresses
     *
     * @return \OpenAPI\Client\Model\Address[]|null
     */
    public function getAdAddresses()
    {
        return $this->container['ad_addresses'];
    }

    /**
     * Sets ad_addresses
     *
     * @param \OpenAPI\Client\Model\Address[]|null $ad_addresses The custom addresses where this advertisement is available.
     *
     * @return self
     */
    public function setAdAddresses($ad_addresses)
    {
        if (is_null($ad_addresses)) {
            throw new \InvalidArgumentException('non-nullable ad_addresses cannot be null');
        }
        $this->container['ad_addresses'] = $ad_addresses;

        return $this;
    }

    /**
     * Gets questions
     *
     * @return \OpenAPI\Client\Model\AdQuestion[]|null
     */
    public function getQuestions()
    {
        return $this->container['questions'];
    }

    /**
     * Sets questions
     *
     * @param \OpenAPI\Client\Model\AdQuestion[]|null $questions The list of questions this advertisement has.
     *
     * @return self
     */
    public function setQuestions($questions)
    {
        if (is_null($questions)) {
            throw new \InvalidArgumentException('non-nullable questions cannot be null');
        }
        $this->container['questions'] = $questions;

        return $this;
    }

    /**
     * Gets allow_decimal
     *
     * @return bool|null
     */
    public function getAllowDecimal()
    {
        return $this->container['allow_decimal'];
    }

    /**
     * Sets allow_decimal
     *
     * @param bool|null $allow_decimal if true then this webshop ad can be ordered specifying the quantity as a decimal number.
     *
     * @return self
     */
    public function setAllowDecimal($allow_decimal)
    {
        if (is_null($allow_decimal)) {
            throw new \InvalidArgumentException('non-nullable allow_decimal cannot be null');
        }
        $this->container['allow_decimal'] = $allow_decimal;

        return $this;
    }

    /**
     * Gets delivery_methods
     *
     * @return \OpenAPI\Client\Model\DeliveryMethod[]|null
     */
    public function getDeliveryMethods()
    {
        return $this->container['delivery_methods'];
    }

    /**
     * Sets delivery_methods
     *
     * @param \OpenAPI\Client\Model\DeliveryMethod[]|null $delivery_methods The available delivery methods for this webshop ad.
     *
     * @return self
     */
    public function setDeliveryMethods($delivery_methods)
    {
        if (is_null($delivery_methods)) {
            throw new \InvalidArgumentException('non-nullable delivery_methods cannot be null');
        }
        $this->container['delivery_methods'] = $delivery_methods;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return \OpenAPI\Client\Model\Operation[]|null
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param \OpenAPI\Client\Model\Operation[]|null $operations List of runnable custom operations.
     *
     * @return self
     */
    public function setOperations($operations)
    {
        if (is_null($operations)) {
            throw new \InvalidArgumentException('non-nullable operations cannot be null');
        }
        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets hide_price
     *
     * @return bool|null
     */
    public function getHidePrice()
    {
        return $this->container['hide_price'];
    }

    /**
     * Sets hide_price
     *
     * @param bool|null $hide_price Indicates whether show or not this advertisement price to guests
     *
     * @return self
     */
    public function setHidePrice($hide_price)
    {
        if (is_null($hide_price)) {
            throw new \InvalidArgumentException('non-nullable hide_price cannot be null');
        }
        $this->container['hide_price'] = $hide_price;

        return $this;
    }

    /**
     * Gets hide_owner
     *
     * @return bool|null
     */
    public function getHideOwner()
    {
        return $this->container['hide_owner'];
    }

    /**
     * Sets hide_owner
     *
     * @param bool|null $hide_owner Indicates whether show or not this advertisement owner to guests
     *
     * @return self
     */
    public function setHideOwner($hide_owner)
    {
        if (is_null($hide_owner)) {
            throw new \InvalidArgumentException('non-nullable hide_owner cannot be null');
        }
        $this->container['hide_owner'] = $hide_owner;

        return $this;
    }

    /**
     * Gets export_formats
     *
     * @return \OpenAPI\Client\Model\ExportFormat[]|null
     */
    public function getExportFormats()
    {
        return $this->container['export_formats'];
    }

    /**
     * Sets export_formats
     *
     * @param \OpenAPI\Client\Model\ExportFormat[]|null $export_formats The formats which the advertisement can be exported
     *
     * @return self
     */
    public function setExportFormats($export_formats)
    {
        if (is_null($export_formats)) {
            throw new \InvalidArgumentException('non-nullable export_formats cannot be null');
        }
        $this->container['export_formats'] = $export_formats;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


