<?php
/**
 * RecordCustomFieldValue
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * RecordCustomFieldValue Class Doc Comment
 *
 * @category Class
 * @description Adds to &#x60;CustomFieldValue&#x60; the section where this field should be shown
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class RecordCustomFieldValue implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'RecordCustomFieldValue';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'string_value' => 'string',
        'date_value' => '\DateTime',
        'boolean_value' => 'bool',
        'integer_value' => 'int',
        'decimal_value' => 'float',
        'enumerated_values' => '\OpenAPI\Client\Model\CustomFieldPossibleValue[]',
        'dynamic_value' => '\OpenAPI\Client\Model\BaseCustomFieldValueAllOfDynamicValue',
        'dynamic_values' => '\OpenAPI\Client\Model\CustomFieldDynamicValue[]',
        'file_values' => '\OpenAPI\Client\Model\StoredFile[]',
        'image_values' => '\OpenAPI\Client\Model\Image[]',
        'ad_value' => '\OpenAPI\Client\Model\BaseCustomFieldValueAllOfAdValue',
        'transaction_value' => '\OpenAPI\Client\Model\BaseCustomFieldValueAllOfTransactionValue',
        'transfer_value' => '\OpenAPI\Client\Model\BaseCustomFieldValueAllOfTransferValue',
        'record_value' => '\OpenAPI\Client\Model\BaseCustomFieldValueAllOfRecordValue',
        'user_value' => '\OpenAPI\Client\Model\BaseCustomFieldValueAllOfUserValue',
        'field' => '\OpenAPI\Client\Model\RecordCustomFieldValueAllOfField'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'string_value' => null,
        'date_value' => 'date-time',
        'boolean_value' => null,
        'integer_value' => null,
        'decimal_value' => 'number',
        'enumerated_values' => null,
        'dynamic_value' => null,
        'dynamic_values' => null,
        'file_values' => null,
        'image_values' => null,
        'ad_value' => null,
        'transaction_value' => null,
        'transfer_value' => null,
        'record_value' => null,
        'user_value' => null,
        'field' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'string_value' => false,
        'date_value' => false,
        'boolean_value' => false,
        'integer_value' => false,
        'decimal_value' => false,
        'enumerated_values' => false,
        'dynamic_value' => false,
        'dynamic_values' => false,
        'file_values' => false,
        'image_values' => false,
        'ad_value' => false,
        'transaction_value' => false,
        'transfer_value' => false,
        'record_value' => false,
        'user_value' => false,
        'field' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'string_value' => 'stringValue',
        'date_value' => 'dateValue',
        'boolean_value' => 'booleanValue',
        'integer_value' => 'integerValue',
        'decimal_value' => 'decimalValue',
        'enumerated_values' => 'enumeratedValues',
        'dynamic_value' => 'dynamicValue',
        'dynamic_values' => 'dynamicValues',
        'file_values' => 'fileValues',
        'image_values' => 'imageValues',
        'ad_value' => 'adValue',
        'transaction_value' => 'transactionValue',
        'transfer_value' => 'transferValue',
        'record_value' => 'recordValue',
        'user_value' => 'userValue',
        'field' => 'field'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'string_value' => 'setStringValue',
        'date_value' => 'setDateValue',
        'boolean_value' => 'setBooleanValue',
        'integer_value' => 'setIntegerValue',
        'decimal_value' => 'setDecimalValue',
        'enumerated_values' => 'setEnumeratedValues',
        'dynamic_value' => 'setDynamicValue',
        'dynamic_values' => 'setDynamicValues',
        'file_values' => 'setFileValues',
        'image_values' => 'setImageValues',
        'ad_value' => 'setAdValue',
        'transaction_value' => 'setTransactionValue',
        'transfer_value' => 'setTransferValue',
        'record_value' => 'setRecordValue',
        'user_value' => 'setUserValue',
        'field' => 'setField'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'string_value' => 'getStringValue',
        'date_value' => 'getDateValue',
        'boolean_value' => 'getBooleanValue',
        'integer_value' => 'getIntegerValue',
        'decimal_value' => 'getDecimalValue',
        'enumerated_values' => 'getEnumeratedValues',
        'dynamic_value' => 'getDynamicValue',
        'dynamic_values' => 'getDynamicValues',
        'file_values' => 'getFileValues',
        'image_values' => 'getImageValues',
        'ad_value' => 'getAdValue',
        'transaction_value' => 'getTransactionValue',
        'transfer_value' => 'getTransferValue',
        'record_value' => 'getRecordValue',
        'user_value' => 'getUserValue',
        'field' => 'getField'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('string_value', $data ?? [], null);
        $this->setIfExists('date_value', $data ?? [], null);
        $this->setIfExists('boolean_value', $data ?? [], null);
        $this->setIfExists('integer_value', $data ?? [], null);
        $this->setIfExists('decimal_value', $data ?? [], null);
        $this->setIfExists('enumerated_values', $data ?? [], null);
        $this->setIfExists('dynamic_value', $data ?? [], null);
        $this->setIfExists('dynamic_values', $data ?? [], null);
        $this->setIfExists('file_values', $data ?? [], null);
        $this->setIfExists('image_values', $data ?? [], null);
        $this->setIfExists('ad_value', $data ?? [], null);
        $this->setIfExists('transaction_value', $data ?? [], null);
        $this->setIfExists('transfer_value', $data ?? [], null);
        $this->setIfExists('record_value', $data ?? [], null);
        $this->setIfExists('user_value', $data ?? [], null);
        $this->setIfExists('field', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The internal entity identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets string_value
     *
     * @return string|null
     */
    public function getStringValue()
    {
        return $this->container['string_value'];
    }

    /**
     * Sets string_value
     *
     * @param string|null $string_value The field value if the field type is either `string`, `text`, `richText` or `url`.
     *
     * @return self
     */
    public function setStringValue($string_value)
    {
        if (is_null($string_value)) {
            throw new \InvalidArgumentException('non-nullable string_value cannot be null');
        }
        $this->container['string_value'] = $string_value;

        return $this;
    }

    /**
     * Gets date_value
     *
     * @return \DateTime|null
     */
    public function getDateValue()
    {
        return $this->container['date_value'];
    }

    /**
     * Sets date_value
     *
     * @param \DateTime|null $date_value The field value if the field type is `date`.
     *
     * @return self
     */
    public function setDateValue($date_value)
    {
        if (is_null($date_value)) {
            throw new \InvalidArgumentException('non-nullable date_value cannot be null');
        }
        $this->container['date_value'] = $date_value;

        return $this;
    }

    /**
     * Gets boolean_value
     *
     * @return bool|null
     */
    public function getBooleanValue()
    {
        return $this->container['boolean_value'];
    }

    /**
     * Sets boolean_value
     *
     * @param bool|null $boolean_value The field value if the field type is `boolean`.
     *
     * @return self
     */
    public function setBooleanValue($boolean_value)
    {
        if (is_null($boolean_value)) {
            throw new \InvalidArgumentException('non-nullable boolean_value cannot be null');
        }
        $this->container['boolean_value'] = $boolean_value;

        return $this;
    }

    /**
     * Gets integer_value
     *
     * @return int|null
     */
    public function getIntegerValue()
    {
        return $this->container['integer_value'];
    }

    /**
     * Sets integer_value
     *
     * @param int|null $integer_value The field value if the field type is `integer`.
     *
     * @return self
     */
    public function setIntegerValue($integer_value)
    {
        if (is_null($integer_value)) {
            throw new \InvalidArgumentException('non-nullable integer_value cannot be null');
        }
        $this->container['integer_value'] = $integer_value;

        return $this;
    }

    /**
     * Gets decimal_value
     *
     * @return float|null
     */
    public function getDecimalValue()
    {
        return $this->container['decimal_value'];
    }

    /**
     * Sets decimal_value
     *
     * @param float|null $decimal_value The field value if the field type is `decimal`.
     *
     * @return self
     */
    public function setDecimalValue($decimal_value)
    {
        if (is_null($decimal_value)) {
            throw new \InvalidArgumentException('non-nullable decimal_value cannot be null');
        }
        $this->container['decimal_value'] = $decimal_value;

        return $this;
    }

    /**
     * Gets enumerated_values
     *
     * @return \OpenAPI\Client\Model\CustomFieldPossibleValue[]|null
     */
    public function getEnumeratedValues()
    {
        return $this->container['enumerated_values'];
    }

    /**
     * Sets enumerated_values
     *
     * @param \OpenAPI\Client\Model\CustomFieldPossibleValue[]|null $enumerated_values The field value if the field type is either `singleSelection` or `multiSelection`. For single selection will either be an empty array or an array with a single element.
     *
     * @return self
     */
    public function setEnumeratedValues($enumerated_values)
    {
        if (is_null($enumerated_values)) {
            throw new \InvalidArgumentException('non-nullable enumerated_values cannot be null');
        }
        $this->container['enumerated_values'] = $enumerated_values;

        return $this;
    }

    /**
     * Gets dynamic_value
     *
     * @return \OpenAPI\Client\Model\BaseCustomFieldValueAllOfDynamicValue|null
     * @deprecated
     */
    public function getDynamicValue()
    {
        return $this->container['dynamic_value'];
    }

    /**
     * Sets dynamic_value
     *
     * @param \OpenAPI\Client\Model\BaseCustomFieldValueAllOfDynamicValue|null $dynamic_value dynamic_value
     *
     * @return self
     * @deprecated
     */
    public function setDynamicValue($dynamic_value)
    {
        if (is_null($dynamic_value)) {
            throw new \InvalidArgumentException('non-nullable dynamic_value cannot be null');
        }
        $this->container['dynamic_value'] = $dynamic_value;

        return $this;
    }

    /**
     * Gets dynamic_values
     *
     * @return \OpenAPI\Client\Model\CustomFieldDynamicValue[]|null
     */
    public function getDynamicValues()
    {
        return $this->container['dynamic_values'];
    }

    /**
     * Sets dynamic_values
     *
     * @param \OpenAPI\Client\Model\CustomFieldDynamicValue[]|null $dynamic_values The field value if the field type is either `dynamicSelection` or `dynamicMultiSelection`. For single selection, will either be an empty array or an array with a single element.
     *
     * @return self
     */
    public function setDynamicValues($dynamic_values)
    {
        if (is_null($dynamic_values)) {
            throw new \InvalidArgumentException('non-nullable dynamic_values cannot be null');
        }
        $this->container['dynamic_values'] = $dynamic_values;

        return $this;
    }

    /**
     * Gets file_values
     *
     * @return \OpenAPI\Client\Model\StoredFile[]|null
     */
    public function getFileValues()
    {
        return $this->container['file_values'];
    }

    /**
     * Sets file_values
     *
     * @param \OpenAPI\Client\Model\StoredFile[]|null $file_values The field value if the field type is `file`
     *
     * @return self
     */
    public function setFileValues($file_values)
    {
        if (is_null($file_values)) {
            throw new \InvalidArgumentException('non-nullable file_values cannot be null');
        }
        $this->container['file_values'] = $file_values;

        return $this;
    }

    /**
     * Gets image_values
     *
     * @return \OpenAPI\Client\Model\Image[]|null
     */
    public function getImageValues()
    {
        return $this->container['image_values'];
    }

    /**
     * Sets image_values
     *
     * @param \OpenAPI\Client\Model\Image[]|null $image_values The field value if the field type is `image`
     *
     * @return self
     */
    public function setImageValues($image_values)
    {
        if (is_null($image_values)) {
            throw new \InvalidArgumentException('non-nullable image_values cannot be null');
        }
        $this->container['image_values'] = $image_values;

        return $this;
    }

    /**
     * Gets ad_value
     *
     * @return \OpenAPI\Client\Model\BaseCustomFieldValueAllOfAdValue|null
     */
    public function getAdValue()
    {
        return $this->container['ad_value'];
    }

    /**
     * Sets ad_value
     *
     * @param \OpenAPI\Client\Model\BaseCustomFieldValueAllOfAdValue|null $ad_value ad_value
     *
     * @return self
     */
    public function setAdValue($ad_value)
    {
        if (is_null($ad_value)) {
            throw new \InvalidArgumentException('non-nullable ad_value cannot be null');
        }
        $this->container['ad_value'] = $ad_value;

        return $this;
    }

    /**
     * Gets transaction_value
     *
     * @return \OpenAPI\Client\Model\BaseCustomFieldValueAllOfTransactionValue|null
     */
    public function getTransactionValue()
    {
        return $this->container['transaction_value'];
    }

    /**
     * Sets transaction_value
     *
     * @param \OpenAPI\Client\Model\BaseCustomFieldValueAllOfTransactionValue|null $transaction_value transaction_value
     *
     * @return self
     */
    public function setTransactionValue($transaction_value)
    {
        if (is_null($transaction_value)) {
            throw new \InvalidArgumentException('non-nullable transaction_value cannot be null');
        }
        $this->container['transaction_value'] = $transaction_value;

        return $this;
    }

    /**
     * Gets transfer_value
     *
     * @return \OpenAPI\Client\Model\BaseCustomFieldValueAllOfTransferValue|null
     */
    public function getTransferValue()
    {
        return $this->container['transfer_value'];
    }

    /**
     * Sets transfer_value
     *
     * @param \OpenAPI\Client\Model\BaseCustomFieldValueAllOfTransferValue|null $transfer_value transfer_value
     *
     * @return self
     */
    public function setTransferValue($transfer_value)
    {
        if (is_null($transfer_value)) {
            throw new \InvalidArgumentException('non-nullable transfer_value cannot be null');
        }
        $this->container['transfer_value'] = $transfer_value;

        return $this;
    }

    /**
     * Gets record_value
     *
     * @return \OpenAPI\Client\Model\BaseCustomFieldValueAllOfRecordValue|null
     */
    public function getRecordValue()
    {
        return $this->container['record_value'];
    }

    /**
     * Sets record_value
     *
     * @param \OpenAPI\Client\Model\BaseCustomFieldValueAllOfRecordValue|null $record_value record_value
     *
     * @return self
     */
    public function setRecordValue($record_value)
    {
        if (is_null($record_value)) {
            throw new \InvalidArgumentException('non-nullable record_value cannot be null');
        }
        $this->container['record_value'] = $record_value;

        return $this;
    }

    /**
     * Gets user_value
     *
     * @return \OpenAPI\Client\Model\BaseCustomFieldValueAllOfUserValue|null
     */
    public function getUserValue()
    {
        return $this->container['user_value'];
    }

    /**
     * Sets user_value
     *
     * @param \OpenAPI\Client\Model\BaseCustomFieldValueAllOfUserValue|null $user_value user_value
     *
     * @return self
     */
    public function setUserValue($user_value)
    {
        if (is_null($user_value)) {
            throw new \InvalidArgumentException('non-nullable user_value cannot be null');
        }
        $this->container['user_value'] = $user_value;

        return $this;
    }

    /**
     * Gets field
     *
     * @return \OpenAPI\Client\Model\RecordCustomFieldValueAllOfField|null
     */
    public function getField()
    {
        return $this->container['field'];
    }

    /**
     * Sets field
     *
     * @param \OpenAPI\Client\Model\RecordCustomFieldValueAllOfField|null $field field
     *
     * @return self
     */
    public function setField($field)
    {
        if (is_null($field)) {
            throw new \InvalidArgumentException('non-nullable field cannot be null');
        }
        $this->container['field'] = $field;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


