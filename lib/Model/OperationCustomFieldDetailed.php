<?php
/**
 * OperationCustomFieldDetailed
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OperationCustomFieldDetailed Class Doc Comment
 *
 * @category Class
 * @description Adds to &#x60;CustomFieldDetailed&#x60; some operation-specific definitions
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OperationCustomFieldDetailed implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OperationCustomFieldDetailed';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'internal_name' => 'string',
        'decimal_digits' => 'int',
        'type' => '\OpenAPI\Client\Model\CustomFieldTypeEnum',
        'linked_entity_type' => '\OpenAPI\Client\Model\LinkedEntityTypeEnum',
        'control' => '\OpenAPI\Client\Model\CustomFieldControlEnum',
        'kind' => '\OpenAPI\Client\Model\CustomFieldKind',
        'information_text' => 'string',
        'pattern' => 'string',
        'required' => 'bool',
        'size' => '\OpenAPI\Client\Model\CustomFieldDetailedAllOfSize',
        'all_selected_label' => 'string',
        'default_value' => 'string',
        'possible_value_categories' => '\OpenAPI\Client\Model\EntityReference[]',
        'has_values_list' => 'bool',
        'possible_values' => '\OpenAPI\Client\Model\CustomFieldPossibleValue[]',
        'dynamic_values' => '\OpenAPI\Client\Model\CustomFieldDynamicValue[]',
        'string_values' => 'string[]',
        'date_values' => '\DateTime[]',
        'integer_values' => 'int[]',
        'decimal_values' => 'float[]',
        'ad_values' => '\OpenAPI\Client\Model\Ad[]',
        'transaction_values' => '\OpenAPI\Client\Model\Transaction[]',
        'transfer_values' => '\OpenAPI\Client\Model\Transfer[]',
        'record_values' => '\OpenAPI\Client\Model\Record[]',
        'user_values' => '\OpenAPI\Client\Model\User[]',
        'max_files' => 'int',
        'mime_types' => 'string[]',
        'show_qr_code_scan' => 'bool',
        'automatically_process_after_scan' => 'bool',
        'readonly' => 'bool',
        'section' => '\OpenAPI\Client\Model\OperationCustomFieldDetailedAllOfSection'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'internal_name' => null,
        'decimal_digits' => null,
        'type' => null,
        'linked_entity_type' => null,
        'control' => null,
        'kind' => null,
        'information_text' => null,
        'pattern' => null,
        'required' => null,
        'size' => null,
        'all_selected_label' => null,
        'default_value' => null,
        'possible_value_categories' => null,
        'has_values_list' => null,
        'possible_values' => null,
        'dynamic_values' => null,
        'string_values' => null,
        'date_values' => 'date-time',
        'integer_values' => null,
        'decimal_values' => 'number',
        'ad_values' => null,
        'transaction_values' => null,
        'transfer_values' => null,
        'record_values' => null,
        'user_values' => null,
        'max_files' => null,
        'mime_types' => null,
        'show_qr_code_scan' => null,
        'automatically_process_after_scan' => null,
        'readonly' => null,
        'section' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'internal_name' => false,
        'decimal_digits' => false,
        'type' => false,
        'linked_entity_type' => false,
        'control' => false,
        'kind' => false,
        'information_text' => false,
        'pattern' => false,
        'required' => false,
        'size' => false,
        'all_selected_label' => false,
        'default_value' => false,
        'possible_value_categories' => false,
        'has_values_list' => false,
        'possible_values' => false,
        'dynamic_values' => false,
        'string_values' => false,
        'date_values' => false,
        'integer_values' => false,
        'decimal_values' => false,
        'ad_values' => false,
        'transaction_values' => false,
        'transfer_values' => false,
        'record_values' => false,
        'user_values' => false,
        'max_files' => false,
        'mime_types' => false,
        'show_qr_code_scan' => false,
        'automatically_process_after_scan' => false,
        'readonly' => false,
        'section' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'internal_name' => 'internalName',
        'decimal_digits' => 'decimalDigits',
        'type' => 'type',
        'linked_entity_type' => 'linkedEntityType',
        'control' => 'control',
        'kind' => 'kind',
        'information_text' => 'informationText',
        'pattern' => 'pattern',
        'required' => 'required',
        'size' => 'size',
        'all_selected_label' => 'allSelectedLabel',
        'default_value' => 'defaultValue',
        'possible_value_categories' => 'possibleValueCategories',
        'has_values_list' => 'hasValuesList',
        'possible_values' => 'possibleValues',
        'dynamic_values' => 'dynamicValues',
        'string_values' => 'stringValues',
        'date_values' => 'dateValues',
        'integer_values' => 'integerValues',
        'decimal_values' => 'decimalValues',
        'ad_values' => 'adValues',
        'transaction_values' => 'transactionValues',
        'transfer_values' => 'transferValues',
        'record_values' => 'recordValues',
        'user_values' => 'userValues',
        'max_files' => 'maxFiles',
        'mime_types' => 'mimeTypes',
        'show_qr_code_scan' => 'showQrCodeScan',
        'automatically_process_after_scan' => 'automaticallyProcessAfterScan',
        'readonly' => 'readonly',
        'section' => 'section'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'internal_name' => 'setInternalName',
        'decimal_digits' => 'setDecimalDigits',
        'type' => 'setType',
        'linked_entity_type' => 'setLinkedEntityType',
        'control' => 'setControl',
        'kind' => 'setKind',
        'information_text' => 'setInformationText',
        'pattern' => 'setPattern',
        'required' => 'setRequired',
        'size' => 'setSize',
        'all_selected_label' => 'setAllSelectedLabel',
        'default_value' => 'setDefaultValue',
        'possible_value_categories' => 'setPossibleValueCategories',
        'has_values_list' => 'setHasValuesList',
        'possible_values' => 'setPossibleValues',
        'dynamic_values' => 'setDynamicValues',
        'string_values' => 'setStringValues',
        'date_values' => 'setDateValues',
        'integer_values' => 'setIntegerValues',
        'decimal_values' => 'setDecimalValues',
        'ad_values' => 'setAdValues',
        'transaction_values' => 'setTransactionValues',
        'transfer_values' => 'setTransferValues',
        'record_values' => 'setRecordValues',
        'user_values' => 'setUserValues',
        'max_files' => 'setMaxFiles',
        'mime_types' => 'setMimeTypes',
        'show_qr_code_scan' => 'setShowQrCodeScan',
        'automatically_process_after_scan' => 'setAutomaticallyProcessAfterScan',
        'readonly' => 'setReadonly',
        'section' => 'setSection'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'internal_name' => 'getInternalName',
        'decimal_digits' => 'getDecimalDigits',
        'type' => 'getType',
        'linked_entity_type' => 'getLinkedEntityType',
        'control' => 'getControl',
        'kind' => 'getKind',
        'information_text' => 'getInformationText',
        'pattern' => 'getPattern',
        'required' => 'getRequired',
        'size' => 'getSize',
        'all_selected_label' => 'getAllSelectedLabel',
        'default_value' => 'getDefaultValue',
        'possible_value_categories' => 'getPossibleValueCategories',
        'has_values_list' => 'getHasValuesList',
        'possible_values' => 'getPossibleValues',
        'dynamic_values' => 'getDynamicValues',
        'string_values' => 'getStringValues',
        'date_values' => 'getDateValues',
        'integer_values' => 'getIntegerValues',
        'decimal_values' => 'getDecimalValues',
        'ad_values' => 'getAdValues',
        'transaction_values' => 'getTransactionValues',
        'transfer_values' => 'getTransferValues',
        'record_values' => 'getRecordValues',
        'user_values' => 'getUserValues',
        'max_files' => 'getMaxFiles',
        'mime_types' => 'getMimeTypes',
        'show_qr_code_scan' => 'getShowQrCodeScan',
        'automatically_process_after_scan' => 'getAutomaticallyProcessAfterScan',
        'readonly' => 'getReadonly',
        'section' => 'getSection'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('internal_name', $data ?? [], null);
        $this->setIfExists('decimal_digits', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('linked_entity_type', $data ?? [], null);
        $this->setIfExists('control', $data ?? [], null);
        $this->setIfExists('kind', $data ?? [], null);
        $this->setIfExists('information_text', $data ?? [], null);
        $this->setIfExists('pattern', $data ?? [], null);
        $this->setIfExists('required', $data ?? [], null);
        $this->setIfExists('size', $data ?? [], null);
        $this->setIfExists('all_selected_label', $data ?? [], null);
        $this->setIfExists('default_value', $data ?? [], null);
        $this->setIfExists('possible_value_categories', $data ?? [], null);
        $this->setIfExists('has_values_list', $data ?? [], null);
        $this->setIfExists('possible_values', $data ?? [], null);
        $this->setIfExists('dynamic_values', $data ?? [], null);
        $this->setIfExists('string_values', $data ?? [], null);
        $this->setIfExists('date_values', $data ?? [], null);
        $this->setIfExists('integer_values', $data ?? [], null);
        $this->setIfExists('decimal_values', $data ?? [], null);
        $this->setIfExists('ad_values', $data ?? [], null);
        $this->setIfExists('transaction_values', $data ?? [], null);
        $this->setIfExists('transfer_values', $data ?? [], null);
        $this->setIfExists('record_values', $data ?? [], null);
        $this->setIfExists('user_values', $data ?? [], null);
        $this->setIfExists('max_files', $data ?? [], null);
        $this->setIfExists('mime_types', $data ?? [], null);
        $this->setIfExists('show_qr_code_scan', $data ?? [], null);
        $this->setIfExists('automatically_process_after_scan', $data ?? [], null);
        $this->setIfExists('readonly', $data ?? [], null);
        $this->setIfExists('section', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The internal entity identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The entity name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets internal_name
     *
     * @return string|null
     */
    public function getInternalName()
    {
        return $this->container['internal_name'];
    }

    /**
     * Sets internal_name
     *
     * @param string|null $internal_name The entity internal name, which can be seen as an extra identifier
     *
     * @return self
     */
    public function setInternalName($internal_name)
    {
        if (is_null($internal_name)) {
            throw new \InvalidArgumentException('non-nullable internal_name cannot be null');
        }
        $this->container['internal_name'] = $internal_name;

        return $this;
    }

    /**
     * Gets decimal_digits
     *
     * @return int|null
     */
    public function getDecimalDigits()
    {
        return $this->container['decimal_digits'];
    }

    /**
     * Sets decimal_digits
     *
     * @param int|null $decimal_digits The number of decimal digits. Only available if `type` is `decimal`.
     *
     * @return self
     */
    public function setDecimalDigits($decimal_digits)
    {
        if (is_null($decimal_digits)) {
            throw new \InvalidArgumentException('non-nullable decimal_digits cannot be null');
        }
        $this->container['decimal_digits'] = $decimal_digits;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\CustomFieldTypeEnum|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\CustomFieldTypeEnum|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets linked_entity_type
     *
     * @return \OpenAPI\Client\Model\LinkedEntityTypeEnum|null
     */
    public function getLinkedEntityType()
    {
        return $this->container['linked_entity_type'];
    }

    /**
     * Sets linked_entity_type
     *
     * @param \OpenAPI\Client\Model\LinkedEntityTypeEnum|null $linked_entity_type linked_entity_type
     *
     * @return self
     */
    public function setLinkedEntityType($linked_entity_type)
    {
        if (is_null($linked_entity_type)) {
            throw new \InvalidArgumentException('non-nullable linked_entity_type cannot be null');
        }
        $this->container['linked_entity_type'] = $linked_entity_type;

        return $this;
    }

    /**
     * Gets control
     *
     * @return \OpenAPI\Client\Model\CustomFieldControlEnum|null
     */
    public function getControl()
    {
        return $this->container['control'];
    }

    /**
     * Sets control
     *
     * @param \OpenAPI\Client\Model\CustomFieldControlEnum|null $control control
     *
     * @return self
     */
    public function setControl($control)
    {
        if (is_null($control)) {
            throw new \InvalidArgumentException('non-nullable control cannot be null');
        }
        $this->container['control'] = $control;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return \OpenAPI\Client\Model\CustomFieldKind|null
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param \OpenAPI\Client\Model\CustomFieldKind|null $kind kind
     *
     * @return self
     */
    public function setKind($kind)
    {
        if (is_null($kind)) {
            throw new \InvalidArgumentException('non-nullable kind cannot be null');
        }
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets information_text
     *
     * @return string|null
     */
    public function getInformationText()
    {
        return $this->container['information_text'];
    }

    /**
     * Sets information_text
     *
     * @param string|null $information_text Additional text that can be shown to the user as a hint of this field
     *
     * @return self
     */
    public function setInformationText($information_text)
    {
        if (is_null($information_text)) {
            throw new \InvalidArgumentException('non-nullable information_text cannot be null');
        }
        $this->container['information_text'] = $information_text;

        return $this;
    }

    /**
     * Gets pattern
     *
     * @return string|null
     */
    public function getPattern()
    {
        return $this->container['pattern'];
    }

    /**
     * Sets pattern
     *
     * @param string|null $pattern The (optional) mask to be applied to string values
     *
     * @return self
     */
    public function setPattern($pattern)
    {
        if (is_null($pattern)) {
            throw new \InvalidArgumentException('non-nullable pattern cannot be null');
        }
        $this->container['pattern'] = $pattern;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required Indicates whether this field is required
     *
     * @return self
     */
    public function setRequired($required)
    {
        if (is_null($required)) {
            throw new \InvalidArgumentException('non-nullable required cannot be null');
        }
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets size
     *
     * @return \OpenAPI\Client\Model\CustomFieldDetailedAllOfSize|null
     */
    public function getSize()
    {
        return $this->container['size'];
    }

    /**
     * Sets size
     *
     * @param \OpenAPI\Client\Model\CustomFieldDetailedAllOfSize|null $size size
     *
     * @return self
     */
    public function setSize($size)
    {
        if (is_null($size)) {
            throw new \InvalidArgumentException('non-nullable size cannot be null');
        }
        $this->container['size'] = $size;

        return $this;
    }

    /**
     * Gets all_selected_label
     *
     * @return string|null
     */
    public function getAllSelectedLabel()
    {
        return $this->container['all_selected_label'];
    }

    /**
     * Sets all_selected_label
     *
     * @param string|null $all_selected_label The label to be shown when all values are selected for a multi selection field.
     *
     * @return self
     */
    public function setAllSelectedLabel($all_selected_label)
    {
        if (is_null($all_selected_label)) {
            throw new \InvalidArgumentException('non-nullable all_selected_label cannot be null');
        }
        $this->container['all_selected_label'] = $all_selected_label;

        return $this;
    }

    /**
     * Gets default_value
     *
     * @return string|null
     */
    public function getDefaultValue()
    {
        return $this->container['default_value'];
    }

    /**
     * Sets default_value
     *
     * @param string|null $default_value The value that should be suggested as default. For multi selection will be a comma-separated string with possible values ids or internal names.
     *
     * @return self
     */
    public function setDefaultValue($default_value)
    {
        if (is_null($default_value)) {
            throw new \InvalidArgumentException('non-nullable default_value cannot be null');
        }
        $this->container['default_value'] = $default_value;

        return $this;
    }

    /**
     * Gets possible_value_categories
     *
     * @return \OpenAPI\Client\Model\EntityReference[]|null
     */
    public function getPossibleValueCategories()
    {
        return $this->container['possible_value_categories'];
    }

    /**
     * Sets possible_value_categories
     *
     * @param \OpenAPI\Client\Model\EntityReference[]|null $possible_value_categories Only applicable when the custom field is enumerated (single or multi select). Contains the possible value categories.
     *
     * @return self
     */
    public function setPossibleValueCategories($possible_value_categories)
    {
        if (is_null($possible_value_categories)) {
            throw new \InvalidArgumentException('non-nullable possible_value_categories cannot be null');
        }
        $this->container['possible_value_categories'] = $possible_value_categories;

        return $this;
    }

    /**
     * Gets has_values_list
     *
     * @return bool|null
     */
    public function getHasValuesList()
    {
        return $this->container['has_values_list'];
    }

    /**
     * Sets has_values_list
     *
     * @param bool|null $has_values_list Returns whether this custom field has a list of possible values, according to its type.
     *
     * @return self
     */
    public function setHasValuesList($has_values_list)
    {
        if (is_null($has_values_list)) {
            throw new \InvalidArgumentException('non-nullable has_values_list cannot be null');
        }
        $this->container['has_values_list'] = $has_values_list;

        return $this;
    }

    /**
     * Gets possible_values
     *
     * @return \OpenAPI\Client\Model\CustomFieldPossibleValue[]|null
     */
    public function getPossibleValues()
    {
        return $this->container['possible_values'];
    }

    /**
     * Sets possible_values
     *
     * @param \OpenAPI\Client\Model\CustomFieldPossibleValue[]|null $possible_values Only applicable when the custom field is enumerated (single or multi selection). Contains the possible values for selection. Each value may or may not have a category. When they have, it will be a string pointing to the internal name (if available) or id of the possible value category, which can be looked up in the categories property.
     *
     * @return self
     */
    public function setPossibleValues($possible_values)
    {
        if (is_null($possible_values)) {
            throw new \InvalidArgumentException('non-nullable possible_values cannot be null');
        }
        $this->container['possible_values'] = $possible_values;

        return $this;
    }

    /**
     * Gets dynamic_values
     *
     * @return \OpenAPI\Client\Model\CustomFieldDynamicValue[]|null
     */
    public function getDynamicValues()
    {
        return $this->container['dynamic_values'];
    }

    /**
     * Sets dynamic_values
     *
     * @param \OpenAPI\Client\Model\CustomFieldDynamicValue[]|null $dynamic_values Only applicable when the custom field is dynamic selection. Contains the script-generated possible values.
     *
     * @return self
     */
    public function setDynamicValues($dynamic_values)
    {
        if (is_null($dynamic_values)) {
            throw new \InvalidArgumentException('non-nullable dynamic_values cannot be null');
        }
        $this->container['dynamic_values'] = $dynamic_values;

        return $this;
    }

    /**
     * Gets string_values
     *
     * @return string[]|null
     */
    public function getStringValues()
    {
        return $this->container['string_values'];
    }

    /**
     * Sets string_values
     *
     * @param string[]|null $string_values Only applicable when the custom field type is `string` and `hasValuesList` is `true`. Contains the possible string values.
     *
     * @return self
     */
    public function setStringValues($string_values)
    {
        if (is_null($string_values)) {
            throw new \InvalidArgumentException('non-nullable string_values cannot be null');
        }
        $this->container['string_values'] = $string_values;

        return $this;
    }

    /**
     * Gets date_values
     *
     * @return \DateTime[]|null
     */
    public function getDateValues()
    {
        return $this->container['date_values'];
    }

    /**
     * Sets date_values
     *
     * @param \DateTime[]|null $date_values Only applicable when the custom field type is `date` and `hasValuesList` is `true`. Contains the possible date values.
     *
     * @return self
     */
    public function setDateValues($date_values)
    {
        if (is_null($date_values)) {
            throw new \InvalidArgumentException('non-nullable date_values cannot be null');
        }
        $this->container['date_values'] = $date_values;

        return $this;
    }

    /**
     * Gets integer_values
     *
     * @return int[]|null
     */
    public function getIntegerValues()
    {
        return $this->container['integer_values'];
    }

    /**
     * Sets integer_values
     *
     * @param int[]|null $integer_values Only applicable when the custom field type is `integer` and `hasValuesList` is `true`. Contains the possible integer values.
     *
     * @return self
     */
    public function setIntegerValues($integer_values)
    {
        if (is_null($integer_values)) {
            throw new \InvalidArgumentException('non-nullable integer_values cannot be null');
        }
        $this->container['integer_values'] = $integer_values;

        return $this;
    }

    /**
     * Gets decimal_values
     *
     * @return float[]|null
     */
    public function getDecimalValues()
    {
        return $this->container['decimal_values'];
    }

    /**
     * Sets decimal_values
     *
     * @param float[]|null $decimal_values Only applicable when the custom field type is `decimal` and `hasValuesList` is `true`. Contains the possible decimal values.
     *
     * @return self
     */
    public function setDecimalValues($decimal_values)
    {
        if (is_null($decimal_values)) {
            throw new \InvalidArgumentException('non-nullable decimal_values cannot be null');
        }
        $this->container['decimal_values'] = $decimal_values;

        return $this;
    }

    /**
     * Gets ad_values
     *
     * @return \OpenAPI\Client\Model\Ad[]|null
     */
    public function getAdValues()
    {
        return $this->container['ad_values'];
    }

    /**
     * Sets ad_values
     *
     * @param \OpenAPI\Client\Model\Ad[]|null $ad_values Only applicable when the custom field is linked entity of type `advertisement` and `hasValuesList` is `true`. Contains the possible advertisements.
     *
     * @return self
     */
    public function setAdValues($ad_values)
    {
        if (is_null($ad_values)) {
            throw new \InvalidArgumentException('non-nullable ad_values cannot be null');
        }
        $this->container['ad_values'] = $ad_values;

        return $this;
    }

    /**
     * Gets transaction_values
     *
     * @return \OpenAPI\Client\Model\Transaction[]|null
     */
    public function getTransactionValues()
    {
        return $this->container['transaction_values'];
    }

    /**
     * Sets transaction_values
     *
     * @param \OpenAPI\Client\Model\Transaction[]|null $transaction_values Only applicable when the custom field is linked entity of type `transaction` and `hasValuesList` is `true`. Contains the possible transactions.
     *
     * @return self
     */
    public function setTransactionValues($transaction_values)
    {
        if (is_null($transaction_values)) {
            throw new \InvalidArgumentException('non-nullable transaction_values cannot be null');
        }
        $this->container['transaction_values'] = $transaction_values;

        return $this;
    }

    /**
     * Gets transfer_values
     *
     * @return \OpenAPI\Client\Model\Transfer[]|null
     */
    public function getTransferValues()
    {
        return $this->container['transfer_values'];
    }

    /**
     * Sets transfer_values
     *
     * @param \OpenAPI\Client\Model\Transfer[]|null $transfer_values Only applicable when the custom field is linked entity of type `transfer` and `hasValuesList` is `true`. Contains the possible transfers.
     *
     * @return self
     */
    public function setTransferValues($transfer_values)
    {
        if (is_null($transfer_values)) {
            throw new \InvalidArgumentException('non-nullable transfer_values cannot be null');
        }
        $this->container['transfer_values'] = $transfer_values;

        return $this;
    }

    /**
     * Gets record_values
     *
     * @return \OpenAPI\Client\Model\Record[]|null
     */
    public function getRecordValues()
    {
        return $this->container['record_values'];
    }

    /**
     * Sets record_values
     *
     * @param \OpenAPI\Client\Model\Record[]|null $record_values Only applicable when the custom field is linked entity of type `record` and `hasValuesList` is `true`. Contains the possible records.
     *
     * @return self
     */
    public function setRecordValues($record_values)
    {
        if (is_null($record_values)) {
            throw new \InvalidArgumentException('non-nullable record_values cannot be null');
        }
        $this->container['record_values'] = $record_values;

        return $this;
    }

    /**
     * Gets user_values
     *
     * @return \OpenAPI\Client\Model\User[]|null
     */
    public function getUserValues()
    {
        return $this->container['user_values'];
    }

    /**
     * Sets user_values
     *
     * @param \OpenAPI\Client\Model\User[]|null $user_values Only applicable when the custom field is linked entity of type `user` and `hasValuesList` is `true`. Contains the possible users.
     *
     * @return self
     */
    public function setUserValues($user_values)
    {
        if (is_null($user_values)) {
            throw new \InvalidArgumentException('non-nullable user_values cannot be null');
        }
        $this->container['user_values'] = $user_values;

        return $this;
    }

    /**
     * Gets max_files
     *
     * @return int|null
     */
    public function getMaxFiles()
    {
        return $this->container['max_files'];
    }

    /**
     * Sets max_files
     *
     * @param int|null $max_files Only applicable when the custom field type is `file` or `image`. The maximun files that can be uploaded.
     *
     * @return self
     */
    public function setMaxFiles($max_files)
    {
        if (is_null($max_files)) {
            throw new \InvalidArgumentException('non-nullable max_files cannot be null');
        }
        $this->container['max_files'] = $max_files;

        return $this;
    }

    /**
     * Gets mime_types
     *
     * @return string[]|null
     */
    public function getMimeTypes()
    {
        return $this->container['mime_types'];
    }

    /**
     * Sets mime_types
     *
     * @param string[]|null $mime_types The allowed mime types for binary custom fields. Only applicable when the custom field type is either `file` or `image`.
     *
     * @return self
     */
    public function setMimeTypes($mime_types)
    {
        if (is_null($mime_types)) {
            throw new \InvalidArgumentException('non-nullable mime_types cannot be null');
        }
        $this->container['mime_types'] = $mime_types;

        return $this;
    }

    /**
     * Gets show_qr_code_scan
     *
     * @return bool|null
     */
    public function getShowQrCodeScan()
    {
        return $this->container['show_qr_code_scan'];
    }

    /**
     * Sets show_qr_code_scan
     *
     * @param bool|null $show_qr_code_scan Only applicable when the custom field type is `string`. Indicates whether this field should support QR-code scan.
     *
     * @return self
     */
    public function setShowQrCodeScan($show_qr_code_scan)
    {
        if (is_null($show_qr_code_scan)) {
            throw new \InvalidArgumentException('non-nullable show_qr_code_scan cannot be null');
        }
        $this->container['show_qr_code_scan'] = $show_qr_code_scan;

        return $this;
    }

    /**
     * Gets automatically_process_after_scan
     *
     * @return bool|null
     */
    public function getAutomaticallyProcessAfterScan()
    {
        return $this->container['automatically_process_after_scan'];
    }

    /**
     * Sets automatically_process_after_scan
     *
     * @param bool|null $automatically_process_after_scan Only applicable when the custom field type is `string` and the `allowQRCodeScan` is true. Indicates whether the form where is used this field should submit automatically after a successful QR-code scan.
     *
     * @return self
     */
    public function setAutomaticallyProcessAfterScan($automatically_process_after_scan)
    {
        if (is_null($automatically_process_after_scan)) {
            throw new \InvalidArgumentException('non-nullable automatically_process_after_scan cannot be null');
        }
        $this->container['automatically_process_after_scan'] = $automatically_process_after_scan;

        return $this;
    }

    /**
     * Gets readonly
     *
     * @return bool|null
     */
    public function getReadonly()
    {
        return $this->container['readonly'];
    }

    /**
     * Sets readonly
     *
     * @param bool|null $readonly This flag determine whether this field should be readonly or not.
     *
     * @return self
     */
    public function setReadonly($readonly)
    {
        if (is_null($readonly)) {
            throw new \InvalidArgumentException('non-nullable readonly cannot be null');
        }
        $this->container['readonly'] = $readonly;

        return $this;
    }

    /**
     * Gets section
     *
     * @return \OpenAPI\Client\Model\OperationCustomFieldDetailedAllOfSection|null
     */
    public function getSection()
    {
        return $this->container['section'];
    }

    /**
     * Sets section
     *
     * @param \OpenAPI\Client\Model\OperationCustomFieldDetailedAllOfSection|null $section section
     *
     * @return self
     */
    public function setSection($section)
    {
        if (is_null($section)) {
            throw new \InvalidArgumentException('non-nullable section cannot be null');
        }
        $this->container['section'] = $section;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


