<?php
/**
 * OidcRegisterParams
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OidcRegisterParams Class Doc Comment
 *
 * @category Class
 * @description Parameters for registering a dynamic OIDC client
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OidcRegisterParams implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OidcRegisterParams';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'redirect_uris' => 'string[]',
        'response_types' => 'string[]',
        'grant_types' => 'string[]',
        'application_type' => 'string',
        'client_name' => 'string',
        'logo_uri' => 'string',
        'client_uri' => 'string',
        'policy_uri' => 'string',
        'tos_uri' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'redirect_uris' => null,
        'response_types' => null,
        'grant_types' => null,
        'application_type' => null,
        'client_name' => null,
        'logo_uri' => null,
        'client_uri' => null,
        'policy_uri' => null,
        'tos_uri' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'redirect_uris' => false,
        'response_types' => false,
        'grant_types' => false,
        'application_type' => false,
        'client_name' => false,
        'logo_uri' => false,
        'client_uri' => false,
        'policy_uri' => false,
        'tos_uri' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'redirect_uris' => 'redirect_uris',
        'response_types' => 'response_types',
        'grant_types' => 'grant_types',
        'application_type' => 'application_type',
        'client_name' => 'client_name',
        'logo_uri' => 'logo_uri',
        'client_uri' => 'client_uri',
        'policy_uri' => 'policy_uri',
        'tos_uri' => 'tos_uri'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'redirect_uris' => 'setRedirectUris',
        'response_types' => 'setResponseTypes',
        'grant_types' => 'setGrantTypes',
        'application_type' => 'setApplicationType',
        'client_name' => 'setClientName',
        'logo_uri' => 'setLogoUri',
        'client_uri' => 'setClientUri',
        'policy_uri' => 'setPolicyUri',
        'tos_uri' => 'setTosUri'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'redirect_uris' => 'getRedirectUris',
        'response_types' => 'getResponseTypes',
        'grant_types' => 'getGrantTypes',
        'application_type' => 'getApplicationType',
        'client_name' => 'getClientName',
        'logo_uri' => 'getLogoUri',
        'client_uri' => 'getClientUri',
        'policy_uri' => 'getPolicyUri',
        'tos_uri' => 'getTosUri'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('redirect_uris', $data ?? [], null);
        $this->setIfExists('response_types', $data ?? [], null);
        $this->setIfExists('grant_types', $data ?? [], null);
        $this->setIfExists('application_type', $data ?? [], null);
        $this->setIfExists('client_name', $data ?? [], null);
        $this->setIfExists('logo_uri', $data ?? [], null);
        $this->setIfExists('client_uri', $data ?? [], null);
        $this->setIfExists('policy_uri', $data ?? [], null);
        $this->setIfExists('tos_uri', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets redirect_uris
     *
     * @return string[]|null
     */
    public function getRedirectUris()
    {
        return $this->container['redirect_uris'];
    }

    /**
     * Sets redirect_uris
     *
     * @param string[]|null $redirect_uris The allowed redirect uris. For dynamic clients, Cyclos will always present the domain of the redirect URI in the consent page. If multiple redirect uris are passed, they must all match the same domain. Also, any of the other URI parameters must match the domain.
     *
     * @return self
     */
    public function setRedirectUris($redirect_uris)
    {
        if (is_null($redirect_uris)) {
            throw new \InvalidArgumentException('non-nullable redirect_uris cannot be null');
        }
        $this->container['redirect_uris'] = $redirect_uris;

        return $this;
    }

    /**
     * Gets response_types
     *
     * @return string[]|null
     */
    public function getResponseTypes()
    {
        return $this->container['response_types'];
    }

    /**
     * Sets response_types
     *
     * @param string[]|null $response_types The response types allowed for authorization requests. If not specied, `code` is assumed. Valid values are any combination of `code`, `token` and `id_token`.
     *
     * @return self
     */
    public function setResponseTypes($response_types)
    {
        if (is_null($response_types)) {
            throw new \InvalidArgumentException('non-nullable response_types cannot be null');
        }
        $this->container['response_types'] = $response_types;

        return $this;
    }

    /**
     * Gets grant_types
     *
     * @return string[]|null
     */
    public function getGrantTypes()
    {
        return $this->container['grant_types'];
    }

    /**
     * Sets grant_types
     *
     * @param string[]|null $grant_types The grant types the client restricts itself from requesting. Valid values are `authorization_code`, `implicit` and `refresh_token`.
     *
     * @return self
     */
    public function setGrantTypes($grant_types)
    {
        if (is_null($grant_types)) {
            throw new \InvalidArgumentException('non-nullable grant_types cannot be null');
        }
        $this->container['grant_types'] = $grant_types;

        return $this;
    }

    /**
     * Gets application_type
     *
     * @return string|null
     */
    public function getApplicationType()
    {
        return $this->container['application_type'];
    }

    /**
     * Sets application_type
     *
     * @param string|null $application_type Indicates whether the application using this client will be a `web` (default) or `native`. The type of application influences the accepted protocols of `redirect_uris`.
     *
     * @return self
     */
    public function setApplicationType($application_type)
    {
        if (is_null($application_type)) {
            throw new \InvalidArgumentException('non-nullable application_type cannot be null');
        }
        $this->container['application_type'] = $application_type;

        return $this;
    }

    /**
     * Gets client_name
     *
     * @return string|null
     */
    public function getClientName()
    {
        return $this->container['client_name'];
    }

    /**
     * Sets client_name
     *
     * @param string|null $client_name The display name of the client, which is presented to users in the consent page. Note that internationalization is not supported.
     *
     * @return self
     */
    public function setClientName($client_name)
    {
        if (is_null($client_name)) {
            throw new \InvalidArgumentException('non-nullable client_name cannot be null');
        }
        $this->container['client_name'] = $client_name;

        return $this;
    }

    /**
     * Gets logo_uri
     *
     * @return string|null
     */
    public function getLogoUri()
    {
        return $this->container['logo_uri'];
    }

    /**
     * Sets logo_uri
     *
     * @param string|null $logo_uri The URL of the client logo to be displayed in the consent page. If given, it must have the same domain as `redirect_uris`.
     *
     * @return self
     */
    public function setLogoUri($logo_uri)
    {
        if (is_null($logo_uri)) {
            throw new \InvalidArgumentException('non-nullable logo_uri cannot be null');
        }
        $this->container['logo_uri'] = $logo_uri;

        return $this;
    }

    /**
     * Gets client_uri
     *
     * @return string|null
     */
    public function getClientUri()
    {
        return $this->container['client_uri'];
    }

    /**
     * Sets client_uri
     *
     * @param string|null $client_uri The link to the client website to be displayed in the consent page. If given, it must have the same domain as `redirect_uris`.
     *
     * @return self
     */
    public function setClientUri($client_uri)
    {
        if (is_null($client_uri)) {
            throw new \InvalidArgumentException('non-nullable client_uri cannot be null');
        }
        $this->container['client_uri'] = $client_uri;

        return $this;
    }

    /**
     * Gets policy_uri
     *
     * @return string|null
     */
    public function getPolicyUri()
    {
        return $this->container['policy_uri'];
    }

    /**
     * Sets policy_uri
     *
     * @param string|null $policy_uri The link to client's privacy policy page to be displayed in the consent page. If given, it must have the same domain as `redirect_uris`.
     *
     * @return self
     */
    public function setPolicyUri($policy_uri)
    {
        if (is_null($policy_uri)) {
            throw new \InvalidArgumentException('non-nullable policy_uri cannot be null');
        }
        $this->container['policy_uri'] = $policy_uri;

        return $this;
    }

    /**
     * Gets tos_uri
     *
     * @return string|null
     */
    public function getTosUri()
    {
        return $this->container['tos_uri'];
    }

    /**
     * Sets tos_uri
     *
     * @param string|null $tos_uri The link to client's terms of service page to be displayed in the consent page. If given, it must have the same domain as `redirect_uris`.
     *
     * @return self
     */
    public function setTosUri($tos_uri)
    {
        if (is_null($tos_uri)) {
            throw new \InvalidArgumentException('non-nullable tos_uri cannot be null');
        }
        $this->container['tos_uri'] = $tos_uri;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


