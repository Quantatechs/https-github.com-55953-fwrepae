<?php
/**
 * BaseTransactionResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * BaseTransactionResult Class Doc Comment
 *
 * @category Class
 * @description Base fields for transaction result
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class BaseTransactionResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'BaseTransactionResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'transaction_number' => 'string',
        'date' => '\DateTime',
        'amount' => 'float',
        'type' => '\OpenAPI\Client\Model\TransResultAllOfType',
        'description' => 'string',
        'image' => '\OpenAPI\Client\Model\TransResultAllOfImage',
        'custom_values' => 'array<string,string>',
        'kind' => '\OpenAPI\Client\Model\BaseTransactionResultAllOfKind',
        'creation_type' => '\OpenAPI\Client\Model\BaseTransactionResultAllOfCreationType',
        'authorization_status' => '\OpenAPI\Client\Model\BaseTransactionResultAllOfAuthorizationStatus',
        'currency' => 'string',
        'expiration_date' => '\DateTime',
        'scheduled_payment_status' => '\OpenAPI\Client\Model\BaseTransactionResultAllOfScheduledPaymentStatus',
        'installment_count' => 'int',
        'processed_installments' => 'int',
        'first_installment' => '\OpenAPI\Client\Model\BaseTransactionResultAllOfFirstInstallment',
        'first_open_installment' => '\OpenAPI\Client\Model\BaseTransactionResultAllOfFirstOpenInstallment',
        'recurring_payment_status' => '\OpenAPI\Client\Model\BaseTransactionResultAllOfRecurringPaymentStatus',
        'occurrences_count' => 'int',
        'next_occurrence_date' => '\DateTime',
        'last_occurrence_number' => 'int',
        'external_payment_status' => '\OpenAPI\Client\Model\BaseTransactionResultAllOfExternalPaymentStatus',
        'to_principal_type' => '\OpenAPI\Client\Model\BaseTransactionResultAllOfToPrincipalType',
        'to_principal_value' => 'string',
        'payment_request_status' => '\OpenAPI\Client\Model\BaseTransactionResultAllOfPaymentRequestStatus',
        'ticket_status' => '\OpenAPI\Client\Model\BaseTransactionResultAllOfTicketStatus'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'transaction_number' => null,
        'date' => 'date-time',
        'amount' => 'number',
        'type' => null,
        'description' => null,
        'image' => null,
        'custom_values' => null,
        'kind' => null,
        'creation_type' => null,
        'authorization_status' => null,
        'currency' => null,
        'expiration_date' => 'date-time',
        'scheduled_payment_status' => null,
        'installment_count' => null,
        'processed_installments' => null,
        'first_installment' => null,
        'first_open_installment' => null,
        'recurring_payment_status' => null,
        'occurrences_count' => null,
        'next_occurrence_date' => 'date-time',
        'last_occurrence_number' => null,
        'external_payment_status' => null,
        'to_principal_type' => null,
        'to_principal_value' => null,
        'payment_request_status' => null,
        'ticket_status' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'transaction_number' => false,
        'date' => false,
        'amount' => false,
        'type' => false,
        'description' => false,
        'image' => false,
        'custom_values' => false,
        'kind' => false,
        'creation_type' => false,
        'authorization_status' => false,
        'currency' => false,
        'expiration_date' => false,
        'scheduled_payment_status' => false,
        'installment_count' => false,
        'processed_installments' => false,
        'first_installment' => false,
        'first_open_installment' => false,
        'recurring_payment_status' => false,
        'occurrences_count' => false,
        'next_occurrence_date' => false,
        'last_occurrence_number' => false,
        'external_payment_status' => false,
        'to_principal_type' => false,
        'to_principal_value' => false,
        'payment_request_status' => false,
        'ticket_status' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'transaction_number' => 'transactionNumber',
        'date' => 'date',
        'amount' => 'amount',
        'type' => 'type',
        'description' => 'description',
        'image' => 'image',
        'custom_values' => 'customValues',
        'kind' => 'kind',
        'creation_type' => 'creationType',
        'authorization_status' => 'authorizationStatus',
        'currency' => 'currency',
        'expiration_date' => 'expirationDate',
        'scheduled_payment_status' => 'scheduledPaymentStatus',
        'installment_count' => 'installmentCount',
        'processed_installments' => 'processedInstallments',
        'first_installment' => 'firstInstallment',
        'first_open_installment' => 'firstOpenInstallment',
        'recurring_payment_status' => 'recurringPaymentStatus',
        'occurrences_count' => 'occurrencesCount',
        'next_occurrence_date' => 'nextOccurrenceDate',
        'last_occurrence_number' => 'lastOccurrenceNumber',
        'external_payment_status' => 'externalPaymentStatus',
        'to_principal_type' => 'toPrincipalType',
        'to_principal_value' => 'toPrincipalValue',
        'payment_request_status' => 'paymentRequestStatus',
        'ticket_status' => 'ticketStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'transaction_number' => 'setTransactionNumber',
        'date' => 'setDate',
        'amount' => 'setAmount',
        'type' => 'setType',
        'description' => 'setDescription',
        'image' => 'setImage',
        'custom_values' => 'setCustomValues',
        'kind' => 'setKind',
        'creation_type' => 'setCreationType',
        'authorization_status' => 'setAuthorizationStatus',
        'currency' => 'setCurrency',
        'expiration_date' => 'setExpirationDate',
        'scheduled_payment_status' => 'setScheduledPaymentStatus',
        'installment_count' => 'setInstallmentCount',
        'processed_installments' => 'setProcessedInstallments',
        'first_installment' => 'setFirstInstallment',
        'first_open_installment' => 'setFirstOpenInstallment',
        'recurring_payment_status' => 'setRecurringPaymentStatus',
        'occurrences_count' => 'setOccurrencesCount',
        'next_occurrence_date' => 'setNextOccurrenceDate',
        'last_occurrence_number' => 'setLastOccurrenceNumber',
        'external_payment_status' => 'setExternalPaymentStatus',
        'to_principal_type' => 'setToPrincipalType',
        'to_principal_value' => 'setToPrincipalValue',
        'payment_request_status' => 'setPaymentRequestStatus',
        'ticket_status' => 'setTicketStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'transaction_number' => 'getTransactionNumber',
        'date' => 'getDate',
        'amount' => 'getAmount',
        'type' => 'getType',
        'description' => 'getDescription',
        'image' => 'getImage',
        'custom_values' => 'getCustomValues',
        'kind' => 'getKind',
        'creation_type' => 'getCreationType',
        'authorization_status' => 'getAuthorizationStatus',
        'currency' => 'getCurrency',
        'expiration_date' => 'getExpirationDate',
        'scheduled_payment_status' => 'getScheduledPaymentStatus',
        'installment_count' => 'getInstallmentCount',
        'processed_installments' => 'getProcessedInstallments',
        'first_installment' => 'getFirstInstallment',
        'first_open_installment' => 'getFirstOpenInstallment',
        'recurring_payment_status' => 'getRecurringPaymentStatus',
        'occurrences_count' => 'getOccurrencesCount',
        'next_occurrence_date' => 'getNextOccurrenceDate',
        'last_occurrence_number' => 'getLastOccurrenceNumber',
        'external_payment_status' => 'getExternalPaymentStatus',
        'to_principal_type' => 'getToPrincipalType',
        'to_principal_value' => 'getToPrincipalValue',
        'payment_request_status' => 'getPaymentRequestStatus',
        'ticket_status' => 'getTicketStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('transaction_number', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('custom_values', $data ?? [], null);
        $this->setIfExists('kind', $data ?? [], null);
        $this->setIfExists('creation_type', $data ?? [], null);
        $this->setIfExists('authorization_status', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('scheduled_payment_status', $data ?? [], null);
        $this->setIfExists('installment_count', $data ?? [], null);
        $this->setIfExists('processed_installments', $data ?? [], null);
        $this->setIfExists('first_installment', $data ?? [], null);
        $this->setIfExists('first_open_installment', $data ?? [], null);
        $this->setIfExists('recurring_payment_status', $data ?? [], null);
        $this->setIfExists('occurrences_count', $data ?? [], null);
        $this->setIfExists('next_occurrence_date', $data ?? [], null);
        $this->setIfExists('last_occurrence_number', $data ?? [], null);
        $this->setIfExists('external_payment_status', $data ?? [], null);
        $this->setIfExists('to_principal_type', $data ?? [], null);
        $this->setIfExists('to_principal_value', $data ?? [], null);
        $this->setIfExists('payment_request_status', $data ?? [], null);
        $this->setIfExists('ticket_status', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The internal entity identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets transaction_number
     *
     * @return string|null
     */
    public function getTransactionNumber()
    {
        return $this->container['transaction_number'];
    }

    /**
     * Sets transaction_number
     *
     * @param string|null $transaction_number The transaction number identifying this balance transfer. The currency configuration has the definition on whether transaction numbers are enabled and which format they have.
     *
     * @return self
     */
    public function setTransactionNumber($transaction_number)
    {
        if (is_null($transaction_number)) {
            throw new \InvalidArgumentException('non-nullable transaction_number cannot be null');
        }
        $this->container['transaction_number'] = $transaction_number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date The transaction date and time.
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The transaction amount.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\TransResultAllOfType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\TransResultAllOfType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The transaction description. Is optional.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \OpenAPI\Client\Model\TransResultAllOfImage|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \OpenAPI\Client\Model\TransResultAllOfImage|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets custom_values
     *
     * @return array<string,string>|null
     */
    public function getCustomValues()
    {
        return $this->container['custom_values'];
    }

    /**
     * Sets custom_values
     *
     * @param array<string,string>|null $custom_values Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. In order to lookup the custom fields, use the `GET /{owner}/accounts/{accountType}/data-for-history` operation, and lookup each field by either internal name (if configured) or id. Example: `{..., \"customValues\": {\"linkedAccount\": \"123456789\"}}`
     *
     * @return self
     */
    public function setCustomValues($custom_values)
    {
        if (is_null($custom_values)) {
            throw new \InvalidArgumentException('non-nullable custom_values cannot be null');
        }
        $this->container['custom_values'] = $custom_values;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return \OpenAPI\Client\Model\BaseTransactionResultAllOfKind|null
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param \OpenAPI\Client\Model\BaseTransactionResultAllOfKind|null $kind kind
     *
     * @return self
     */
    public function setKind($kind)
    {
        if (is_null($kind)) {
            throw new \InvalidArgumentException('non-nullable kind cannot be null');
        }
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets creation_type
     *
     * @return \OpenAPI\Client\Model\BaseTransactionResultAllOfCreationType|null
     */
    public function getCreationType()
    {
        return $this->container['creation_type'];
    }

    /**
     * Sets creation_type
     *
     * @param \OpenAPI\Client\Model\BaseTransactionResultAllOfCreationType|null $creation_type creation_type
     *
     * @return self
     */
    public function setCreationType($creation_type)
    {
        if (is_null($creation_type)) {
            throw new \InvalidArgumentException('non-nullable creation_type cannot be null');
        }
        $this->container['creation_type'] = $creation_type;

        return $this;
    }

    /**
     * Gets authorization_status
     *
     * @return \OpenAPI\Client\Model\BaseTransactionResultAllOfAuthorizationStatus|null
     */
    public function getAuthorizationStatus()
    {
        return $this->container['authorization_status'];
    }

    /**
     * Sets authorization_status
     *
     * @param \OpenAPI\Client\Model\BaseTransactionResultAllOfAuthorizationStatus|null $authorization_status authorization_status
     *
     * @return self
     */
    public function setAuthorizationStatus($authorization_status)
    {
        if (is_null($authorization_status)) {
            throw new \InvalidArgumentException('non-nullable authorization_status cannot be null');
        }
        $this->container['authorization_status'] = $authorization_status;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string|null $currency Either internal name or id of the transaction currency.
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date Only returned if the `kind` is either `paymentRequest`, `externalPayment` or `ticket`. The deadline for the payment to be processed.  In case of `externalPayment` if no user is registered with either e-mail or mobile phone matching, it is canceled. The same is done in case of `ticket` if it is not accepted by any user.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets scheduled_payment_status
     *
     * @return \OpenAPI\Client\Model\BaseTransactionResultAllOfScheduledPaymentStatus|null
     */
    public function getScheduledPaymentStatus()
    {
        return $this->container['scheduled_payment_status'];
    }

    /**
     * Sets scheduled_payment_status
     *
     * @param \OpenAPI\Client\Model\BaseTransactionResultAllOfScheduledPaymentStatus|null $scheduled_payment_status scheduled_payment_status
     *
     * @return self
     */
    public function setScheduledPaymentStatus($scheduled_payment_status)
    {
        if (is_null($scheduled_payment_status)) {
            throw new \InvalidArgumentException('non-nullable scheduled_payment_status cannot be null');
        }
        $this->container['scheduled_payment_status'] = $scheduled_payment_status;

        return $this;
    }

    /**
     * Gets installment_count
     *
     * @return int|null
     */
    public function getInstallmentCount()
    {
        return $this->container['installment_count'];
    }

    /**
     * Sets installment_count
     *
     * @param int|null $installment_count The total number of installments. Only returned if `kind` is `scheduledPayment`.
     *
     * @return self
     */
    public function setInstallmentCount($installment_count)
    {
        if (is_null($installment_count)) {
            throw new \InvalidArgumentException('non-nullable installment_count cannot be null');
        }
        $this->container['installment_count'] = $installment_count;

        return $this;
    }

    /**
     * Gets processed_installments
     *
     * @return int|null
     */
    public function getProcessedInstallments()
    {
        return $this->container['processed_installments'];
    }

    /**
     * Sets processed_installments
     *
     * @param int|null $processed_installments The number of processed installments. Only returned if `kind` is `scheduledPayment`.
     *
     * @return self
     */
    public function setProcessedInstallments($processed_installments)
    {
        if (is_null($processed_installments)) {
            throw new \InvalidArgumentException('non-nullable processed_installments cannot be null');
        }
        $this->container['processed_installments'] = $processed_installments;

        return $this;
    }

    /**
     * Gets first_installment
     *
     * @return \OpenAPI\Client\Model\BaseTransactionResultAllOfFirstInstallment|null
     */
    public function getFirstInstallment()
    {
        return $this->container['first_installment'];
    }

    /**
     * Sets first_installment
     *
     * @param \OpenAPI\Client\Model\BaseTransactionResultAllOfFirstInstallment|null $first_installment first_installment
     *
     * @return self
     */
    public function setFirstInstallment($first_installment)
    {
        if (is_null($first_installment)) {
            throw new \InvalidArgumentException('non-nullable first_installment cannot be null');
        }
        $this->container['first_installment'] = $first_installment;

        return $this;
    }

    /**
     * Gets first_open_installment
     *
     * @return \OpenAPI\Client\Model\BaseTransactionResultAllOfFirstOpenInstallment|null
     */
    public function getFirstOpenInstallment()
    {
        return $this->container['first_open_installment'];
    }

    /**
     * Sets first_open_installment
     *
     * @param \OpenAPI\Client\Model\BaseTransactionResultAllOfFirstOpenInstallment|null $first_open_installment first_open_installment
     *
     * @return self
     */
    public function setFirstOpenInstallment($first_open_installment)
    {
        if (is_null($first_open_installment)) {
            throw new \InvalidArgumentException('non-nullable first_open_installment cannot be null');
        }
        $this->container['first_open_installment'] = $first_open_installment;

        return $this;
    }

    /**
     * Gets recurring_payment_status
     *
     * @return \OpenAPI\Client\Model\BaseTransactionResultAllOfRecurringPaymentStatus|null
     */
    public function getRecurringPaymentStatus()
    {
        return $this->container['recurring_payment_status'];
    }

    /**
     * Sets recurring_payment_status
     *
     * @param \OpenAPI\Client\Model\BaseTransactionResultAllOfRecurringPaymentStatus|null $recurring_payment_status recurring_payment_status
     *
     * @return self
     */
    public function setRecurringPaymentStatus($recurring_payment_status)
    {
        if (is_null($recurring_payment_status)) {
            throw new \InvalidArgumentException('non-nullable recurring_payment_status cannot be null');
        }
        $this->container['recurring_payment_status'] = $recurring_payment_status;

        return $this;
    }

    /**
     * Gets occurrences_count
     *
     * @return int|null
     */
    public function getOccurrencesCount()
    {
        return $this->container['occurrences_count'];
    }

    /**
     * Sets occurrences_count
     *
     * @param int|null $occurrences_count The total number of occurrences to process. When null will be processed until manually canceled. Only returned if `kind` is `recurringPayment`.
     *
     * @return self
     */
    public function setOccurrencesCount($occurrences_count)
    {
        if (is_null($occurrences_count)) {
            throw new \InvalidArgumentException('non-nullable occurrences_count cannot be null');
        }
        $this->container['occurrences_count'] = $occurrences_count;

        return $this;
    }

    /**
     * Gets next_occurrence_date
     *
     * @return \DateTime|null
     */
    public function getNextOccurrenceDate()
    {
        return $this->container['next_occurrence_date'];
    }

    /**
     * Sets next_occurrence_date
     *
     * @param \DateTime|null $next_occurrence_date When the next recurring payment occurrence will be processed. Only returned if `kind` is `recurringPayment`.
     *
     * @return self
     */
    public function setNextOccurrenceDate($next_occurrence_date)
    {
        if (is_null($next_occurrence_date)) {
            throw new \InvalidArgumentException('non-nullable next_occurrence_date cannot be null');
        }
        $this->container['next_occurrence_date'] = $next_occurrence_date;

        return $this;
    }

    /**
     * Gets last_occurrence_number
     *
     * @return int|null
     */
    public function getLastOccurrenceNumber()
    {
        return $this->container['last_occurrence_number'];
    }

    /**
     * Sets last_occurrence_number
     *
     * @param int|null $last_occurrence_number The number of the last processed occurrence
     *
     * @return self
     */
    public function setLastOccurrenceNumber($last_occurrence_number)
    {
        if (is_null($last_occurrence_number)) {
            throw new \InvalidArgumentException('non-nullable last_occurrence_number cannot be null');
        }
        $this->container['last_occurrence_number'] = $last_occurrence_number;

        return $this;
    }

    /**
     * Gets external_payment_status
     *
     * @return \OpenAPI\Client\Model\BaseTransactionResultAllOfExternalPaymentStatus|null
     */
    public function getExternalPaymentStatus()
    {
        return $this->container['external_payment_status'];
    }

    /**
     * Sets external_payment_status
     *
     * @param \OpenAPI\Client\Model\BaseTransactionResultAllOfExternalPaymentStatus|null $external_payment_status external_payment_status
     *
     * @return self
     */
    public function setExternalPaymentStatus($external_payment_status)
    {
        if (is_null($external_payment_status)) {
            throw new \InvalidArgumentException('non-nullable external_payment_status cannot be null');
        }
        $this->container['external_payment_status'] = $external_payment_status;

        return $this;
    }

    /**
     * Gets to_principal_type
     *
     * @return \OpenAPI\Client\Model\BaseTransactionResultAllOfToPrincipalType|null
     */
    public function getToPrincipalType()
    {
        return $this->container['to_principal_type'];
    }

    /**
     * Sets to_principal_type
     *
     * @param \OpenAPI\Client\Model\BaseTransactionResultAllOfToPrincipalType|null $to_principal_type to_principal_type
     *
     * @return self
     */
    public function setToPrincipalType($to_principal_type)
    {
        if (is_null($to_principal_type)) {
            throw new \InvalidArgumentException('non-nullable to_principal_type cannot be null');
        }
        $this->container['to_principal_type'] = $to_principal_type;

        return $this;
    }

    /**
     * Gets to_principal_value
     *
     * @return string|null
     */
    public function getToPrincipalValue()
    {
        return $this->container['to_principal_value'];
    }

    /**
     * Sets to_principal_value
     *
     * @param string|null $to_principal_value The principal to which an external payment was sent to. Only returned if `kind` is `externalPayment`.
     *
     * @return self
     */
    public function setToPrincipalValue($to_principal_value)
    {
        if (is_null($to_principal_value)) {
            throw new \InvalidArgumentException('non-nullable to_principal_value cannot be null');
        }
        $this->container['to_principal_value'] = $to_principal_value;

        return $this;
    }

    /**
     * Gets payment_request_status
     *
     * @return \OpenAPI\Client\Model\BaseTransactionResultAllOfPaymentRequestStatus|null
     */
    public function getPaymentRequestStatus()
    {
        return $this->container['payment_request_status'];
    }

    /**
     * Sets payment_request_status
     *
     * @param \OpenAPI\Client\Model\BaseTransactionResultAllOfPaymentRequestStatus|null $payment_request_status payment_request_status
     *
     * @return self
     */
    public function setPaymentRequestStatus($payment_request_status)
    {
        if (is_null($payment_request_status)) {
            throw new \InvalidArgumentException('non-nullable payment_request_status cannot be null');
        }
        $this->container['payment_request_status'] = $payment_request_status;

        return $this;
    }

    /**
     * Gets ticket_status
     *
     * @return \OpenAPI\Client\Model\BaseTransactionResultAllOfTicketStatus|null
     */
    public function getTicketStatus()
    {
        return $this->container['ticket_status'];
    }

    /**
     * Sets ticket_status
     *
     * @param \OpenAPI\Client\Model\BaseTransactionResultAllOfTicketStatus|null $ticket_status ticket_status
     *
     * @return self
     */
    public function setTicketStatus($ticket_status)
    {
        if (is_null($ticket_status)) {
            throw new \InvalidArgumentException('non-nullable ticket_status cannot be null');
        }
        $this->container['ticket_status'] = $ticket_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


