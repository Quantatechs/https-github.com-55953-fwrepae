<?php
/**
 * DataForFrontendHome
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DataForFrontendHome Class Doc Comment
 *
 * @category Class
 * @description Data for the home / dashboard in the new frontend
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DataForFrontendHome implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataForFrontendHome';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'content' => '\OpenAPI\Client\Model\FrontendHomeContent',
        'full_width_content' => 'bool',
        'quick_access' => '\OpenAPI\Client\Model\QuickAccess[]',
        'merge_accounts' => 'bool',
        'accounts' => '\OpenAPI\Client\Model\FrontendDashboardAccount[]',
        'show_latest_users' => 'bool',
        'latest_users' => '\OpenAPI\Client\Model\UserResult[]',
        'show_latest_ads' => 'bool',
        'latest_ads' => '\OpenAPI\Client\Model\AdResult[]',
        'passwords_needing_attention' => '\OpenAPI\Client\Model\PasswordStatusAndType[]',
        'pending_security_question' => 'bool',
        'pending_totp' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'content' => null,
        'full_width_content' => null,
        'quick_access' => null,
        'merge_accounts' => null,
        'accounts' => null,
        'show_latest_users' => null,
        'latest_users' => null,
        'show_latest_ads' => null,
        'latest_ads' => null,
        'passwords_needing_attention' => null,
        'pending_security_question' => null,
        'pending_totp' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'content' => false,
        'full_width_content' => false,
        'quick_access' => false,
        'merge_accounts' => false,
        'accounts' => false,
        'show_latest_users' => false,
        'latest_users' => false,
        'show_latest_ads' => false,
        'latest_ads' => false,
        'passwords_needing_attention' => false,
        'pending_security_question' => false,
        'pending_totp' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'content' => 'content',
        'full_width_content' => 'fullWidthContent',
        'quick_access' => 'quickAccess',
        'merge_accounts' => 'mergeAccounts',
        'accounts' => 'accounts',
        'show_latest_users' => 'showLatestUsers',
        'latest_users' => 'latestUsers',
        'show_latest_ads' => 'showLatestAds',
        'latest_ads' => 'latestAds',
        'passwords_needing_attention' => 'passwordsNeedingAttention',
        'pending_security_question' => 'pendingSecurityQuestion',
        'pending_totp' => 'pendingTotp'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'content' => 'setContent',
        'full_width_content' => 'setFullWidthContent',
        'quick_access' => 'setQuickAccess',
        'merge_accounts' => 'setMergeAccounts',
        'accounts' => 'setAccounts',
        'show_latest_users' => 'setShowLatestUsers',
        'latest_users' => 'setLatestUsers',
        'show_latest_ads' => 'setShowLatestAds',
        'latest_ads' => 'setLatestAds',
        'passwords_needing_attention' => 'setPasswordsNeedingAttention',
        'pending_security_question' => 'setPendingSecurityQuestion',
        'pending_totp' => 'setPendingTotp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'content' => 'getContent',
        'full_width_content' => 'getFullWidthContent',
        'quick_access' => 'getQuickAccess',
        'merge_accounts' => 'getMergeAccounts',
        'accounts' => 'getAccounts',
        'show_latest_users' => 'getShowLatestUsers',
        'latest_users' => 'getLatestUsers',
        'show_latest_ads' => 'getShowLatestAds',
        'latest_ads' => 'getLatestAds',
        'passwords_needing_attention' => 'getPasswordsNeedingAttention',
        'pending_security_question' => 'getPendingSecurityQuestion',
        'pending_totp' => 'getPendingTotp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('content', $data ?? [], null);
        $this->setIfExists('full_width_content', $data ?? [], null);
        $this->setIfExists('quick_access', $data ?? [], null);
        $this->setIfExists('merge_accounts', $data ?? [], null);
        $this->setIfExists('accounts', $data ?? [], null);
        $this->setIfExists('show_latest_users', $data ?? [], null);
        $this->setIfExists('latest_users', $data ?? [], null);
        $this->setIfExists('show_latest_ads', $data ?? [], null);
        $this->setIfExists('latest_ads', $data ?? [], null);
        $this->setIfExists('passwords_needing_attention', $data ?? [], null);
        $this->setIfExists('pending_security_question', $data ?? [], null);
        $this->setIfExists('pending_totp', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets content
     *
     * @return \OpenAPI\Client\Model\FrontendHomeContent|null
     */
    public function getContent()
    {
        return $this->container['content'];
    }

    /**
     * Sets content
     *
     * @param \OpenAPI\Client\Model\FrontendHomeContent|null $content content
     *
     * @return self
     */
    public function setContent($content)
    {
        if (is_null($content)) {
            throw new \InvalidArgumentException('non-nullable content cannot be null');
        }
        $this->container['content'] = $content;

        return $this;
    }

    /**
     * Gets full_width_content
     *
     * @return bool|null
     */
    public function getFullWidthContent()
    {
        return $this->container['full_width_content'];
    }

    /**
     * Sets full_width_content
     *
     * @param bool|null $full_width_content Should the guest home content be displayed full width in large screens?
     *
     * @return self
     */
    public function setFullWidthContent($full_width_content)
    {
        if (is_null($full_width_content)) {
            throw new \InvalidArgumentException('non-nullable full_width_content cannot be null');
        }
        $this->container['full_width_content'] = $full_width_content;

        return $this;
    }

    /**
     * Gets quick_access
     *
     * @return \OpenAPI\Client\Model\QuickAccess[]|null
     */
    public function getQuickAccess()
    {
        return $this->container['quick_access'];
    }

    /**
     * Sets quick_access
     *
     * @param \OpenAPI\Client\Model\QuickAccess[]|null $quick_access Contains the quick access items that should be displayed.
     *
     * @return self
     */
    public function setQuickAccess($quick_access)
    {
        if (is_null($quick_access)) {
            throw new \InvalidArgumentException('non-nullable quick_access cannot be null');
        }
        $this->container['quick_access'] = $quick_access;

        return $this;
    }

    /**
     * Gets merge_accounts
     *
     * @return bool|null
     */
    public function getMergeAccounts()
    {
        return $this->container['merge_accounts'];
    }

    /**
     * Sets merge_accounts
     *
     * @param bool|null $merge_accounts Should multiple accounts be merged in the same card?
     *
     * @return self
     */
    public function setMergeAccounts($merge_accounts)
    {
        if (is_null($merge_accounts)) {
            throw new \InvalidArgumentException('non-nullable merge_accounts cannot be null');
        }
        $this->container['merge_accounts'] = $merge_accounts;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return \OpenAPI\Client\Model\FrontendDashboardAccount[]|null
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \OpenAPI\Client\Model\FrontendDashboardAccount[]|null $accounts The accounts to show in the dashboard
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        if (is_null($accounts)) {
            throw new \InvalidArgumentException('non-nullable accounts cannot be null');
        }
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets show_latest_users
     *
     * @return bool|null
     */
    public function getShowLatestUsers()
    {
        return $this->container['show_latest_users'];
    }

    /**
     * Sets show_latest_users
     *
     * @param bool|null $show_latest_users Should the latest users be displayed?
     *
     * @return self
     */
    public function setShowLatestUsers($show_latest_users)
    {
        if (is_null($show_latest_users)) {
            throw new \InvalidArgumentException('non-nullable show_latest_users cannot be null');
        }
        $this->container['show_latest_users'] = $show_latest_users;

        return $this;
    }

    /**
     * Gets latest_users
     *
     * @return \OpenAPI\Client\Model\UserResult[]|null
     */
    public function getLatestUsers()
    {
        return $this->container['latest_users'];
    }

    /**
     * Sets latest_users
     *
     * @param \OpenAPI\Client\Model\UserResult[]|null $latest_users If displayed, is the list of the latest users.
     *
     * @return self
     */
    public function setLatestUsers($latest_users)
    {
        if (is_null($latest_users)) {
            throw new \InvalidArgumentException('non-nullable latest_users cannot be null');
        }
        $this->container['latest_users'] = $latest_users;

        return $this;
    }

    /**
     * Gets show_latest_ads
     *
     * @return bool|null
     */
    public function getShowLatestAds()
    {
        return $this->container['show_latest_ads'];
    }

    /**
     * Sets show_latest_ads
     *
     * @param bool|null $show_latest_ads Should the latest advertisements be displayed?
     *
     * @return self
     */
    public function setShowLatestAds($show_latest_ads)
    {
        if (is_null($show_latest_ads)) {
            throw new \InvalidArgumentException('non-nullable show_latest_ads cannot be null');
        }
        $this->container['show_latest_ads'] = $show_latest_ads;

        return $this;
    }

    /**
     * Gets latest_ads
     *
     * @return \OpenAPI\Client\Model\AdResult[]|null
     */
    public function getLatestAds()
    {
        return $this->container['latest_ads'];
    }

    /**
     * Sets latest_ads
     *
     * @param \OpenAPI\Client\Model\AdResult[]|null $latest_ads If displayed, is the list of the latest advertisements.
     *
     * @return self
     */
    public function setLatestAds($latest_ads)
    {
        if (is_null($latest_ads)) {
            throw new \InvalidArgumentException('non-nullable latest_ads cannot be null');
        }
        $this->container['latest_ads'] = $latest_ads;

        return $this;
    }

    /**
     * Gets passwords_needing_attention
     *
     * @return \OpenAPI\Client\Model\PasswordStatusAndType[]|null
     */
    public function getPasswordsNeedingAttention()
    {
        return $this->container['passwords_needing_attention'];
    }

    /**
     * Sets passwords_needing_attention
     *
     * @param \OpenAPI\Client\Model\PasswordStatusAndType[]|null $passwords_needing_attention The passwords that need an attention from the user, such as expired, reset and pending.
     *
     * @return self
     */
    public function setPasswordsNeedingAttention($passwords_needing_attention)
    {
        if (is_null($passwords_needing_attention)) {
            throw new \InvalidArgumentException('non-nullable passwords_needing_attention cannot be null');
        }
        $this->container['passwords_needing_attention'] = $passwords_needing_attention;

        return $this;
    }

    /**
     * Gets pending_security_question
     *
     * @return bool|null
     */
    public function getPendingSecurityQuestion()
    {
        return $this->container['pending_security_question'];
    }

    /**
     * Sets pending_security_question
     *
     * @param bool|null $pending_security_question Indicates whether the security question should be set
     *
     * @return self
     */
    public function setPendingSecurityQuestion($pending_security_question)
    {
        if (is_null($pending_security_question)) {
            throw new \InvalidArgumentException('non-nullable pending_security_question cannot be null');
        }
        $this->container['pending_security_question'] = $pending_security_question;

        return $this;
    }

    /**
     * Gets pending_totp
     *
     * @return bool|null
     */
    public function getPendingTotp()
    {
        return $this->container['pending_totp'];
    }

    /**
     * Sets pending_totp
     *
     * @param bool|null $pending_totp Indicates whether the TOTP secret should be set
     *
     * @return self
     */
    public function setPendingTotp($pending_totp)
    {
        if (is_null($pending_totp)) {
            throw new \InvalidArgumentException('non-nullable pending_totp cannot be null');
        }
        $this->container['pending_totp'] = $pending_totp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


