<?php
/**
 * DataForUi
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DataForUi Class Doc Comment
 *
 * @category Class
 * @description Contains data to display an alternative user interface
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DataForUi implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataForUi';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cyclos_version' => 'string',
        'cyclos_revision' => 'string',
        'license_key' => 'string',
        'licensee' => 'string',
        'current_client_time' => '\DateTime',
        'auth' => '\OpenAPI\Client\Model\Auth',
        'data_for_login' => '\OpenAPI\Client\Model\DataForLogin',
        'public_registration_groups' => '\OpenAPI\Client\Model\GroupForRegistration[]',
        'large_screen_registration_wizard' => '\OpenAPI\Client\Model\Wizard',
        'medium_screen_registration_wizard' => '\OpenAPI\Client\Model\Wizard',
        'small_screen_registration_wizard' => '\OpenAPI\Client\Model\Wizard',
        'map_data' => '\OpenAPI\Client\Model\MapData',
        'decimal_separator' => 'string',
        'grouping_separator' => 'string',
        'date_format' => 'string',
        'time_format' => 'string',
        'time_zone_id' => 'string',
        'distance_unit' => '\OpenAPI\Client\Model\DistanceUnitEnum',
        'root_url' => 'string',
        'api_url' => 'string',
        'country' => 'string',
        'max_image_width' => 'int',
        'max_image_height' => 'int',
        'max_upload_size' => 'int',
        'jpeg_quality' => 'int',
        'language' => '\OpenAPI\Client\Model\Language',
        'allowed_locales' => '\OpenAPI\Client\Model\UserLocale[]',
        'current_locale' => '\OpenAPI\Client\Model\UserLocale',
        'default_locale' => '\OpenAPI\Client\Model\UserLocale',
        'resource_cache_key' => 'string',
        'apple_store_url' => 'string',
        'play_store_url' => 'string',
        'hide_user_search_in_menu' => 'bool',
        'device_activation_mode' => '\OpenAPI\Client\Model\DeviceActivationModeEnum',
        'theme' => '\OpenAPI\Client\Model\ThemeUIElement',
        'header' => '\OpenAPI\Client\Model\TranslatableUIElementWithContent',
        'footer' => '\OpenAPI\Client\Model\TranslatableUIElementWithContent',
        'shopping_cart_web_shop_count' => 'int',
        'application_name' => 'string',
        'application_username' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cyclos_version' => null,
        'cyclos_revision' => null,
        'license_key' => null,
        'licensee' => null,
        'current_client_time' => 'date-time',
        'auth' => null,
        'data_for_login' => null,
        'public_registration_groups' => null,
        'large_screen_registration_wizard' => null,
        'medium_screen_registration_wizard' => null,
        'small_screen_registration_wizard' => null,
        'map_data' => null,
        'decimal_separator' => null,
        'grouping_separator' => null,
        'date_format' => null,
        'time_format' => null,
        'time_zone_id' => null,
        'distance_unit' => null,
        'root_url' => null,
        'api_url' => null,
        'country' => null,
        'max_image_width' => null,
        'max_image_height' => null,
        'max_upload_size' => null,
        'jpeg_quality' => null,
        'language' => null,
        'allowed_locales' => null,
        'current_locale' => null,
        'default_locale' => null,
        'resource_cache_key' => null,
        'apple_store_url' => null,
        'play_store_url' => null,
        'hide_user_search_in_menu' => null,
        'device_activation_mode' => null,
        'theme' => null,
        'header' => null,
        'footer' => null,
        'shopping_cart_web_shop_count' => null,
        'application_name' => null,
        'application_username' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cyclos_version' => false,
        'cyclos_revision' => false,
        'license_key' => false,
        'licensee' => false,
        'current_client_time' => false,
        'auth' => false,
        'data_for_login' => false,
        'public_registration_groups' => false,
        'large_screen_registration_wizard' => false,
        'medium_screen_registration_wizard' => false,
        'small_screen_registration_wizard' => false,
        'map_data' => false,
        'decimal_separator' => false,
        'grouping_separator' => false,
        'date_format' => false,
        'time_format' => false,
        'time_zone_id' => false,
        'distance_unit' => false,
        'root_url' => false,
        'api_url' => false,
        'country' => false,
        'max_image_width' => false,
        'max_image_height' => false,
        'max_upload_size' => false,
        'jpeg_quality' => false,
        'language' => false,
        'allowed_locales' => false,
        'current_locale' => false,
        'default_locale' => false,
        'resource_cache_key' => false,
        'apple_store_url' => false,
        'play_store_url' => false,
        'hide_user_search_in_menu' => false,
        'device_activation_mode' => false,
        'theme' => false,
        'header' => false,
        'footer' => false,
        'shopping_cart_web_shop_count' => false,
        'application_name' => false,
        'application_username' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cyclos_version' => 'cyclosVersion',
        'cyclos_revision' => 'cyclosRevision',
        'license_key' => 'licenseKey',
        'licensee' => 'licensee',
        'current_client_time' => 'currentClientTime',
        'auth' => 'auth',
        'data_for_login' => 'dataForLogin',
        'public_registration_groups' => 'publicRegistrationGroups',
        'large_screen_registration_wizard' => 'largeScreenRegistrationWizard',
        'medium_screen_registration_wizard' => 'mediumScreenRegistrationWizard',
        'small_screen_registration_wizard' => 'smallScreenRegistrationWizard',
        'map_data' => 'mapData',
        'decimal_separator' => 'decimalSeparator',
        'grouping_separator' => 'groupingSeparator',
        'date_format' => 'dateFormat',
        'time_format' => 'timeFormat',
        'time_zone_id' => 'timeZoneId',
        'distance_unit' => 'distanceUnit',
        'root_url' => 'rootUrl',
        'api_url' => 'apiUrl',
        'country' => 'country',
        'max_image_width' => 'maxImageWidth',
        'max_image_height' => 'maxImageHeight',
        'max_upload_size' => 'maxUploadSize',
        'jpeg_quality' => 'jpegQuality',
        'language' => 'language',
        'allowed_locales' => 'allowedLocales',
        'current_locale' => 'currentLocale',
        'default_locale' => 'defaultLocale',
        'resource_cache_key' => 'resourceCacheKey',
        'apple_store_url' => 'appleStoreUrl',
        'play_store_url' => 'playStoreUrl',
        'hide_user_search_in_menu' => 'hideUserSearchInMenu',
        'device_activation_mode' => 'deviceActivationMode',
        'theme' => 'theme',
        'header' => 'header',
        'footer' => 'footer',
        'shopping_cart_web_shop_count' => 'shoppingCartWebShopCount',
        'application_name' => 'applicationName',
        'application_username' => 'applicationUsername'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cyclos_version' => 'setCyclosVersion',
        'cyclos_revision' => 'setCyclosRevision',
        'license_key' => 'setLicenseKey',
        'licensee' => 'setLicensee',
        'current_client_time' => 'setCurrentClientTime',
        'auth' => 'setAuth',
        'data_for_login' => 'setDataForLogin',
        'public_registration_groups' => 'setPublicRegistrationGroups',
        'large_screen_registration_wizard' => 'setLargeScreenRegistrationWizard',
        'medium_screen_registration_wizard' => 'setMediumScreenRegistrationWizard',
        'small_screen_registration_wizard' => 'setSmallScreenRegistrationWizard',
        'map_data' => 'setMapData',
        'decimal_separator' => 'setDecimalSeparator',
        'grouping_separator' => 'setGroupingSeparator',
        'date_format' => 'setDateFormat',
        'time_format' => 'setTimeFormat',
        'time_zone_id' => 'setTimeZoneId',
        'distance_unit' => 'setDistanceUnit',
        'root_url' => 'setRootUrl',
        'api_url' => 'setApiUrl',
        'country' => 'setCountry',
        'max_image_width' => 'setMaxImageWidth',
        'max_image_height' => 'setMaxImageHeight',
        'max_upload_size' => 'setMaxUploadSize',
        'jpeg_quality' => 'setJpegQuality',
        'language' => 'setLanguage',
        'allowed_locales' => 'setAllowedLocales',
        'current_locale' => 'setCurrentLocale',
        'default_locale' => 'setDefaultLocale',
        'resource_cache_key' => 'setResourceCacheKey',
        'apple_store_url' => 'setAppleStoreUrl',
        'play_store_url' => 'setPlayStoreUrl',
        'hide_user_search_in_menu' => 'setHideUserSearchInMenu',
        'device_activation_mode' => 'setDeviceActivationMode',
        'theme' => 'setTheme',
        'header' => 'setHeader',
        'footer' => 'setFooter',
        'shopping_cart_web_shop_count' => 'setShoppingCartWebShopCount',
        'application_name' => 'setApplicationName',
        'application_username' => 'setApplicationUsername'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cyclos_version' => 'getCyclosVersion',
        'cyclos_revision' => 'getCyclosRevision',
        'license_key' => 'getLicenseKey',
        'licensee' => 'getLicensee',
        'current_client_time' => 'getCurrentClientTime',
        'auth' => 'getAuth',
        'data_for_login' => 'getDataForLogin',
        'public_registration_groups' => 'getPublicRegistrationGroups',
        'large_screen_registration_wizard' => 'getLargeScreenRegistrationWizard',
        'medium_screen_registration_wizard' => 'getMediumScreenRegistrationWizard',
        'small_screen_registration_wizard' => 'getSmallScreenRegistrationWizard',
        'map_data' => 'getMapData',
        'decimal_separator' => 'getDecimalSeparator',
        'grouping_separator' => 'getGroupingSeparator',
        'date_format' => 'getDateFormat',
        'time_format' => 'getTimeFormat',
        'time_zone_id' => 'getTimeZoneId',
        'distance_unit' => 'getDistanceUnit',
        'root_url' => 'getRootUrl',
        'api_url' => 'getApiUrl',
        'country' => 'getCountry',
        'max_image_width' => 'getMaxImageWidth',
        'max_image_height' => 'getMaxImageHeight',
        'max_upload_size' => 'getMaxUploadSize',
        'jpeg_quality' => 'getJpegQuality',
        'language' => 'getLanguage',
        'allowed_locales' => 'getAllowedLocales',
        'current_locale' => 'getCurrentLocale',
        'default_locale' => 'getDefaultLocale',
        'resource_cache_key' => 'getResourceCacheKey',
        'apple_store_url' => 'getAppleStoreUrl',
        'play_store_url' => 'getPlayStoreUrl',
        'hide_user_search_in_menu' => 'getHideUserSearchInMenu',
        'device_activation_mode' => 'getDeviceActivationMode',
        'theme' => 'getTheme',
        'header' => 'getHeader',
        'footer' => 'getFooter',
        'shopping_cart_web_shop_count' => 'getShoppingCartWebShopCount',
        'application_name' => 'getApplicationName',
        'application_username' => 'getApplicationUsername'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cyclos_version', $data ?? [], null);
        $this->setIfExists('cyclos_revision', $data ?? [], null);
        $this->setIfExists('license_key', $data ?? [], null);
        $this->setIfExists('licensee', $data ?? [], null);
        $this->setIfExists('current_client_time', $data ?? [], null);
        $this->setIfExists('auth', $data ?? [], null);
        $this->setIfExists('data_for_login', $data ?? [], null);
        $this->setIfExists('public_registration_groups', $data ?? [], null);
        $this->setIfExists('large_screen_registration_wizard', $data ?? [], null);
        $this->setIfExists('medium_screen_registration_wizard', $data ?? [], null);
        $this->setIfExists('small_screen_registration_wizard', $data ?? [], null);
        $this->setIfExists('map_data', $data ?? [], null);
        $this->setIfExists('decimal_separator', $data ?? [], null);
        $this->setIfExists('grouping_separator', $data ?? [], null);
        $this->setIfExists('date_format', $data ?? [], null);
        $this->setIfExists('time_format', $data ?? [], null);
        $this->setIfExists('time_zone_id', $data ?? [], null);
        $this->setIfExists('distance_unit', $data ?? [], null);
        $this->setIfExists('root_url', $data ?? [], null);
        $this->setIfExists('api_url', $data ?? [], null);
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('max_image_width', $data ?? [], null);
        $this->setIfExists('max_image_height', $data ?? [], null);
        $this->setIfExists('max_upload_size', $data ?? [], null);
        $this->setIfExists('jpeg_quality', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('allowed_locales', $data ?? [], null);
        $this->setIfExists('current_locale', $data ?? [], null);
        $this->setIfExists('default_locale', $data ?? [], null);
        $this->setIfExists('resource_cache_key', $data ?? [], null);
        $this->setIfExists('apple_store_url', $data ?? [], null);
        $this->setIfExists('play_store_url', $data ?? [], null);
        $this->setIfExists('hide_user_search_in_menu', $data ?? [], null);
        $this->setIfExists('device_activation_mode', $data ?? [], null);
        $this->setIfExists('theme', $data ?? [], null);
        $this->setIfExists('header', $data ?? [], null);
        $this->setIfExists('footer', $data ?? [], null);
        $this->setIfExists('shopping_cart_web_shop_count', $data ?? [], null);
        $this->setIfExists('application_name', $data ?? [], null);
        $this->setIfExists('application_username', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cyclos_version
     *
     * @return string|null
     */
    public function getCyclosVersion()
    {
        return $this->container['cyclos_version'];
    }

    /**
     * Sets cyclos_version
     *
     * @param string|null $cyclos_version The version of the Cyclos server. It will of the form x.y[.z]
     *
     * @return self
     */
    public function setCyclosVersion($cyclos_version)
    {
        if (is_null($cyclos_version)) {
            throw new \InvalidArgumentException('non-nullable cyclos_version cannot be null');
        }
        $this->container['cyclos_version'] = $cyclos_version;

        return $this;
    }

    /**
     * Gets cyclos_revision
     *
     * @return string|null
     */
    public function getCyclosRevision()
    {
        return $this->container['cyclos_revision'];
    }

    /**
     * Sets cyclos_revision
     *
     * @param string|null $cyclos_revision The git revision hash of the Cyclos compilation.
     *
     * @return self
     */
    public function setCyclosRevision($cyclos_revision)
    {
        if (is_null($cyclos_revision)) {
            throw new \InvalidArgumentException('non-nullable cyclos_revision cannot be null');
        }
        $this->container['cyclos_revision'] = $cyclos_revision;

        return $this;
    }

    /**
     * Gets license_key
     *
     * @return string|null
     */
    public function getLicenseKey()
    {
        return $this->container['license_key'];
    }

    /**
     * Sets license_key
     *
     * @param string|null $license_key The Cyclos license key.
     *
     * @return self
     */
    public function setLicenseKey($license_key)
    {
        if (is_null($license_key)) {
            throw new \InvalidArgumentException('non-nullable license_key cannot be null');
        }
        $this->container['license_key'] = $license_key;

        return $this;
    }

    /**
     * Gets licensee
     *
     * @return string|null
     */
    public function getLicensee()
    {
        return $this->container['licensee'];
    }

    /**
     * Sets licensee
     *
     * @param string|null $licensee The organization to which this Cyclos instance is licensed to.
     *
     * @return self
     */
    public function setLicensee($licensee)
    {
        if (is_null($licensee)) {
            throw new \InvalidArgumentException('non-nullable licensee cannot be null');
        }
        $this->container['licensee'] = $licensee;

        return $this;
    }

    /**
     * Gets current_client_time
     *
     * @return \DateTime|null
     */
    public function getCurrentClientTime()
    {
        return $this->container['current_client_time'];
    }

    /**
     * Sets current_client_time
     *
     * @param \DateTime|null $current_client_time The current time in the the user's time zone.
     *
     * @return self
     */
    public function setCurrentClientTime($current_client_time)
    {
        if (is_null($current_client_time)) {
            throw new \InvalidArgumentException('non-nullable current_client_time cannot be null');
        }
        $this->container['current_client_time'] = $current_client_time;

        return $this;
    }

    /**
     * Gets auth
     *
     * @return \OpenAPI\Client\Model\Auth|null
     */
    public function getAuth()
    {
        return $this->container['auth'];
    }

    /**
     * Sets auth
     *
     * @param \OpenAPI\Client\Model\Auth|null $auth auth
     *
     * @return self
     */
    public function setAuth($auth)
    {
        if (is_null($auth)) {
            throw new \InvalidArgumentException('non-nullable auth cannot be null');
        }
        $this->container['auth'] = $auth;

        return $this;
    }

    /**
     * Gets data_for_login
     *
     * @return \OpenAPI\Client\Model\DataForLogin|null
     */
    public function getDataForLogin()
    {
        return $this->container['data_for_login'];
    }

    /**
     * Sets data_for_login
     *
     * @param \OpenAPI\Client\Model\DataForLogin|null $data_for_login data_for_login
     *
     * @return self
     */
    public function setDataForLogin($data_for_login)
    {
        if (is_null($data_for_login)) {
            throw new \InvalidArgumentException('non-nullable data_for_login cannot be null');
        }
        $this->container['data_for_login'] = $data_for_login;

        return $this;
    }

    /**
     * Gets public_registration_groups
     *
     * @return \OpenAPI\Client\Model\GroupForRegistration[]|null
     */
    public function getPublicRegistrationGroups()
    {
        return $this->container['public_registration_groups'];
    }

    /**
     * Sets public_registration_groups
     *
     * @param \OpenAPI\Client\Model\GroupForRegistration[]|null $public_registration_groups Groups that can be used for a public registration. Not returned for logged users. Also, not returned when a registration wizard is required.
     *
     * @return self
     */
    public function setPublicRegistrationGroups($public_registration_groups)
    {
        if (is_null($public_registration_groups)) {
            throw new \InvalidArgumentException('non-nullable public_registration_groups cannot be null');
        }
        $this->container['public_registration_groups'] = $public_registration_groups;

        return $this;
    }

    /**
     * Gets large_screen_registration_wizard
     *
     * @return \OpenAPI\Client\Model\Wizard|null
     */
    public function getLargeScreenRegistrationWizard()
    {
        return $this->container['large_screen_registration_wizard'];
    }

    /**
     * Sets large_screen_registration_wizard
     *
     * @param \OpenAPI\Client\Model\Wizard|null $large_screen_registration_wizard large_screen_registration_wizard
     *
     * @return self
     */
    public function setLargeScreenRegistrationWizard($large_screen_registration_wizard)
    {
        if (is_null($large_screen_registration_wizard)) {
            throw new \InvalidArgumentException('non-nullable large_screen_registration_wizard cannot be null');
        }
        $this->container['large_screen_registration_wizard'] = $large_screen_registration_wizard;

        return $this;
    }

    /**
     * Gets medium_screen_registration_wizard
     *
     * @return \OpenAPI\Client\Model\Wizard|null
     */
    public function getMediumScreenRegistrationWizard()
    {
        return $this->container['medium_screen_registration_wizard'];
    }

    /**
     * Sets medium_screen_registration_wizard
     *
     * @param \OpenAPI\Client\Model\Wizard|null $medium_screen_registration_wizard medium_screen_registration_wizard
     *
     * @return self
     */
    public function setMediumScreenRegistrationWizard($medium_screen_registration_wizard)
    {
        if (is_null($medium_screen_registration_wizard)) {
            throw new \InvalidArgumentException('non-nullable medium_screen_registration_wizard cannot be null');
        }
        $this->container['medium_screen_registration_wizard'] = $medium_screen_registration_wizard;

        return $this;
    }

    /**
     * Gets small_screen_registration_wizard
     *
     * @return \OpenAPI\Client\Model\Wizard|null
     */
    public function getSmallScreenRegistrationWizard()
    {
        return $this->container['small_screen_registration_wizard'];
    }

    /**
     * Sets small_screen_registration_wizard
     *
     * @param \OpenAPI\Client\Model\Wizard|null $small_screen_registration_wizard small_screen_registration_wizard
     *
     * @return self
     */
    public function setSmallScreenRegistrationWizard($small_screen_registration_wizard)
    {
        if (is_null($small_screen_registration_wizard)) {
            throw new \InvalidArgumentException('non-nullable small_screen_registration_wizard cannot be null');
        }
        $this->container['small_screen_registration_wizard'] = $small_screen_registration_wizard;

        return $this;
    }

    /**
     * Gets map_data
     *
     * @return \OpenAPI\Client\Model\MapData|null
     */
    public function getMapData()
    {
        return $this->container['map_data'];
    }

    /**
     * Sets map_data
     *
     * @param \OpenAPI\Client\Model\MapData|null $map_data map_data
     *
     * @return self
     */
    public function setMapData($map_data)
    {
        if (is_null($map_data)) {
            throw new \InvalidArgumentException('non-nullable map_data cannot be null');
        }
        $this->container['map_data'] = $map_data;

        return $this;
    }

    /**
     * Gets decimal_separator
     *
     * @return string|null
     */
    public function getDecimalSeparator()
    {
        return $this->container['decimal_separator'];
    }

    /**
     * Sets decimal_separator
     *
     * @param string|null $decimal_separator The character used to specify the decimal point
     *
     * @return self
     */
    public function setDecimalSeparator($decimal_separator)
    {
        if (is_null($decimal_separator)) {
            throw new \InvalidArgumentException('non-nullable decimal_separator cannot be null');
        }
        $this->container['decimal_separator'] = $decimal_separator;

        return $this;
    }

    /**
     * Gets grouping_separator
     *
     * @return string|null
     */
    public function getGroupingSeparator()
    {
        return $this->container['grouping_separator'];
    }

    /**
     * Sets grouping_separator
     *
     * @param string|null $grouping_separator The character used to separate thousands.
     *
     * @return self
     */
    public function setGroupingSeparator($grouping_separator)
    {
        if (is_null($grouping_separator)) {
            throw new \InvalidArgumentException('non-nullable grouping_separator cannot be null');
        }
        $this->container['grouping_separator'] = $grouping_separator;

        return $this;
    }

    /**
     * Gets date_format
     *
     * @return string|null
     */
    public function getDateFormat()
    {
        return $this->container['date_format'];
    }

    /**
     * Sets date_format
     *
     * @param string|null $date_format The pattern string used to format dates. The following are the letters used in each supported pattern: * dd: The day of the month; * MM: The month ranging from 1 to 12; * yyyy: The full year number.
     *
     * @return self
     */
    public function setDateFormat($date_format)
    {
        if (is_null($date_format)) {
            throw new \InvalidArgumentException('non-nullable date_format cannot be null');
        }
        $this->container['date_format'] = $date_format;

        return $this;
    }

    /**
     * Gets time_format
     *
     * @return string|null
     */
    public function getTimeFormat()
    {
        return $this->container['time_format'];
    }

    /**
     * Sets time_format
     *
     * @param string|null $time_format The pattern string used to format time. The following are the letters used in each supported pattern: * hh: The hour of the morning or afternoon (12-hour clock); * HH: The hour of the day (24-hour clock); * mm: The minute within the hour; * a: Marker to idicate whether the hour (hh) is before or after noon.
     *
     * @return self
     */
    public function setTimeFormat($time_format)
    {
        if (is_null($time_format)) {
            throw new \InvalidArgumentException('non-nullable time_format cannot be null');
        }
        $this->container['time_format'] = $time_format;

        return $this;
    }

    /**
     * Gets time_zone_id
     *
     * @return string|null
     */
    public function getTimeZoneId()
    {
        return $this->container['time_zone_id'];
    }

    /**
     * Sets time_zone_id
     *
     * @param string|null $time_zone_id The time zone ID set in the configuration (e.g `Europe/Amsterdam`)
     *
     * @return self
     */
    public function setTimeZoneId($time_zone_id)
    {
        if (is_null($time_zone_id)) {
            throw new \InvalidArgumentException('non-nullable time_zone_id cannot be null');
        }
        $this->container['time_zone_id'] = $time_zone_id;

        return $this;
    }

    /**
     * Gets distance_unit
     *
     * @return \OpenAPI\Client\Model\DistanceUnitEnum|null
     */
    public function getDistanceUnit()
    {
        return $this->container['distance_unit'];
    }

    /**
     * Sets distance_unit
     *
     * @param \OpenAPI\Client\Model\DistanceUnitEnum|null $distance_unit distance_unit
     *
     * @return self
     */
    public function setDistanceUnit($distance_unit)
    {
        if (is_null($distance_unit)) {
            throw new \InvalidArgumentException('non-nullable distance_unit cannot be null');
        }
        $this->container['distance_unit'] = $distance_unit;

        return $this;
    }

    /**
     * Gets root_url
     *
     * @return string|null
     */
    public function getRootUrl()
    {
        return $this->container['root_url'];
    }

    /**
     * Sets root_url
     *
     * @param string|null $root_url The main URL set in the configuration
     *
     * @return self
     */
    public function setRootUrl($root_url)
    {
        if (is_null($root_url)) {
            throw new \InvalidArgumentException('non-nullable root_url cannot be null');
        }
        $this->container['root_url'] = $root_url;

        return $this;
    }

    /**
     * Gets api_url
     *
     * @return string|null
     */
    public function getApiUrl()
    {
        return $this->container['api_url'];
    }

    /**
     * Sets api_url
     *
     * @param string|null $api_url The public API URL for this Cyclos instance
     *
     * @return self
     */
    public function setApiUrl($api_url)
    {
        if (is_null($api_url)) {
            throw new \InvalidArgumentException('non-nullable api_url cannot be null');
        }
        $this->container['api_url'] = $api_url;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country The ISO 3166-1 alpha-2 country code, as set in the configuration
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets max_image_width
     *
     * @return int|null
     */
    public function getMaxImageWidth()
    {
        return $this->container['max_image_width'];
    }

    /**
     * Sets max_image_width
     *
     * @param int|null $max_image_width Maximum width (in pixels) for uploaded images
     *
     * @return self
     */
    public function setMaxImageWidth($max_image_width)
    {
        if (is_null($max_image_width)) {
            throw new \InvalidArgumentException('non-nullable max_image_width cannot be null');
        }
        $this->container['max_image_width'] = $max_image_width;

        return $this;
    }

    /**
     * Gets max_image_height
     *
     * @return int|null
     */
    public function getMaxImageHeight()
    {
        return $this->container['max_image_height'];
    }

    /**
     * Sets max_image_height
     *
     * @param int|null $max_image_height Maximum height (in pixels) for uploaded images
     *
     * @return self
     */
    public function setMaxImageHeight($max_image_height)
    {
        if (is_null($max_image_height)) {
            throw new \InvalidArgumentException('non-nullable max_image_height cannot be null');
        }
        $this->container['max_image_height'] = $max_image_height;

        return $this;
    }

    /**
     * Gets max_upload_size
     *
     * @return int|null
     */
    public function getMaxUploadSize()
    {
        return $this->container['max_upload_size'];
    }

    /**
     * Sets max_upload_size
     *
     * @param int|null $max_upload_size Maximum size (in bytes) for uploaded files
     *
     * @return self
     */
    public function setMaxUploadSize($max_upload_size)
    {
        if (is_null($max_upload_size)) {
            throw new \InvalidArgumentException('non-nullable max_upload_size cannot be null');
        }
        $this->container['max_upload_size'] = $max_upload_size;

        return $this;
    }

    /**
     * Gets jpeg_quality
     *
     * @return int|null
     */
    public function getJpegQuality()
    {
        return $this->container['jpeg_quality'];
    }

    /**
     * Sets jpeg_quality
     *
     * @param int|null $jpeg_quality Quality for JPEG image types (higher means better quality)
     *
     * @return self
     */
    public function setJpegQuality($jpeg_quality)
    {
        if (is_null($jpeg_quality)) {
            throw new \InvalidArgumentException('non-nullable jpeg_quality cannot be null');
        }
        $this->container['jpeg_quality'] = $jpeg_quality;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \OpenAPI\Client\Model\Language|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \OpenAPI\Client\Model\Language|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets allowed_locales
     *
     * @return \OpenAPI\Client\Model\UserLocale[]|null
     */
    public function getAllowedLocales()
    {
        return $this->container['allowed_locales'];
    }

    /**
     * Sets allowed_locales
     *
     * @param \OpenAPI\Client\Model\UserLocale[]|null $allowed_locales The locales the user can select, for example to change the language.
     *
     * @return self
     */
    public function setAllowedLocales($allowed_locales)
    {
        if (is_null($allowed_locales)) {
            throw new \InvalidArgumentException('non-nullable allowed_locales cannot be null');
        }
        $this->container['allowed_locales'] = $allowed_locales;

        return $this;
    }

    /**
     * Gets current_locale
     *
     * @return \OpenAPI\Client\Model\UserLocale|null
     */
    public function getCurrentLocale()
    {
        return $this->container['current_locale'];
    }

    /**
     * Sets current_locale
     *
     * @param \OpenAPI\Client\Model\UserLocale|null $current_locale current_locale
     *
     * @return self
     */
    public function setCurrentLocale($current_locale)
    {
        if (is_null($current_locale)) {
            throw new \InvalidArgumentException('non-nullable current_locale cannot be null');
        }
        $this->container['current_locale'] = $current_locale;

        return $this;
    }

    /**
     * Gets default_locale
     *
     * @return \OpenAPI\Client\Model\UserLocale|null
     */
    public function getDefaultLocale()
    {
        return $this->container['default_locale'];
    }

    /**
     * Sets default_locale
     *
     * @param \OpenAPI\Client\Model\UserLocale|null $default_locale default_locale
     *
     * @return self
     */
    public function setDefaultLocale($default_locale)
    {
        if (is_null($default_locale)) {
            throw new \InvalidArgumentException('non-nullable default_locale cannot be null');
        }
        $this->container['default_locale'] = $default_locale;

        return $this;
    }

    /**
     * Gets resource_cache_key
     *
     * @return string|null
     */
    public function getResourceCacheKey()
    {
        return $this->container['resource_cache_key'];
    }

    /**
     * Sets resource_cache_key
     *
     * @param string|null $resource_cache_key A new key is generated after each server restart
     *
     * @return self
     */
    public function setResourceCacheKey($resource_cache_key)
    {
        if (is_null($resource_cache_key)) {
            throw new \InvalidArgumentException('non-nullable resource_cache_key cannot be null');
        }
        $this->container['resource_cache_key'] = $resource_cache_key;

        return $this;
    }

    /**
     * Gets apple_store_url
     *
     * @return string|null
     */
    public function getAppleStoreUrl()
    {
        return $this->container['apple_store_url'];
    }

    /**
     * Sets apple_store_url
     *
     * @param string|null $apple_store_url The mobile app url in the Apple store.
     *
     * @return self
     */
    public function setAppleStoreUrl($apple_store_url)
    {
        if (is_null($apple_store_url)) {
            throw new \InvalidArgumentException('non-nullable apple_store_url cannot be null');
        }
        $this->container['apple_store_url'] = $apple_store_url;

        return $this;
    }

    /**
     * Gets play_store_url
     *
     * @return string|null
     */
    public function getPlayStoreUrl()
    {
        return $this->container['play_store_url'];
    }

    /**
     * Sets play_store_url
     *
     * @param string|null $play_store_url The mobile app url in the Play store.
     *
     * @return self
     */
    public function setPlayStoreUrl($play_store_url)
    {
        if (is_null($play_store_url)) {
            throw new \InvalidArgumentException('non-nullable play_store_url cannot be null');
        }
        $this->container['play_store_url'] = $play_store_url;

        return $this;
    }

    /**
     * Gets hide_user_search_in_menu
     *
     * @return bool|null
     */
    public function getHideUserSearchInMenu()
    {
        return $this->container['hide_user_search_in_menu'];
    }

    /**
     * Sets hide_user_search_in_menu
     *
     * @param bool|null $hide_user_search_in_menu Whether the search users action must be shown or not in the menu. If the user doesn't have permission to search other users (`permissions.users.search`) then this flag will be `true`. Otherwise it depends on the configuration
     *
     * @return self
     */
    public function setHideUserSearchInMenu($hide_user_search_in_menu)
    {
        if (is_null($hide_user_search_in_menu)) {
            throw new \InvalidArgumentException('non-nullable hide_user_search_in_menu cannot be null');
        }
        $this->container['hide_user_search_in_menu'] = $hide_user_search_in_menu;

        return $this;
    }

    /**
     * Gets device_activation_mode
     *
     * @return \OpenAPI\Client\Model\DeviceActivationModeEnum|null
     */
    public function getDeviceActivationMode()
    {
        return $this->container['device_activation_mode'];
    }

    /**
     * Sets device_activation_mode
     *
     * @param \OpenAPI\Client\Model\DeviceActivationModeEnum|null $device_activation_mode device_activation_mode
     *
     * @return self
     */
    public function setDeviceActivationMode($device_activation_mode)
    {
        if (is_null($device_activation_mode)) {
            throw new \InvalidArgumentException('non-nullable device_activation_mode cannot be null');
        }
        $this->container['device_activation_mode'] = $device_activation_mode;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return \OpenAPI\Client\Model\ThemeUIElement|null
     * @deprecated
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param \OpenAPI\Client\Model\ThemeUIElement|null $theme theme
     *
     * @return self
     * @deprecated
     */
    public function setTheme($theme)
    {
        if (is_null($theme)) {
            throw new \InvalidArgumentException('non-nullable theme cannot be null');
        }
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets header
     *
     * @return \OpenAPI\Client\Model\TranslatableUIElementWithContent|null
     * @deprecated
     */
    public function getHeader()
    {
        return $this->container['header'];
    }

    /**
     * Sets header
     *
     * @param \OpenAPI\Client\Model\TranslatableUIElementWithContent|null $header header
     *
     * @return self
     * @deprecated
     */
    public function setHeader($header)
    {
        if (is_null($header)) {
            throw new \InvalidArgumentException('non-nullable header cannot be null');
        }
        $this->container['header'] = $header;

        return $this;
    }

    /**
     * Gets footer
     *
     * @return \OpenAPI\Client\Model\TranslatableUIElementWithContent|null
     * @deprecated
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     *
     * @param \OpenAPI\Client\Model\TranslatableUIElementWithContent|null $footer footer
     *
     * @return self
     * @deprecated
     */
    public function setFooter($footer)
    {
        if (is_null($footer)) {
            throw new \InvalidArgumentException('non-nullable footer cannot be null');
        }
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets shopping_cart_web_shop_count
     *
     * @return int|null
     */
    public function getShoppingCartWebShopCount()
    {
        return $this->container['shopping_cart_web_shop_count'];
    }

    /**
     * Sets shopping_cart_web_shop_count
     *
     * @param int|null $shopping_cart_web_shop_count The total number of webshop ads present in the shopping cart. Not returned for guests.
     *
     * @return self
     */
    public function setShoppingCartWebShopCount($shopping_cart_web_shop_count)
    {
        if (is_null($shopping_cart_web_shop_count)) {
            throw new \InvalidArgumentException('non-nullable shopping_cart_web_shop_count cannot be null');
        }
        $this->container['shopping_cart_web_shop_count'] = $shopping_cart_web_shop_count;

        return $this;
    }

    /**
     * Gets application_name
     *
     * @return string|null
     */
    public function getApplicationName()
    {
        return $this->container['application_name'];
    }

    /**
     * Sets application_name
     *
     * @param string|null $application_name The configured name of the application
     *
     * @return self
     */
    public function setApplicationName($application_name)
    {
        if (is_null($application_name)) {
            throw new \InvalidArgumentException('non-nullable application_name cannot be null');
        }
        $this->container['application_name'] = $application_name;

        return $this;
    }

    /**
     * Gets application_username
     *
     * @return string|null
     */
    public function getApplicationUsername()
    {
        return $this->container['application_username'];
    }

    /**
     * Sets application_username
     *
     * @param string|null $application_username An username used by the application to be displayed for example in system messages or accounts
     *
     * @return self
     */
    public function setApplicationUsername($application_username)
    {
        if (is_null($application_username)) {
            throw new \InvalidArgumentException('non-nullable application_username cannot be null');
        }
        $this->container['application_username'] = $application_username;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


