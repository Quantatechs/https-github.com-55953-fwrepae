<?php
/**
 * VouchersQueryFilters
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VouchersQueryFilters Class Doc Comment
 *
 * @category Class
 * @description Definitions for searching vouchers as admin
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VouchersQueryFilters implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VouchersQueryFilters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'page' => 'int',
        'page_size' => 'int',
        'skip_total_count' => 'bool',
        'amount_range' => 'float[]',
        'creation_period' => '\DateTime[]',
        'expiration_period' => '\DateTime[]',
        'token' => 'string',
        'types' => 'string[]',
        'statuses' => '\OpenAPI\Client\Model\VoucherStatusEnum[]',
        'creation_type' => '\OpenAPI\Client\Model\VoucherCreationTypeEnum',
        'order_by' => '\OpenAPI\Client\Model\VoucherOrderByEnum',
        'email' => 'string',
        'mobile_phone' => 'string',
        'printed' => 'bool',
        'buyer' => 'string',
        'buyer_groups' => 'string[]',
        'transaction_user' => 'string',
        'transaction_user_groups' => 'string[]',
        'transaction_period' => '\DateTime[]',
        'custom_fields' => 'string[]',
        'redeemer' => 'string',
        'redeemer_groups' => 'string[]',
        'redeem_period' => '\DateTime[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'page' => null,
        'page_size' => null,
        'skip_total_count' => null,
        'amount_range' => 'number',
        'creation_period' => 'date-time',
        'expiration_period' => 'date-time',
        'token' => null,
        'types' => null,
        'statuses' => null,
        'creation_type' => null,
        'order_by' => null,
        'email' => null,
        'mobile_phone' => null,
        'printed' => null,
        'buyer' => null,
        'buyer_groups' => null,
        'transaction_user' => null,
        'transaction_user_groups' => null,
        'transaction_period' => 'date-time',
        'custom_fields' => null,
        'redeemer' => null,
        'redeemer_groups' => null,
        'redeem_period' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'page' => false,
        'page_size' => false,
        'skip_total_count' => false,
        'amount_range' => false,
        'creation_period' => false,
        'expiration_period' => false,
        'token' => false,
        'types' => false,
        'statuses' => false,
        'creation_type' => false,
        'order_by' => false,
        'email' => false,
        'mobile_phone' => false,
        'printed' => false,
        'buyer' => false,
        'buyer_groups' => false,
        'transaction_user' => false,
        'transaction_user_groups' => false,
        'transaction_period' => false,
        'custom_fields' => false,
        'redeemer' => false,
        'redeemer_groups' => false,
        'redeem_period' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'page' => 'page',
        'page_size' => 'pageSize',
        'skip_total_count' => 'skipTotalCount',
        'amount_range' => 'amountRange',
        'creation_period' => 'creationPeriod',
        'expiration_period' => 'expirationPeriod',
        'token' => 'token',
        'types' => 'types',
        'statuses' => 'statuses',
        'creation_type' => 'creationType',
        'order_by' => 'orderBy',
        'email' => 'email',
        'mobile_phone' => 'mobilePhone',
        'printed' => 'printed',
        'buyer' => 'buyer',
        'buyer_groups' => 'buyerGroups',
        'transaction_user' => 'transactionUser',
        'transaction_user_groups' => 'transactionUserGroups',
        'transaction_period' => 'transactionPeriod',
        'custom_fields' => 'customFields',
        'redeemer' => 'redeemer',
        'redeemer_groups' => 'redeemerGroups',
        'redeem_period' => 'redeemPeriod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'page' => 'setPage',
        'page_size' => 'setPageSize',
        'skip_total_count' => 'setSkipTotalCount',
        'amount_range' => 'setAmountRange',
        'creation_period' => 'setCreationPeriod',
        'expiration_period' => 'setExpirationPeriod',
        'token' => 'setToken',
        'types' => 'setTypes',
        'statuses' => 'setStatuses',
        'creation_type' => 'setCreationType',
        'order_by' => 'setOrderBy',
        'email' => 'setEmail',
        'mobile_phone' => 'setMobilePhone',
        'printed' => 'setPrinted',
        'buyer' => 'setBuyer',
        'buyer_groups' => 'setBuyerGroups',
        'transaction_user' => 'setTransactionUser',
        'transaction_user_groups' => 'setTransactionUserGroups',
        'transaction_period' => 'setTransactionPeriod',
        'custom_fields' => 'setCustomFields',
        'redeemer' => 'setRedeemer',
        'redeemer_groups' => 'setRedeemerGroups',
        'redeem_period' => 'setRedeemPeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'page' => 'getPage',
        'page_size' => 'getPageSize',
        'skip_total_count' => 'getSkipTotalCount',
        'amount_range' => 'getAmountRange',
        'creation_period' => 'getCreationPeriod',
        'expiration_period' => 'getExpirationPeriod',
        'token' => 'getToken',
        'types' => 'getTypes',
        'statuses' => 'getStatuses',
        'creation_type' => 'getCreationType',
        'order_by' => 'getOrderBy',
        'email' => 'getEmail',
        'mobile_phone' => 'getMobilePhone',
        'printed' => 'getPrinted',
        'buyer' => 'getBuyer',
        'buyer_groups' => 'getBuyerGroups',
        'transaction_user' => 'getTransactionUser',
        'transaction_user_groups' => 'getTransactionUserGroups',
        'transaction_period' => 'getTransactionPeriod',
        'custom_fields' => 'getCustomFields',
        'redeemer' => 'getRedeemer',
        'redeemer_groups' => 'getRedeemerGroups',
        'redeem_period' => 'getRedeemPeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('page', $data ?? [], null);
        $this->setIfExists('page_size', $data ?? [], null);
        $this->setIfExists('skip_total_count', $data ?? [], null);
        $this->setIfExists('amount_range', $data ?? [], null);
        $this->setIfExists('creation_period', $data ?? [], null);
        $this->setIfExists('expiration_period', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('types', $data ?? [], null);
        $this->setIfExists('statuses', $data ?? [], null);
        $this->setIfExists('creation_type', $data ?? [], null);
        $this->setIfExists('order_by', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('mobile_phone', $data ?? [], null);
        $this->setIfExists('printed', $data ?? [], null);
        $this->setIfExists('buyer', $data ?? [], null);
        $this->setIfExists('buyer_groups', $data ?? [], null);
        $this->setIfExists('transaction_user', $data ?? [], null);
        $this->setIfExists('transaction_user_groups', $data ?? [], null);
        $this->setIfExists('transaction_period', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('redeemer', $data ?? [], null);
        $this->setIfExists('redeemer_groups', $data ?? [], null);
        $this->setIfExists('redeem_period', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets page
     *
     * @return int|null
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int|null $page The page number (zero-based) of the search. The default value is zero.
     *
     * @return self
     */
    public function setPage($page)
    {
        if (is_null($page)) {
            throw new \InvalidArgumentException('non-nullable page cannot be null');
        }
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int|null
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int|null $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.
     *
     * @return self
     */
    public function setPageSize($page_size)
    {
        if (is_null($page_size)) {
            throw new \InvalidArgumentException('non-nullable page_size cannot be null');
        }
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets skip_total_count
     *
     * @return bool|null
     */
    public function getSkipTotalCount()
    {
        return $this->container['skip_total_count'];
    }

    /**
     * Sets skip_total_count
     *
     * @param bool|null $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit.
     *
     * @return self
     */
    public function setSkipTotalCount($skip_total_count)
    {
        if (is_null($skip_total_count)) {
            throw new \InvalidArgumentException('non-nullable skip_total_count cannot be null');
        }
        $this->container['skip_total_count'] = $skip_total_count;

        return $this;
    }

    /**
     * Gets amount_range
     *
     * @return float[]|null
     */
    public function getAmountRange()
    {
        return $this->container['amount_range'];
    }

    /**
     * Sets amount_range
     *
     * @param float[]|null $amount_range The minimum / maximum voucher amount
     *
     * @return self
     */
    public function setAmountRange($amount_range)
    {
        if (is_null($amount_range)) {
            throw new \InvalidArgumentException('non-nullable amount_range cannot be null');
        }
        $this->container['amount_range'] = $amount_range;

        return $this;
    }

    /**
     * Gets creation_period
     *
     * @return \DateTime[]|null
     */
    public function getCreationPeriod()
    {
        return $this->container['creation_period'];
    }

    /**
     * Sets creation_period
     *
     * @param \DateTime[]|null $creation_period The minimum / maximum voucher creation date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return self
     */
    public function setCreationPeriod($creation_period)
    {
        if (is_null($creation_period)) {
            throw new \InvalidArgumentException('non-nullable creation_period cannot be null');
        }
        $this->container['creation_period'] = $creation_period;

        return $this;
    }

    /**
     * Gets expiration_period
     *
     * @return \DateTime[]|null
     */
    public function getExpirationPeriod()
    {
        return $this->container['expiration_period'];
    }

    /**
     * Sets expiration_period
     *
     * @param \DateTime[]|null $expiration_period The minimum / maximum voucher expiration date. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return self
     */
    public function setExpirationPeriod($expiration_period)
    {
        if (is_null($expiration_period)) {
            throw new \InvalidArgumentException('non-nullable expiration_period cannot be null');
        }
        $this->container['expiration_period'] = $expiration_period;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token The voucher token (with or without mask)
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets types
     *
     * @return string[]|null
     */
    public function getTypes()
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param string[]|null $types The ids or internal names of voucher types
     *
     * @return self
     */
    public function setTypes($types)
    {
        if (is_null($types)) {
            throw new \InvalidArgumentException('non-nullable types cannot be null');
        }
        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets statuses
     *
     * @return \OpenAPI\Client\Model\VoucherStatusEnum[]|null
     */
    public function getStatuses()
    {
        return $this->container['statuses'];
    }

    /**
     * Sets statuses
     *
     * @param \OpenAPI\Client\Model\VoucherStatusEnum[]|null $statuses statuses
     *
     * @return self
     */
    public function setStatuses($statuses)
    {
        if (is_null($statuses)) {
            throw new \InvalidArgumentException('non-nullable statuses cannot be null');
        }
        $this->container['statuses'] = $statuses;

        return $this;
    }

    /**
     * Gets creation_type
     *
     * @return \OpenAPI\Client\Model\VoucherCreationTypeEnum|null
     */
    public function getCreationType()
    {
        return $this->container['creation_type'];
    }

    /**
     * Sets creation_type
     *
     * @param \OpenAPI\Client\Model\VoucherCreationTypeEnum|null $creation_type creation_type
     *
     * @return self
     */
    public function setCreationType($creation_type)
    {
        if (is_null($creation_type)) {
            throw new \InvalidArgumentException('non-nullable creation_type cannot be null');
        }
        $this->container['creation_type'] = $creation_type;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return \OpenAPI\Client\Model\VoucherOrderByEnum|null
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param \OpenAPI\Client\Model\VoucherOrderByEnum|null $order_by order_by
     *
     * @return self
     */
    public function setOrderBy($order_by)
    {
        if (is_null($order_by)) {
            throw new \InvalidArgumentException('non-nullable order_by cannot be null');
        }
        $this->container['order_by'] = $order_by;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The e-mail to which vouchers were either sent or had the PIN sent
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone The mobile phone to which vouchers had the PIN sent via SMS
     *
     * @return self
     */
    public function setMobilePhone($mobile_phone)
    {
        if (is_null($mobile_phone)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone cannot be null');
        }
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets printed
     *
     * @return bool|null
     */
    public function getPrinted()
    {
        return $this->container['printed'];
    }

    /**
     * Sets printed
     *
     * @param bool|null $printed If it is passed, filter if the voucher was printed or not.
     *
     * @return self
     */
    public function setPrinted($printed)
    {
        if (is_null($printed)) {
            throw new \InvalidArgumentException('non-nullable printed cannot be null');
        }
        $this->container['printed'] = $printed;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return string|null
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param string|null $buyer The buyer of the voucher. A user identification value, such as id, username, e-mail, phone, etc. Id is always allowed, others depend on Cyclos configuration. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets), for example, `'1234567890`;
     *
     * @return self
     */
    public function setBuyer($buyer)
    {
        if (is_null($buyer)) {
            throw new \InvalidArgumentException('non-nullable buyer cannot be null');
        }
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets buyer_groups
     *
     * @return string[]|null
     */
    public function getBuyerGroups()
    {
        return $this->container['buyer_groups'];
    }

    /**
     * Sets buyer_groups
     *
     * @param string[]|null $buyer_groups The ids or internal names of buyers groups
     *
     * @return self
     */
    public function setBuyerGroups($buyer_groups)
    {
        if (is_null($buyer_groups)) {
            throw new \InvalidArgumentException('non-nullable buyer_groups cannot be null');
        }
        $this->container['buyer_groups'] = $buyer_groups;

        return $this;
    }

    /**
     * Gets transaction_user
     *
     * @return string|null
     */
    public function getTransactionUser()
    {
        return $this->container['transaction_user'];
    }

    /**
     * Sets transaction_user
     *
     * @param string|null $transaction_user A user that has performed at least one redeem or top-up for the voucher. A user identification value, such as id, username, e-mail, phone, etc. Id is always allowed, others depend on Cyclos configuration. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets), for example, `'1234567890`;
     *
     * @return self
     */
    public function setTransactionUser($transaction_user)
    {
        if (is_null($transaction_user)) {
            throw new \InvalidArgumentException('non-nullable transaction_user cannot be null');
        }
        $this->container['transaction_user'] = $transaction_user;

        return $this;
    }

    /**
     * Gets transaction_user_groups
     *
     * @return string[]|null
     */
    public function getTransactionUserGroups()
    {
        return $this->container['transaction_user_groups'];
    }

    /**
     * Sets transaction_user_groups
     *
     * @param string[]|null $transaction_user_groups The ids or internal names of groups of users that performed at least one redeem or top-up for the voucher.
     *
     * @return self
     */
    public function setTransactionUserGroups($transaction_user_groups)
    {
        if (is_null($transaction_user_groups)) {
            throw new \InvalidArgumentException('non-nullable transaction_user_groups cannot be null');
        }
        $this->container['transaction_user_groups'] = $transaction_user_groups;

        return $this;
    }

    /**
     * Gets transaction_period
     *
     * @return \DateTime[]|null
     */
    public function getTransactionPeriod()
    {
        return $this->container['transaction_period'];
    }

    /**
     * Sets transaction_period
     *
     * @param \DateTime[]|null $transaction_period The minimum / maximum date for a transaction in this voucher. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return self
     */
    public function setTransactionPeriod($transaction_period)
    {
        if (is_null($transaction_period)) {
            throw new \InvalidArgumentException('non-nullable transaction_period cannot be null');
        }
        $this->container['transaction_period'] = $transaction_period;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return string[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param string[]|null $custom_fields Voucher custom field values used as filters. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by : (colon).  For example, `customFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, customFields=field1:valueA|valueB. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `customFields=tradeType:offer|search,extraDate:2000-01-01|2001-12-31` would match results whose custom field with internal name `tradeType` is either `offer` or `search`, and whose `extraDate` is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `customFields=extraDate:|2001-12-31`. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the  corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `customFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `customFields=dynamic:'business`.
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets redeemer
     *
     * @return string|null
     * @deprecated
     */
    public function getRedeemer()
    {
        return $this->container['redeemer'];
    }

    /**
     * Sets redeemer
     *
     * @param string|null $redeemer Use `transactionUser` instead.
     *
     * @return self
     * @deprecated
     */
    public function setRedeemer($redeemer)
    {
        if (is_null($redeemer)) {
            throw new \InvalidArgumentException('non-nullable redeemer cannot be null');
        }
        $this->container['redeemer'] = $redeemer;

        return $this;
    }

    /**
     * Gets redeemer_groups
     *
     * @return string[]|null
     * @deprecated
     */
    public function getRedeemerGroups()
    {
        return $this->container['redeemer_groups'];
    }

    /**
     * Sets redeemer_groups
     *
     * @param string[]|null $redeemer_groups Use `transactionUserGroups` instead.
     *
     * @return self
     * @deprecated
     */
    public function setRedeemerGroups($redeemer_groups)
    {
        if (is_null($redeemer_groups)) {
            throw new \InvalidArgumentException('non-nullable redeemer_groups cannot be null');
        }
        $this->container['redeemer_groups'] = $redeemer_groups;

        return $this;
    }

    /**
     * Gets redeem_period
     *
     * @return \DateTime[]|null
     * @deprecated
     */
    public function getRedeemPeriod()
    {
        return $this->container['redeem_period'];
    }

    /**
     * Sets redeem_period
     *
     * @param \DateTime[]|null $redeem_period Use `transactionPeriod` instead
     *
     * @return self
     * @deprecated
     */
    public function setRedeemPeriod($redeem_period)
    {
        if (is_null($redeem_period)) {
            throw new \InvalidArgumentException('non-nullable redeem_period cannot be null');
        }
        $this->container['redeem_period'] = $redeem_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


