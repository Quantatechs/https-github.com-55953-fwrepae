<?php
/**
 * AccountBalanceLimitsData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AccountBalanceLimitsData Class Doc Comment
 *
 * @category Class
 * @description Data regarding the lower and upper limits of a user account.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountBalanceLimitsData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountBalanceLimitsData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'credit_limit' => 'float',
        'custom_credit_limit' => 'bool',
        'upper_credit_limit' => 'float',
        'custom_upper_credit_limit' => 'bool',
        'account' => '\OpenAPI\Client\Model\AccountWithCurrency',
        'user' => '\OpenAPI\Client\Model\User',
        'editable' => 'bool',
        'default_credit_limit' => 'float',
        'default_upper_credit_limit' => 'float',
        'history' => '\OpenAPI\Client\Model\AccountBalanceLimitsLog[]',
        'confirmation_password_input' => '\OpenAPI\Client\Model\AccountBalanceLimitsDataAllOfConfirmationPasswordInput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'credit_limit' => 'number',
        'custom_credit_limit' => null,
        'upper_credit_limit' => 'number',
        'custom_upper_credit_limit' => null,
        'account' => null,
        'user' => null,
        'editable' => null,
        'default_credit_limit' => 'number',
        'default_upper_credit_limit' => 'number',
        'history' => null,
        'confirmation_password_input' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'credit_limit' => false,
        'custom_credit_limit' => false,
        'upper_credit_limit' => false,
        'custom_upper_credit_limit' => false,
        'account' => false,
        'user' => false,
        'editable' => false,
        'default_credit_limit' => false,
        'default_upper_credit_limit' => false,
        'history' => false,
        'confirmation_password_input' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'credit_limit' => 'creditLimit',
        'custom_credit_limit' => 'customCreditLimit',
        'upper_credit_limit' => 'upperCreditLimit',
        'custom_upper_credit_limit' => 'customUpperCreditLimit',
        'account' => 'account',
        'user' => 'user',
        'editable' => 'editable',
        'default_credit_limit' => 'defaultCreditLimit',
        'default_upper_credit_limit' => 'defaultUpperCreditLimit',
        'history' => 'history',
        'confirmation_password_input' => 'confirmationPasswordInput'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'credit_limit' => 'setCreditLimit',
        'custom_credit_limit' => 'setCustomCreditLimit',
        'upper_credit_limit' => 'setUpperCreditLimit',
        'custom_upper_credit_limit' => 'setCustomUpperCreditLimit',
        'account' => 'setAccount',
        'user' => 'setUser',
        'editable' => 'setEditable',
        'default_credit_limit' => 'setDefaultCreditLimit',
        'default_upper_credit_limit' => 'setDefaultUpperCreditLimit',
        'history' => 'setHistory',
        'confirmation_password_input' => 'setConfirmationPasswordInput'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'credit_limit' => 'getCreditLimit',
        'custom_credit_limit' => 'getCustomCreditLimit',
        'upper_credit_limit' => 'getUpperCreditLimit',
        'custom_upper_credit_limit' => 'getCustomUpperCreditLimit',
        'account' => 'getAccount',
        'user' => 'getUser',
        'editable' => 'getEditable',
        'default_credit_limit' => 'getDefaultCreditLimit',
        'default_upper_credit_limit' => 'getDefaultUpperCreditLimit',
        'history' => 'getHistory',
        'confirmation_password_input' => 'getConfirmationPasswordInput'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('credit_limit', $data ?? [], null);
        $this->setIfExists('custom_credit_limit', $data ?? [], null);
        $this->setIfExists('upper_credit_limit', $data ?? [], null);
        $this->setIfExists('custom_upper_credit_limit', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('editable', $data ?? [], null);
        $this->setIfExists('default_credit_limit', $data ?? [], null);
        $this->setIfExists('default_upper_credit_limit', $data ?? [], null);
        $this->setIfExists('history', $data ?? [], null);
        $this->setIfExists('confirmation_password_input', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets credit_limit
     *
     * @return float|null
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param float|null $credit_limit The lower (negative) credit limit.
     *
     * @return self
     */
    public function setCreditLimit($credit_limit)
    {
        if (is_null($credit_limit)) {
            throw new \InvalidArgumentException('non-nullable credit_limit cannot be null');
        }
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets custom_credit_limit
     *
     * @return bool|null
     */
    public function getCustomCreditLimit()
    {
        return $this->container['custom_credit_limit'];
    }

    /**
     * Sets custom_credit_limit
     *
     * @param bool|null $custom_credit_limit Indicates whether the credit limit is customized for this account or if it is the default value.
     *
     * @return self
     */
    public function setCustomCreditLimit($custom_credit_limit)
    {
        if (is_null($custom_credit_limit)) {
            throw new \InvalidArgumentException('non-nullable custom_credit_limit cannot be null');
        }
        $this->container['custom_credit_limit'] = $custom_credit_limit;

        return $this;
    }

    /**
     * Gets upper_credit_limit
     *
     * @return float|null
     */
    public function getUpperCreditLimit()
    {
        return $this->container['upper_credit_limit'];
    }

    /**
     * Sets upper_credit_limit
     *
     * @param float|null $upper_credit_limit The upper (positive) credit limit. When this value is `null` the account has no upper limit (is unlimited).
     *
     * @return self
     */
    public function setUpperCreditLimit($upper_credit_limit)
    {
        if (is_null($upper_credit_limit)) {
            throw new \InvalidArgumentException('non-nullable upper_credit_limit cannot be null');
        }
        $this->container['upper_credit_limit'] = $upper_credit_limit;

        return $this;
    }

    /**
     * Gets custom_upper_credit_limit
     *
     * @return bool|null
     */
    public function getCustomUpperCreditLimit()
    {
        return $this->container['custom_upper_credit_limit'];
    }

    /**
     * Sets custom_upper_credit_limit
     *
     * @param bool|null $custom_upper_credit_limit Indicates whether the upper credit limit is customized for this account or if it is the default value.
     *
     * @return self
     */
    public function setCustomUpperCreditLimit($custom_upper_credit_limit)
    {
        if (is_null($custom_upper_credit_limit)) {
            throw new \InvalidArgumentException('non-nullable custom_upper_credit_limit cannot be null');
        }
        $this->container['custom_upper_credit_limit'] = $custom_upper_credit_limit;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Model\AccountWithCurrency|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Model\AccountWithCurrency|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\User|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\User|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets editable
     *
     * @return bool|null
     */
    public function getEditable()
    {
        return $this->container['editable'];
    }

    /**
     * Sets editable
     *
     * @param bool|null $editable Can the authenticated user manage the limits of this account?
     *
     * @return self
     */
    public function setEditable($editable)
    {
        if (is_null($editable)) {
            throw new \InvalidArgumentException('non-nullable editable cannot be null');
        }
        $this->container['editable'] = $editable;

        return $this;
    }

    /**
     * Gets default_credit_limit
     *
     * @return float|null
     */
    public function getDefaultCreditLimit()
    {
        return $this->container['default_credit_limit'];
    }

    /**
     * Sets default_credit_limit
     *
     * @param float|null $default_credit_limit The default credit limit from the user products.
     *
     * @return self
     */
    public function setDefaultCreditLimit($default_credit_limit)
    {
        if (is_null($default_credit_limit)) {
            throw new \InvalidArgumentException('non-nullable default_credit_limit cannot be null');
        }
        $this->container['default_credit_limit'] = $default_credit_limit;

        return $this;
    }

    /**
     * Gets default_upper_credit_limit
     *
     * @return float|null
     */
    public function getDefaultUpperCreditLimit()
    {
        return $this->container['default_upper_credit_limit'];
    }

    /**
     * Sets default_upper_credit_limit
     *
     * @param float|null $default_upper_credit_limit The default upper credit limit from the user products.
     *
     * @return self
     */
    public function setDefaultUpperCreditLimit($default_upper_credit_limit)
    {
        if (is_null($default_upper_credit_limit)) {
            throw new \InvalidArgumentException('non-nullable default_upper_credit_limit cannot be null');
        }
        $this->container['default_upper_credit_limit'] = $default_upper_credit_limit;

        return $this;
    }

    /**
     * Gets history
     *
     * @return \OpenAPI\Client\Model\AccountBalanceLimitsLog[]|null
     */
    public function getHistory()
    {
        return $this->container['history'];
    }

    /**
     * Sets history
     *
     * @param \OpenAPI\Client\Model\AccountBalanceLimitsLog[]|null $history The history of balance limit changes.
     *
     * @return self
     */
    public function setHistory($history)
    {
        if (is_null($history)) {
            throw new \InvalidArgumentException('non-nullable history cannot be null');
        }
        $this->container['history'] = $history;

        return $this;
    }

    /**
     * Gets confirmation_password_input
     *
     * @return \OpenAPI\Client\Model\AccountBalanceLimitsDataAllOfConfirmationPasswordInput|null
     */
    public function getConfirmationPasswordInput()
    {
        return $this->container['confirmation_password_input'];
    }

    /**
     * Sets confirmation_password_input
     *
     * @param \OpenAPI\Client\Model\AccountBalanceLimitsDataAllOfConfirmationPasswordInput|null $confirmation_password_input confirmation_password_input
     *
     * @return self
     */
    public function setConfirmationPasswordInput($confirmation_password_input)
    {
        if (is_null($confirmation_password_input)) {
            throw new \InvalidArgumentException('non-nullable confirmation_password_input cannot be null');
        }
        $this->container['confirmation_password_input'] = $confirmation_password_input;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


