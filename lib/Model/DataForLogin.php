<?php
/**
 * DataForLogin
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DataForLogin Class Doc Comment
 *
 * @category Class
 * @description Contains data useful for a login form, as well as forgot password
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DataForLogin implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataForLogin';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'access_password_type' => '\OpenAPI\Client\Model\EntityReference',
        'principal_types' => '\OpenAPI\Client\Model\PrincipalTypeInput[]',
        'default_principal_type' => 'string',
        'extra_forgot_password_principal_types' => '\OpenAPI\Client\Model\PrincipalTypeInput[]',
        'login_password_input' => '\OpenAPI\Client\Model\PasswordInput',
        'pin_active' => 'bool',
        'device_confirmation' => '\OpenAPI\Client\Model\DeviceConfirmationView',
        'identity_providers' => '\OpenAPI\Client\Model\IdentityProvider[]',
        'forgot_password_captcha_input' => '\OpenAPI\Client\Model\CaptchaInput',
        'forgot_password_mediums' => '\OpenAPI\Client\Model\SendMediumEnum[]',
        'verification_code_seconds' => 'int',
        'forgot_password_captcha_provider' => '\OpenAPI\Client\Model\CaptchaProviderEnum'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'access_password_type' => null,
        'principal_types' => null,
        'default_principal_type' => null,
        'extra_forgot_password_principal_types' => null,
        'login_password_input' => null,
        'pin_active' => null,
        'device_confirmation' => null,
        'identity_providers' => null,
        'forgot_password_captcha_input' => null,
        'forgot_password_mediums' => null,
        'verification_code_seconds' => null,
        'forgot_password_captcha_provider' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'access_password_type' => false,
        'principal_types' => false,
        'default_principal_type' => false,
        'extra_forgot_password_principal_types' => false,
        'login_password_input' => false,
        'pin_active' => false,
        'device_confirmation' => false,
        'identity_providers' => false,
        'forgot_password_captcha_input' => false,
        'forgot_password_mediums' => false,
        'verification_code_seconds' => false,
        'forgot_password_captcha_provider' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'access_password_type' => 'accessPasswordType',
        'principal_types' => 'principalTypes',
        'default_principal_type' => 'defaultPrincipalType',
        'extra_forgot_password_principal_types' => 'extraForgotPasswordPrincipalTypes',
        'login_password_input' => 'loginPasswordInput',
        'pin_active' => 'pinActive',
        'device_confirmation' => 'deviceConfirmation',
        'identity_providers' => 'identityProviders',
        'forgot_password_captcha_input' => 'forgotPasswordCaptchaInput',
        'forgot_password_mediums' => 'forgotPasswordMediums',
        'verification_code_seconds' => 'verificationCodeSeconds',
        'forgot_password_captcha_provider' => 'forgotPasswordCaptchaProvider'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'access_password_type' => 'setAccessPasswordType',
        'principal_types' => 'setPrincipalTypes',
        'default_principal_type' => 'setDefaultPrincipalType',
        'extra_forgot_password_principal_types' => 'setExtraForgotPasswordPrincipalTypes',
        'login_password_input' => 'setLoginPasswordInput',
        'pin_active' => 'setPinActive',
        'device_confirmation' => 'setDeviceConfirmation',
        'identity_providers' => 'setIdentityProviders',
        'forgot_password_captcha_input' => 'setForgotPasswordCaptchaInput',
        'forgot_password_mediums' => 'setForgotPasswordMediums',
        'verification_code_seconds' => 'setVerificationCodeSeconds',
        'forgot_password_captcha_provider' => 'setForgotPasswordCaptchaProvider'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'access_password_type' => 'getAccessPasswordType',
        'principal_types' => 'getPrincipalTypes',
        'default_principal_type' => 'getDefaultPrincipalType',
        'extra_forgot_password_principal_types' => 'getExtraForgotPasswordPrincipalTypes',
        'login_password_input' => 'getLoginPasswordInput',
        'pin_active' => 'getPinActive',
        'device_confirmation' => 'getDeviceConfirmation',
        'identity_providers' => 'getIdentityProviders',
        'forgot_password_captcha_input' => 'getForgotPasswordCaptchaInput',
        'forgot_password_mediums' => 'getForgotPasswordMediums',
        'verification_code_seconds' => 'getVerificationCodeSeconds',
        'forgot_password_captcha_provider' => 'getForgotPasswordCaptchaProvider'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('access_password_type', $data ?? [], null);
        $this->setIfExists('principal_types', $data ?? [], null);
        $this->setIfExists('default_principal_type', $data ?? [], null);
        $this->setIfExists('extra_forgot_password_principal_types', $data ?? [], null);
        $this->setIfExists('login_password_input', $data ?? [], null);
        $this->setIfExists('pin_active', $data ?? [], null);
        $this->setIfExists('device_confirmation', $data ?? [], null);
        $this->setIfExists('identity_providers', $data ?? [], null);
        $this->setIfExists('forgot_password_captcha_input', $data ?? [], null);
        $this->setIfExists('forgot_password_mediums', $data ?? [], null);
        $this->setIfExists('verification_code_seconds', $data ?? [], null);
        $this->setIfExists('forgot_password_captcha_provider', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets access_password_type
     *
     * @return \OpenAPI\Client\Model\EntityReference|null
     */
    public function getAccessPasswordType()
    {
        return $this->container['access_password_type'];
    }

    /**
     * Sets access_password_type
     *
     * @param \OpenAPI\Client\Model\EntityReference|null $access_password_type access_password_type
     *
     * @return self
     */
    public function setAccessPasswordType($access_password_type)
    {
        if (is_null($access_password_type)) {
            throw new \InvalidArgumentException('non-nullable access_password_type cannot be null');
        }
        $this->container['access_password_type'] = $access_password_type;

        return $this;
    }

    /**
     * Gets principal_types
     *
     * @return \OpenAPI\Client\Model\PrincipalTypeInput[]|null
     */
    public function getPrincipalTypes()
    {
        return $this->container['principal_types'];
    }

    /**
     * Sets principal_types
     *
     * @param \OpenAPI\Client\Model\PrincipalTypeInput[]|null $principal_types The identification methods accepted for login
     *
     * @return self
     */
    public function setPrincipalTypes($principal_types)
    {
        if (is_null($principal_types)) {
            throw new \InvalidArgumentException('non-nullable principal_types cannot be null');
        }
        $this->container['principal_types'] = $principal_types;

        return $this;
    }

    /**
     * Gets default_principal_type
     *
     * @return string|null
     */
    public function getDefaultPrincipalType()
    {
        return $this->container['default_principal_type'];
    }

    /**
     * Sets default_principal_type
     *
     * @param string|null $default_principal_type The internal name of the identification method that is marked as default for the current channel configuration. This is optional, and if there is no default, all possible identification methods will be attempted for login.
     *
     * @return self
     */
    public function setDefaultPrincipalType($default_principal_type)
    {
        if (is_null($default_principal_type)) {
            throw new \InvalidArgumentException('non-nullable default_principal_type cannot be null');
        }
        $this->container['default_principal_type'] = $default_principal_type;

        return $this;
    }

    /**
     * Gets extra_forgot_password_principal_types
     *
     * @return \OpenAPI\Client\Model\PrincipalTypeInput[]|null
     */
    public function getExtraForgotPasswordPrincipalTypes()
    {
        return $this->container['extra_forgot_password_principal_types'];
    }

    /**
     * Sets extra_forgot_password_principal_types
     *
     * @param \OpenAPI\Client\Model\PrincipalTypeInput[]|null $extra_forgot_password_principal_types The additional identification methods also accepted for the forgotten password request.
     *
     * @return self
     */
    public function setExtraForgotPasswordPrincipalTypes($extra_forgot_password_principal_types)
    {
        if (is_null($extra_forgot_password_principal_types)) {
            throw new \InvalidArgumentException('non-nullable extra_forgot_password_principal_types cannot be null');
        }
        $this->container['extra_forgot_password_principal_types'] = $extra_forgot_password_principal_types;

        return $this;
    }

    /**
     * Gets login_password_input
     *
     * @return \OpenAPI\Client\Model\PasswordInput|null
     */
    public function getLoginPasswordInput()
    {
        return $this->container['login_password_input'];
    }

    /**
     * Sets login_password_input
     *
     * @param \OpenAPI\Client\Model\PasswordInput|null $login_password_input login_password_input
     *
     * @return self
     */
    public function setLoginPasswordInput($login_password_input)
    {
        if (is_null($login_password_input)) {
            throw new \InvalidArgumentException('non-nullable login_password_input cannot be null');
        }
        $this->container['login_password_input'] = $login_password_input;

        return $this;
    }

    /**
     * Gets pin_active
     *
     * @return bool|null
     */
    public function getPinActive()
    {
        return $this->container['pin_active'];
    }

    /**
     * Sets pin_active
     *
     * @param bool|null $pin_active Whether the given pin, when requesting the data, can be used for login. Only if a `pinId` was given when requesting the data, and the `loginPasswordInput.pinAvailability` is not `disabled`.
     *
     * @return self
     */
    public function setPinActive($pin_active)
    {
        if (is_null($pin_active)) {
            throw new \InvalidArgumentException('non-nullable pin_active cannot be null');
        }
        $this->container['pin_active'] = $pin_active;

        return $this;
    }

    /**
     * Gets device_confirmation
     *
     * @return \OpenAPI\Client\Model\DeviceConfirmationView|null
     */
    public function getDeviceConfirmation()
    {
        return $this->container['device_confirmation'];
    }

    /**
     * Sets device_confirmation
     *
     * @param \OpenAPI\Client\Model\DeviceConfirmationView|null $device_confirmation device_confirmation
     *
     * @return self
     */
    public function setDeviceConfirmation($device_confirmation)
    {
        if (is_null($device_confirmation)) {
            throw new \InvalidArgumentException('non-nullable device_confirmation cannot be null');
        }
        $this->container['device_confirmation'] = $device_confirmation;

        return $this;
    }

    /**
     * Gets identity_providers
     *
     * @return \OpenAPI\Client\Model\IdentityProvider[]|null
     */
    public function getIdentityProviders()
    {
        return $this->container['identity_providers'];
    }

    /**
     * Sets identity_providers
     *
     * @param \OpenAPI\Client\Model\IdentityProvider[]|null $identity_providers The identity providers available for login
     *
     * @return self
     */
    public function setIdentityProviders($identity_providers)
    {
        if (is_null($identity_providers)) {
            throw new \InvalidArgumentException('non-nullable identity_providers cannot be null');
        }
        $this->container['identity_providers'] = $identity_providers;

        return $this;
    }

    /**
     * Gets forgot_password_captcha_input
     *
     * @return \OpenAPI\Client\Model\CaptchaInput|null
     */
    public function getForgotPasswordCaptchaInput()
    {
        return $this->container['forgot_password_captcha_input'];
    }

    /**
     * Sets forgot_password_captcha_input
     *
     * @param \OpenAPI\Client\Model\CaptchaInput|null $forgot_password_captcha_input forgot_password_captcha_input
     *
     * @return self
     */
    public function setForgotPasswordCaptchaInput($forgot_password_captcha_input)
    {
        if (is_null($forgot_password_captcha_input)) {
            throw new \InvalidArgumentException('non-nullable forgot_password_captcha_input cannot be null');
        }
        $this->container['forgot_password_captcha_input'] = $forgot_password_captcha_input;

        return $this;
    }

    /**
     * Gets forgot_password_mediums
     *
     * @return \OpenAPI\Client\Model\SendMediumEnum[]|null
     */
    public function getForgotPasswordMediums()
    {
        return $this->container['forgot_password_mediums'];
    }

    /**
     * Sets forgot_password_mediums
     *
     * @param \OpenAPI\Client\Model\SendMediumEnum[]|null $forgot_password_mediums If the forgot password request is enabled, returns the mediums the user can choose to receive the confirmation key or code. If nothing is returned, forgot password is not enabled.
     *
     * @return self
     */
    public function setForgotPasswordMediums($forgot_password_mediums)
    {
        if (is_null($forgot_password_mediums)) {
            throw new \InvalidArgumentException('non-nullable forgot_password_mediums cannot be null');
        }
        $this->container['forgot_password_mediums'] = $forgot_password_mediums;

        return $this;
    }

    /**
     * Gets verification_code_seconds
     *
     * @return int|null
     */
    public function getVerificationCodeSeconds()
    {
        return $this->container['verification_code_seconds'];
    }

    /**
     * Sets verification_code_seconds
     *
     * @param int|null $verification_code_seconds The number of seconds a verification code may be requested again.
     *
     * @return self
     */
    public function setVerificationCodeSeconds($verification_code_seconds)
    {
        if (is_null($verification_code_seconds)) {
            throw new \InvalidArgumentException('non-nullable verification_code_seconds cannot be null');
        }
        $this->container['verification_code_seconds'] = $verification_code_seconds;

        return $this;
    }

    /**
     * Gets forgot_password_captcha_provider
     *
     * @return \OpenAPI\Client\Model\CaptchaProviderEnum|null
     * @deprecated
     */
    public function getForgotPasswordCaptchaProvider()
    {
        return $this->container['forgot_password_captcha_provider'];
    }

    /**
     * Sets forgot_password_captcha_provider
     *
     * @param \OpenAPI\Client\Model\CaptchaProviderEnum|null $forgot_password_captcha_provider forgot_password_captcha_provider
     *
     * @return self
     * @deprecated
     */
    public function setForgotPasswordCaptchaProvider($forgot_password_captcha_provider)
    {
        if (is_null($forgot_password_captcha_provider)) {
            throw new \InvalidArgumentException('non-nullable forgot_password_captcha_provider cannot be null');
        }
        $this->container['forgot_password_captcha_provider'] = $forgot_password_captcha_provider;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


