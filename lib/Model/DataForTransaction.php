<?php
/**
 * DataForTransaction
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DataForTransaction Class Doc Comment
 *
 * @category Class
 * @description Contains basic configuration data used when performing a transaction. The path that returns it will normally receive the main transaction owner (system or user), plus 2 other optional parameters: - The other subject (system or user) that will either receive or perform   the payment. - The payment type. There are 3 possibilities when returning: - When the other subject wasn&#39;t selected. In this case, will contain very   few information, mostly the accounts. - The other subject is selected, but not a payment type. If so, the   payment types will be returned, but not information on how to pick   the subject user, or the accounts. - Both other subject and payment type are selected: In this case   only the payment type data will be returned
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DataForTransaction implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataForTransaction';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'accounts' => '\OpenAPI\Client\Model\AccountWithStatus[]',
        'from_kind' => '\OpenAPI\Client\Model\AccountKind',
        'from_user' => '\OpenAPI\Client\Model\User',
        'to_kind' => '\OpenAPI\Client\Model\AccountKind',
        'to_user' => '\OpenAPI\Client\Model\User',
        'payment_type_data' => '\OpenAPI\Client\Model\TransactionTypeData',
        'payment_types' => '\OpenAPI\Client\Model\TransferTypeWithCurrency[]',
        'allow_scan_qr_code' => 'bool',
        'allow_autocomplete' => 'bool',
        'allow_contacts' => 'bool',
        'allowed_users' => '\OpenAPI\Client\Model\User[]',
        'principal_types' => '\OpenAPI\Client\Model\PrincipalTypeInput[]',
        'default_principal_type' => 'string',
        'default_id_method' => '\OpenAPI\Client\Model\IdentificationMethodEnum'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'accounts' => null,
        'from_kind' => null,
        'from_user' => null,
        'to_kind' => null,
        'to_user' => null,
        'payment_type_data' => null,
        'payment_types' => null,
        'allow_scan_qr_code' => null,
        'allow_autocomplete' => null,
        'allow_contacts' => null,
        'allowed_users' => null,
        'principal_types' => null,
        'default_principal_type' => null,
        'default_id_method' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'accounts' => false,
        'from_kind' => false,
        'from_user' => false,
        'to_kind' => false,
        'to_user' => false,
        'payment_type_data' => false,
        'payment_types' => false,
        'allow_scan_qr_code' => false,
        'allow_autocomplete' => false,
        'allow_contacts' => false,
        'allowed_users' => false,
        'principal_types' => false,
        'default_principal_type' => false,
        'default_id_method' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'accounts' => 'accounts',
        'from_kind' => 'fromKind',
        'from_user' => 'fromUser',
        'to_kind' => 'toKind',
        'to_user' => 'toUser',
        'payment_type_data' => 'paymentTypeData',
        'payment_types' => 'paymentTypes',
        'allow_scan_qr_code' => 'allowScanQrCode',
        'allow_autocomplete' => 'allowAutocomplete',
        'allow_contacts' => 'allowContacts',
        'allowed_users' => 'allowedUsers',
        'principal_types' => 'principalTypes',
        'default_principal_type' => 'defaultPrincipalType',
        'default_id_method' => 'defaultIdMethod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'accounts' => 'setAccounts',
        'from_kind' => 'setFromKind',
        'from_user' => 'setFromUser',
        'to_kind' => 'setToKind',
        'to_user' => 'setToUser',
        'payment_type_data' => 'setPaymentTypeData',
        'payment_types' => 'setPaymentTypes',
        'allow_scan_qr_code' => 'setAllowScanQrCode',
        'allow_autocomplete' => 'setAllowAutocomplete',
        'allow_contacts' => 'setAllowContacts',
        'allowed_users' => 'setAllowedUsers',
        'principal_types' => 'setPrincipalTypes',
        'default_principal_type' => 'setDefaultPrincipalType',
        'default_id_method' => 'setDefaultIdMethod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'accounts' => 'getAccounts',
        'from_kind' => 'getFromKind',
        'from_user' => 'getFromUser',
        'to_kind' => 'getToKind',
        'to_user' => 'getToUser',
        'payment_type_data' => 'getPaymentTypeData',
        'payment_types' => 'getPaymentTypes',
        'allow_scan_qr_code' => 'getAllowScanQrCode',
        'allow_autocomplete' => 'getAllowAutocomplete',
        'allow_contacts' => 'getAllowContacts',
        'allowed_users' => 'getAllowedUsers',
        'principal_types' => 'getPrincipalTypes',
        'default_principal_type' => 'getDefaultPrincipalType',
        'default_id_method' => 'getDefaultIdMethod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('accounts', $data ?? [], null);
        $this->setIfExists('from_kind', $data ?? [], null);
        $this->setIfExists('from_user', $data ?? [], null);
        $this->setIfExists('to_kind', $data ?? [], null);
        $this->setIfExists('to_user', $data ?? [], null);
        $this->setIfExists('payment_type_data', $data ?? [], null);
        $this->setIfExists('payment_types', $data ?? [], null);
        $this->setIfExists('allow_scan_qr_code', $data ?? [], null);
        $this->setIfExists('allow_autocomplete', $data ?? [], null);
        $this->setIfExists('allow_contacts', $data ?? [], null);
        $this->setIfExists('allowed_users', $data ?? [], null);
        $this->setIfExists('principal_types', $data ?? [], null);
        $this->setIfExists('default_principal_type', $data ?? [], null);
        $this->setIfExists('default_id_method', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets accounts
     *
     * @return \OpenAPI\Client\Model\AccountWithStatus[]|null
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \OpenAPI\Client\Model\AccountWithStatus[]|null $accounts Only returned when the payment type is not selected. Contains the possible accounts which can be used either as source (when performing the payment) or destination (when receiving the payment, on POS).
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        if (is_null($accounts)) {
            throw new \InvalidArgumentException('non-nullable accounts cannot be null');
        }
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets from_kind
     *
     * @return \OpenAPI\Client\Model\AccountKind|null
     */
    public function getFromKind()
    {
        return $this->container['from_kind'];
    }

    /**
     * Sets from_kind
     *
     * @param \OpenAPI\Client\Model\AccountKind|null $from_kind from_kind
     *
     * @return self
     */
    public function setFromKind($from_kind)
    {
        if (is_null($from_kind)) {
            throw new \InvalidArgumentException('non-nullable from_kind cannot be null');
        }
        $this->container['from_kind'] = $from_kind;

        return $this;
    }

    /**
     * Gets from_user
     *
     * @return \OpenAPI\Client\Model\User|null
     */
    public function getFromUser()
    {
        return $this->container['from_user'];
    }

    /**
     * Sets from_user
     *
     * @param \OpenAPI\Client\Model\User|null $from_user from_user
     *
     * @return self
     */
    public function setFromUser($from_user)
    {
        if (is_null($from_user)) {
            throw new \InvalidArgumentException('non-nullable from_user cannot be null');
        }
        $this->container['from_user'] = $from_user;

        return $this;
    }

    /**
     * Gets to_kind
     *
     * @return \OpenAPI\Client\Model\AccountKind|null
     */
    public function getToKind()
    {
        return $this->container['to_kind'];
    }

    /**
     * Sets to_kind
     *
     * @param \OpenAPI\Client\Model\AccountKind|null $to_kind to_kind
     *
     * @return self
     */
    public function setToKind($to_kind)
    {
        if (is_null($to_kind)) {
            throw new \InvalidArgumentException('non-nullable to_kind cannot be null');
        }
        $this->container['to_kind'] = $to_kind;

        return $this;
    }

    /**
     * Gets to_user
     *
     * @return \OpenAPI\Client\Model\User|null
     */
    public function getToUser()
    {
        return $this->container['to_user'];
    }

    /**
     * Sets to_user
     *
     * @param \OpenAPI\Client\Model\User|null $to_user to_user
     *
     * @return self
     */
    public function setToUser($to_user)
    {
        if (is_null($to_user)) {
            throw new \InvalidArgumentException('non-nullable to_user cannot be null');
        }
        $this->container['to_user'] = $to_user;

        return $this;
    }

    /**
     * Gets payment_type_data
     *
     * @return \OpenAPI\Client\Model\TransactionTypeData|null
     */
    public function getPaymentTypeData()
    {
        return $this->container['payment_type_data'];
    }

    /**
     * Sets payment_type_data
     *
     * @param \OpenAPI\Client\Model\TransactionTypeData|null $payment_type_data payment_type_data
     *
     * @return self
     */
    public function setPaymentTypeData($payment_type_data)
    {
        if (is_null($payment_type_data)) {
            throw new \InvalidArgumentException('non-nullable payment_type_data cannot be null');
        }
        $this->container['payment_type_data'] = $payment_type_data;

        return $this;
    }

    /**
     * Gets payment_types
     *
     * @return \OpenAPI\Client\Model\TransferTypeWithCurrency[]|null
     */
    public function getPaymentTypes()
    {
        return $this->container['payment_types'];
    }

    /**
     * Sets payment_types
     *
     * @param \OpenAPI\Client\Model\TransferTypeWithCurrency[]|null $payment_types Only returned when the payment type is not selected. Contains the allowed payment types for a payment between the selected from and to owners.
     *
     * @return self
     */
    public function setPaymentTypes($payment_types)
    {
        if (is_null($payment_types)) {
            throw new \InvalidArgumentException('non-nullable payment_types cannot be null');
        }
        $this->container['payment_types'] = $payment_types;

        return $this;
    }

    /**
     * Gets allow_scan_qr_code
     *
     * @return bool|null
     */
    public function getAllowScanQrCode()
    {
        return $this->container['allow_scan_qr_code'];
    }

    /**
     * Sets allow_scan_qr_code
     *
     * @param bool|null $allow_scan_qr_code Only returned when no subject is selected.Indicates if the QR-code scanning is allowed.
     *
     * @return self
     */
    public function setAllowScanQrCode($allow_scan_qr_code)
    {
        if (is_null($allow_scan_qr_code)) {
            throw new \InvalidArgumentException('non-nullable allow_scan_qr_code cannot be null');
        }
        $this->container['allow_scan_qr_code'] = $allow_scan_qr_code;

        return $this;
    }

    /**
     * Gets allow_autocomplete
     *
     * @return bool|null
     */
    public function getAllowAutocomplete()
    {
        return $this->container['allow_autocomplete'];
    }

    /**
     * Sets allow_autocomplete
     *
     * @param bool|null $allow_autocomplete Only returned when no subject is selected. Indicates whether the payee can be obtaining by freely searching users
     *
     * @return self
     */
    public function setAllowAutocomplete($allow_autocomplete)
    {
        if (is_null($allow_autocomplete)) {
            throw new \InvalidArgumentException('non-nullable allow_autocomplete cannot be null');
        }
        $this->container['allow_autocomplete'] = $allow_autocomplete;

        return $this;
    }

    /**
     * Gets allow_contacts
     *
     * @return bool|null
     */
    public function getAllowContacts()
    {
        return $this->container['allow_contacts'];
    }

    /**
     * Sets allow_contacts
     *
     * @param bool|null $allow_contacts Only returned when no subject is selected. Indicates whether the payee can be obtaining from the contact list
     *
     * @return self
     */
    public function setAllowContacts($allow_contacts)
    {
        if (is_null($allow_contacts)) {
            throw new \InvalidArgumentException('non-nullable allow_contacts cannot be null');
        }
        $this->container['allow_contacts'] = $allow_contacts;

        return $this;
    }

    /**
     * Gets allowed_users
     *
     * @return \OpenAPI\Client\Model\User[]|null
     */
    public function getAllowedUsers()
    {
        return $this->container['allowed_users'];
    }

    /**
     * Sets allowed_users
     *
     * @param \OpenAPI\Client\Model\User[]|null $allowed_users If the authorized user is a restricted operator, it may be that the owner user has defined exactly to which users the operator can pay. If this is the case, this will be the list with such users.
     *
     * @return self
     */
    public function setAllowedUsers($allowed_users)
    {
        if (is_null($allowed_users)) {
            throw new \InvalidArgumentException('non-nullable allowed_users cannot be null');
        }
        $this->container['allowed_users'] = $allowed_users;

        return $this;
    }

    /**
     * Gets principal_types
     *
     * @return \OpenAPI\Client\Model\PrincipalTypeInput[]|null
     */
    public function getPrincipalTypes()
    {
        return $this->container['principal_types'];
    }

    /**
     * Sets principal_types
     *
     * @param \OpenAPI\Client\Model\PrincipalTypeInput[]|null $principal_types Only returned when no subject is selected. The possible principal types that can be used to locate the payee
     *
     * @return self
     */
    public function setPrincipalTypes($principal_types)
    {
        if (is_null($principal_types)) {
            throw new \InvalidArgumentException('non-nullable principal_types cannot be null');
        }
        $this->container['principal_types'] = $principal_types;

        return $this;
    }

    /**
     * Gets default_principal_type
     *
     * @return string|null
     */
    public function getDefaultPrincipalType()
    {
        return $this->container['default_principal_type'];
    }

    /**
     * Sets default_principal_type
     *
     * @param string|null $default_principal_type Only returned when no subject is selected. If the `defaultIdMethod` is `principalType`, contains the internal name or id of the principal type that should be the default. If there is a default, the user should be provided with the option to choose which principal type he's using. If there is no default, all possible principal types will be attempted. In this case, the UI will normally not show the option for which principal type should be used.
     *
     * @return self
     */
    public function setDefaultPrincipalType($default_principal_type)
    {
        if (is_null($default_principal_type)) {
            throw new \InvalidArgumentException('non-nullable default_principal_type cannot be null');
        }
        $this->container['default_principal_type'] = $default_principal_type;

        return $this;
    }

    /**
     * Gets default_id_method
     *
     * @return \OpenAPI\Client\Model\IdentificationMethodEnum|null
     */
    public function getDefaultIdMethod()
    {
        return $this->container['default_id_method'];
    }

    /**
     * Sets default_id_method
     *
     * @param \OpenAPI\Client\Model\IdentificationMethodEnum|null $default_id_method default_id_method
     *
     * @return self
     */
    public function setDefaultIdMethod($default_id_method)
    {
        if (is_null($default_id_method)) {
            throw new \InvalidArgumentException('non-nullable default_id_method cannot be null');
        }
        $this->container['default_id_method'] = $default_id_method;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


