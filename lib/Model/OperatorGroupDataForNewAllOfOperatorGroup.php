<?php
/**
 * OperatorGroupDataForNewAllOfOperatorGroup
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * OperatorGroupDataForNewAllOfOperatorGroup Class Doc Comment
 *
 * @category Class
 * @description The operator group populated with the default fields. This value can be modified and sent back on &#x60;POST /{user}/operator-groups&#x60;.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class OperatorGroupDataForNewAllOfOperatorGroup implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'OperatorGroupDataForNew_allOf_operatorGroup';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'description' => 'string',
        'edit_own_profile' => 'bool',
        'chargeback_payments' => 'bool',
        'messages' => 'bool',
        'notifications' => 'bool',
        'receive_payments' => 'bool',
        'voucher_transactions' => 'bool',
        'request_payments' => 'bool',
        'view_advertisements' => 'bool',
        'manage_advertisements' => 'bool',
        'enable_token' => 'bool',
        'cancel_token' => 'bool',
        'block_token' => 'bool',
        'unblock_token' => 'bool',
        'brokering' => 'bool',
        'restrict_payments_to_users' => 'string[]',
        'operations' => 'string[]',
        'records' => 'string[]',
        'accounts' => 'array<string,\OpenAPI\Client\Model\OperatorGroupAccount>',
        'payments' => 'array<string,\OpenAPI\Client\Model\OperatorGroupPayment>',
        'redeem_vouchers' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'description' => null,
        'edit_own_profile' => null,
        'chargeback_payments' => null,
        'messages' => null,
        'notifications' => null,
        'receive_payments' => null,
        'voucher_transactions' => null,
        'request_payments' => null,
        'view_advertisements' => null,
        'manage_advertisements' => null,
        'enable_token' => null,
        'cancel_token' => null,
        'block_token' => null,
        'unblock_token' => null,
        'brokering' => null,
        'restrict_payments_to_users' => null,
        'operations' => null,
        'records' => null,
        'accounts' => null,
        'payments' => null,
        'redeem_vouchers' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'description' => false,
        'edit_own_profile' => false,
        'chargeback_payments' => false,
        'messages' => false,
        'notifications' => false,
        'receive_payments' => false,
        'voucher_transactions' => false,
        'request_payments' => false,
        'view_advertisements' => false,
        'manage_advertisements' => false,
        'enable_token' => false,
        'cancel_token' => false,
        'block_token' => false,
        'unblock_token' => false,
        'brokering' => false,
        'restrict_payments_to_users' => false,
        'operations' => false,
        'records' => false,
        'accounts' => false,
        'payments' => false,
        'redeem_vouchers' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'description' => 'description',
        'edit_own_profile' => 'editOwnProfile',
        'chargeback_payments' => 'chargebackPayments',
        'messages' => 'messages',
        'notifications' => 'notifications',
        'receive_payments' => 'receivePayments',
        'voucher_transactions' => 'voucherTransactions',
        'request_payments' => 'requestPayments',
        'view_advertisements' => 'viewAdvertisements',
        'manage_advertisements' => 'manageAdvertisements',
        'enable_token' => 'enableToken',
        'cancel_token' => 'cancelToken',
        'block_token' => 'blockToken',
        'unblock_token' => 'unblockToken',
        'brokering' => 'brokering',
        'restrict_payments_to_users' => 'restrictPaymentsToUsers',
        'operations' => 'operations',
        'records' => 'records',
        'accounts' => 'accounts',
        'payments' => 'payments',
        'redeem_vouchers' => 'redeemVouchers'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'description' => 'setDescription',
        'edit_own_profile' => 'setEditOwnProfile',
        'chargeback_payments' => 'setChargebackPayments',
        'messages' => 'setMessages',
        'notifications' => 'setNotifications',
        'receive_payments' => 'setReceivePayments',
        'voucher_transactions' => 'setVoucherTransactions',
        'request_payments' => 'setRequestPayments',
        'view_advertisements' => 'setViewAdvertisements',
        'manage_advertisements' => 'setManageAdvertisements',
        'enable_token' => 'setEnableToken',
        'cancel_token' => 'setCancelToken',
        'block_token' => 'setBlockToken',
        'unblock_token' => 'setUnblockToken',
        'brokering' => 'setBrokering',
        'restrict_payments_to_users' => 'setRestrictPaymentsToUsers',
        'operations' => 'setOperations',
        'records' => 'setRecords',
        'accounts' => 'setAccounts',
        'payments' => 'setPayments',
        'redeem_vouchers' => 'setRedeemVouchers'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'description' => 'getDescription',
        'edit_own_profile' => 'getEditOwnProfile',
        'chargeback_payments' => 'getChargebackPayments',
        'messages' => 'getMessages',
        'notifications' => 'getNotifications',
        'receive_payments' => 'getReceivePayments',
        'voucher_transactions' => 'getVoucherTransactions',
        'request_payments' => 'getRequestPayments',
        'view_advertisements' => 'getViewAdvertisements',
        'manage_advertisements' => 'getManageAdvertisements',
        'enable_token' => 'getEnableToken',
        'cancel_token' => 'getCancelToken',
        'block_token' => 'getBlockToken',
        'unblock_token' => 'getUnblockToken',
        'brokering' => 'getBrokering',
        'restrict_payments_to_users' => 'getRestrictPaymentsToUsers',
        'operations' => 'getOperations',
        'records' => 'getRecords',
        'accounts' => 'getAccounts',
        'payments' => 'getPayments',
        'redeem_vouchers' => 'getRedeemVouchers'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('edit_own_profile', $data ?? [], null);
        $this->setIfExists('chargeback_payments', $data ?? [], null);
        $this->setIfExists('messages', $data ?? [], null);
        $this->setIfExists('notifications', $data ?? [], null);
        $this->setIfExists('receive_payments', $data ?? [], null);
        $this->setIfExists('voucher_transactions', $data ?? [], null);
        $this->setIfExists('request_payments', $data ?? [], null);
        $this->setIfExists('view_advertisements', $data ?? [], null);
        $this->setIfExists('manage_advertisements', $data ?? [], null);
        $this->setIfExists('enable_token', $data ?? [], null);
        $this->setIfExists('cancel_token', $data ?? [], null);
        $this->setIfExists('block_token', $data ?? [], null);
        $this->setIfExists('unblock_token', $data ?? [], null);
        $this->setIfExists('brokering', $data ?? [], null);
        $this->setIfExists('restrict_payments_to_users', $data ?? [], null);
        $this->setIfExists('operations', $data ?? [], null);
        $this->setIfExists('records', $data ?? [], null);
        $this->setIfExists('accounts', $data ?? [], null);
        $this->setIfExists('payments', $data ?? [], null);
        $this->setIfExists('redeem_vouchers', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The operator group name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Optional description of the group
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets edit_own_profile
     *
     * @return bool|null
     */
    public function getEditOwnProfile()
    {
        return $this->container['edit_own_profile'];
    }

    /**
     * Sets edit_own_profile
     *
     * @param bool|null $edit_own_profile Can operators of this group edit their own profile?
     *
     * @return self
     */
    public function setEditOwnProfile($edit_own_profile)
    {
        if (is_null($edit_own_profile)) {
            throw new \InvalidArgumentException('non-nullable edit_own_profile cannot be null');
        }
        $this->container['edit_own_profile'] = $edit_own_profile;

        return $this;
    }

    /**
     * Gets chargeback_payments
     *
     * @return bool|null
     */
    public function getChargebackPayments()
    {
        return $this->container['chargeback_payments'];
    }

    /**
     * Sets chargeback_payments
     *
     * @param bool|null $chargeback_payments Can operators of this group chargeback payments received by the owner?
     *
     * @return self
     */
    public function setChargebackPayments($chargeback_payments)
    {
        if (is_null($chargeback_payments)) {
            throw new \InvalidArgumentException('non-nullable chargeback_payments cannot be null');
        }
        $this->container['chargeback_payments'] = $chargeback_payments;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return bool|null
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param bool|null $messages Can operators of this group access the message box of the owner?
     *
     * @return self
     */
    public function setMessages($messages)
    {
        if (is_null($messages)) {
            throw new \InvalidArgumentException('non-nullable messages cannot be null');
        }
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets notifications
     *
     * @return bool|null
     */
    public function getNotifications()
    {
        return $this->container['notifications'];
    }

    /**
     * Sets notifications
     *
     * @param bool|null $notifications Can operators of this group own notifications?
     *
     * @return self
     */
    public function setNotifications($notifications)
    {
        if (is_null($notifications)) {
            throw new \InvalidArgumentException('non-nullable notifications cannot be null');
        }
        $this->container['notifications'] = $notifications;

        return $this;
    }

    /**
     * Gets receive_payments
     *
     * @return bool|null
     */
    public function getReceivePayments()
    {
        return $this->container['receive_payments'];
    }

    /**
     * Sets receive_payments
     *
     * @param bool|null $receive_payments Can operators of this group receive payments?
     *
     * @return self
     */
    public function setReceivePayments($receive_payments)
    {
        if (is_null($receive_payments)) {
            throw new \InvalidArgumentException('non-nullable receive_payments cannot be null');
        }
        $this->container['receive_payments'] = $receive_payments;

        return $this;
    }

    /**
     * Gets voucher_transactions
     *
     * @return bool|null
     */
    public function getVoucherTransactions()
    {
        return $this->container['voucher_transactions'];
    }

    /**
     * Sets voucher_transactions
     *
     * @param bool|null $voucher_transactions Can operators of this group redeem / top-up vouchers and view transactions?
     *
     * @return self
     */
    public function setVoucherTransactions($voucher_transactions)
    {
        if (is_null($voucher_transactions)) {
            throw new \InvalidArgumentException('non-nullable voucher_transactions cannot be null');
        }
        $this->container['voucher_transactions'] = $voucher_transactions;

        return $this;
    }

    /**
     * Gets request_payments
     *
     * @return bool|null
     */
    public function getRequestPayments()
    {
        return $this->container['request_payments'];
    }

    /**
     * Sets request_payments
     *
     * @param bool|null $request_payments Can operators of this group request payments?
     *
     * @return self
     */
    public function setRequestPayments($request_payments)
    {
        if (is_null($request_payments)) {
            throw new \InvalidArgumentException('non-nullable request_payments cannot be null');
        }
        $this->container['request_payments'] = $request_payments;

        return $this;
    }

    /**
     * Gets view_advertisements
     *
     * @return bool|null
     */
    public function getViewAdvertisements()
    {
        return $this->container['view_advertisements'];
    }

    /**
     * Sets view_advertisements
     *
     * @param bool|null $view_advertisements Can operators of this group view advertisements?
     *
     * @return self
     */
    public function setViewAdvertisements($view_advertisements)
    {
        if (is_null($view_advertisements)) {
            throw new \InvalidArgumentException('non-nullable view_advertisements cannot be null');
        }
        $this->container['view_advertisements'] = $view_advertisements;

        return $this;
    }

    /**
     * Gets manage_advertisements
     *
     * @return bool|null
     */
    public function getManageAdvertisements()
    {
        return $this->container['manage_advertisements'];
    }

    /**
     * Sets manage_advertisements
     *
     * @param bool|null $manage_advertisements Can operators of this group manage advertisements of the owner?
     *
     * @return self
     */
    public function setManageAdvertisements($manage_advertisements)
    {
        if (is_null($manage_advertisements)) {
            throw new \InvalidArgumentException('non-nullable manage_advertisements cannot be null');
        }
        $this->container['manage_advertisements'] = $manage_advertisements;

        return $this;
    }

    /**
     * Gets enable_token
     *
     * @return bool|null
     */
    public function getEnableToken()
    {
        return $this->container['enable_token'];
    }

    /**
     * Sets enable_token
     *
     * @param bool|null $enable_token Can operators of this group have tokens (cards)?
     *
     * @return self
     */
    public function setEnableToken($enable_token)
    {
        if (is_null($enable_token)) {
            throw new \InvalidArgumentException('non-nullable enable_token cannot be null');
        }
        $this->container['enable_token'] = $enable_token;

        return $this;
    }

    /**
     * Gets cancel_token
     *
     * @return bool|null
     */
    public function getCancelToken()
    {
        return $this->container['cancel_token'];
    }

    /**
     * Sets cancel_token
     *
     * @param bool|null $cancel_token Can operators of this group cancel their own tokens (cards)?
     *
     * @return self
     */
    public function setCancelToken($cancel_token)
    {
        if (is_null($cancel_token)) {
            throw new \InvalidArgumentException('non-nullable cancel_token cannot be null');
        }
        $this->container['cancel_token'] = $cancel_token;

        return $this;
    }

    /**
     * Gets block_token
     *
     * @return bool|null
     */
    public function getBlockToken()
    {
        return $this->container['block_token'];
    }

    /**
     * Sets block_token
     *
     * @param bool|null $block_token Can operators of this group block their own tokens (cards)?
     *
     * @return self
     */
    public function setBlockToken($block_token)
    {
        if (is_null($block_token)) {
            throw new \InvalidArgumentException('non-nullable block_token cannot be null');
        }
        $this->container['block_token'] = $block_token;

        return $this;
    }

    /**
     * Gets unblock_token
     *
     * @return bool|null
     */
    public function getUnblockToken()
    {
        return $this->container['unblock_token'];
    }

    /**
     * Sets unblock_token
     *
     * @param bool|null $unblock_token Can operators of this group unblock their own tokens (cards)?
     *
     * @return self
     */
    public function setUnblockToken($unblock_token)
    {
        if (is_null($unblock_token)) {
            throw new \InvalidArgumentException('non-nullable unblock_token cannot be null');
        }
        $this->container['unblock_token'] = $unblock_token;

        return $this;
    }

    /**
     * Gets brokering
     *
     * @return bool|null
     */
    public function getBrokering()
    {
        return $this->container['brokering'];
    }

    /**
     * Sets brokering
     *
     * @param bool|null $brokering Can operators of this group perform brokering operations? This includes full brokering operatations the user is allowed, including user registration, accounts access, payments as user, etc.
     *
     * @return self
     */
    public function setBrokering($brokering)
    {
        if (is_null($brokering)) {
            throw new \InvalidArgumentException('non-nullable brokering cannot be null');
        }
        $this->container['brokering'] = $brokering;

        return $this;
    }

    /**
     * Gets restrict_payments_to_users
     *
     * @return string[]|null
     */
    public function getRestrictPaymentsToUsers()
    {
        return $this->container['restrict_payments_to_users'];
    }

    /**
     * Sets restrict_payments_to_users
     *
     * @param string[]|null $restrict_payments_to_users When set, operators of this group will only be able to perform payments to one of this users
     *
     * @return self
     */
    public function setRestrictPaymentsToUsers($restrict_payments_to_users)
    {
        if (is_null($restrict_payments_to_users)) {
            throw new \InvalidArgumentException('non-nullable restrict_payments_to_users cannot be null');
        }
        $this->container['restrict_payments_to_users'] = $restrict_payments_to_users;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return string[]|null
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param string[]|null $operations Ids / internal names of custom operators that operators of this group will only be able to run
     *
     * @return self
     */
    public function setOperations($operations)
    {
        if (is_null($operations)) {
            throw new \InvalidArgumentException('non-nullable operations cannot be null');
        }
        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets records
     *
     * @return string[]|null
     */
    public function getRecords()
    {
        return $this->container['records'];
    }

    /**
     * Sets records
     *
     * @param string[]|null $records Ids / internal names of record types that operators of this group will only be able to access
     *
     * @return self
     */
    public function setRecords($records)
    {
        if (is_null($records)) {
            throw new \InvalidArgumentException('non-nullable records cannot be null');
        }
        $this->container['records'] = $records;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return array<string,\OpenAPI\Client\Model\OperatorGroupAccount>|null
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param array<string,\OpenAPI\Client\Model\OperatorGroupAccount>|null $accounts Defines how operators access the owner accounts, and defines restrictions on payment notifications. The key is the account type id or internal name.
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        if (is_null($accounts)) {
            throw new \InvalidArgumentException('non-nullable accounts cannot be null');
        }
        $this->container['accounts'] = $accounts;

        return $this;
    }

    /**
     * Gets payments
     *
     * @return array<string,\OpenAPI\Client\Model\OperatorGroupPayment>|null
     */
    public function getPayments()
    {
        return $this->container['payments'];
    }

    /**
     * Sets payments
     *
     * @param array<string,\OpenAPI\Client\Model\OperatorGroupPayment>|null $payments Defines which payment types can be used by operators to perform payments or authorize payments performed by other operators. Also defines the maximum daily amount that can be paid per operator.
     *
     * @return self
     */
    public function setPayments($payments)
    {
        if (is_null($payments)) {
            throw new \InvalidArgumentException('non-nullable payments cannot be null');
        }
        $this->container['payments'] = $payments;

        return $this;
    }

    /**
     * Gets redeem_vouchers
     *
     * @return bool|null
     * @deprecated
     */
    public function getRedeemVouchers()
    {
        return $this->container['redeem_vouchers'];
    }

    /**
     * Sets redeem_vouchers
     *
     * @param bool|null $redeem_vouchers Use `voucherTransactions` instead
     *
     * @return self
     * @deprecated
     */
    public function setRedeemVouchers($redeem_vouchers)
    {
        if (is_null($redeem_vouchers)) {
            throw new \InvalidArgumentException('non-nullable redeem_vouchers cannot be null');
        }
        $this->container['redeem_vouchers'] = $redeem_vouchers;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


