<?php
/**
 * VoucherView
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VoucherView Class Doc Comment
 *
 * @category Class
 * @description Details of a voucher
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VoucherView implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VoucherView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'token' => 'string',
        'status' => '\OpenAPI\Client\Model\VoucherStatusEnum',
        'amount' => 'float',
        'balance' => 'float',
        'email' => 'string',
        'expiration_date' => '\DateTime',
        'type' => '\OpenAPI\Client\Model\VoucherType',
        'creation_type' => '\OpenAPI\Client\Model\VoucherCreationTypeEnum',
        'gift' => 'bool',
        'owner' => '\OpenAPI\Client\Model\VoucherResultAllOfOwner',
        'buyer' => '\OpenAPI\Client\Model\VoucherResultAllOfBuyer',
        'creation_date' => '\DateTime',
        'redeem_after_date' => '\DateTime',
        'redeem_on_week_days' => '\OpenAPI\Client\Model\WeekDayEnum[]',
        'redeemer' => '\OpenAPI\Client\Model\VoucherResultAllOfRedeemer',
        'redeem_by' => '\OpenAPI\Client\Model\VoucherResultAllOfRedeemBy',
        'redeem_date' => '\DateTime',
        'title' => 'string',
        'description' => 'string',
        'send_message' => 'string',
        'buy' => '\OpenAPI\Client\Model\VoucherViewAllOfBuy',
        'redeem_allowed_groups' => '\OpenAPI\Client\Model\Group[]',
        'redeem_allowed_users' => '\OpenAPI\Client\Model\User[]',
        'allow_partial_redeems' => 'bool',
        'pin_status_for_redeem' => '\OpenAPI\Client\Model\VoucherPinStatusForRedeemEnum',
        'pin' => 'string',
        'mobile_phone' => 'string',
        'enable_notifications' => 'bool',
        'can_assign' => 'bool',
        'can_change_expiration_date' => 'bool',
        'can_change_notification_settings' => 'bool',
        'phone_configuration' => '\OpenAPI\Client\Model\VoucherViewAllOfPhoneConfiguration',
        'can_resend_email' => 'bool',
        'can_unblock_pin' => 'bool',
        'can_manage_notification_settings' => 'bool',
        'can_change_pin' => 'bool',
        'require_old_pin_for_change' => 'bool',
        'pin_input' => '\OpenAPI\Client\Model\VoucherViewAllOfPinInput',
        'show_configuration' => 'bool',
        'show_type' => 'bool',
        'show_qr_code' => 'bool',
        'redeem_after_date_reached' => 'bool',
        'expiration_date_comments' => 'string',
        'cancel_action' => '\OpenAPI\Client\Model\VoucherCancelActionEnum',
        'refund' => '\OpenAPI\Client\Model\VoucherViewAllOfRefund',
        'refund_date' => '\DateTime',
        'single_redeem' => '\OpenAPI\Client\Model\VoucherViewAllOfSingleRedeem',
        'has_transactions' => 'bool',
        'export_formats' => '\OpenAPI\Client\Model\ExportFormat[]',
        'confirmation_password_input' => '\OpenAPI\Client\Model\VoucherViewAllOfConfirmationPasswordInput',
        'custom_values' => '\OpenAPI\Client\Model\CustomFieldValue[]',
        'top_up_enabled' => 'bool',
        'redeem' => '\OpenAPI\Client\Model\VoucherViewAllOfRedeem'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'token' => null,
        'status' => null,
        'amount' => 'number',
        'balance' => 'number',
        'email' => null,
        'expiration_date' => 'date-time',
        'type' => null,
        'creation_type' => null,
        'gift' => null,
        'owner' => null,
        'buyer' => null,
        'creation_date' => 'date-time',
        'redeem_after_date' => 'date-time',
        'redeem_on_week_days' => null,
        'redeemer' => null,
        'redeem_by' => null,
        'redeem_date' => 'date-time',
        'title' => null,
        'description' => null,
        'send_message' => null,
        'buy' => null,
        'redeem_allowed_groups' => null,
        'redeem_allowed_users' => null,
        'allow_partial_redeems' => null,
        'pin_status_for_redeem' => null,
        'pin' => null,
        'mobile_phone' => null,
        'enable_notifications' => null,
        'can_assign' => null,
        'can_change_expiration_date' => null,
        'can_change_notification_settings' => null,
        'phone_configuration' => null,
        'can_resend_email' => null,
        'can_unblock_pin' => null,
        'can_manage_notification_settings' => null,
        'can_change_pin' => null,
        'require_old_pin_for_change' => null,
        'pin_input' => null,
        'show_configuration' => null,
        'show_type' => null,
        'show_qr_code' => null,
        'redeem_after_date_reached' => null,
        'expiration_date_comments' => null,
        'cancel_action' => null,
        'refund' => null,
        'refund_date' => 'date-time',
        'single_redeem' => null,
        'has_transactions' => null,
        'export_formats' => null,
        'confirmation_password_input' => null,
        'custom_values' => null,
        'top_up_enabled' => null,
        'redeem' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'token' => false,
        'status' => false,
        'amount' => false,
        'balance' => false,
        'email' => false,
        'expiration_date' => false,
        'type' => false,
        'creation_type' => false,
        'gift' => false,
        'owner' => false,
        'buyer' => false,
        'creation_date' => false,
        'redeem_after_date' => false,
        'redeem_on_week_days' => false,
        'redeemer' => false,
        'redeem_by' => false,
        'redeem_date' => false,
        'title' => false,
        'description' => false,
        'send_message' => false,
        'buy' => false,
        'redeem_allowed_groups' => false,
        'redeem_allowed_users' => false,
        'allow_partial_redeems' => false,
        'pin_status_for_redeem' => false,
        'pin' => false,
        'mobile_phone' => false,
        'enable_notifications' => false,
        'can_assign' => false,
        'can_change_expiration_date' => false,
        'can_change_notification_settings' => false,
        'phone_configuration' => false,
        'can_resend_email' => false,
        'can_unblock_pin' => false,
        'can_manage_notification_settings' => false,
        'can_change_pin' => false,
        'require_old_pin_for_change' => false,
        'pin_input' => false,
        'show_configuration' => false,
        'show_type' => false,
        'show_qr_code' => false,
        'redeem_after_date_reached' => false,
        'expiration_date_comments' => false,
        'cancel_action' => false,
        'refund' => false,
        'refund_date' => false,
        'single_redeem' => false,
        'has_transactions' => false,
        'export_formats' => false,
        'confirmation_password_input' => false,
        'custom_values' => false,
        'top_up_enabled' => false,
        'redeem' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'token' => 'token',
        'status' => 'status',
        'amount' => 'amount',
        'balance' => 'balance',
        'email' => 'email',
        'expiration_date' => 'expirationDate',
        'type' => 'type',
        'creation_type' => 'creationType',
        'gift' => 'gift',
        'owner' => 'owner',
        'buyer' => 'buyer',
        'creation_date' => 'creationDate',
        'redeem_after_date' => 'redeemAfterDate',
        'redeem_on_week_days' => 'redeemOnWeekDays',
        'redeemer' => 'redeemer',
        'redeem_by' => 'redeemBy',
        'redeem_date' => 'redeemDate',
        'title' => 'title',
        'description' => 'description',
        'send_message' => 'sendMessage',
        'buy' => 'buy',
        'redeem_allowed_groups' => 'redeemAllowedGroups',
        'redeem_allowed_users' => 'redeemAllowedUsers',
        'allow_partial_redeems' => 'allowPartialRedeems',
        'pin_status_for_redeem' => 'pinStatusForRedeem',
        'pin' => 'pin',
        'mobile_phone' => 'mobilePhone',
        'enable_notifications' => 'enableNotifications',
        'can_assign' => 'canAssign',
        'can_change_expiration_date' => 'canChangeExpirationDate',
        'can_change_notification_settings' => 'canChangeNotificationSettings',
        'phone_configuration' => 'phoneConfiguration',
        'can_resend_email' => 'canResendEmail',
        'can_unblock_pin' => 'canUnblockPin',
        'can_manage_notification_settings' => 'canManageNotificationSettings',
        'can_change_pin' => 'canChangePin',
        'require_old_pin_for_change' => 'requireOldPinForChange',
        'pin_input' => 'pinInput',
        'show_configuration' => 'showConfiguration',
        'show_type' => 'showType',
        'show_qr_code' => 'showQrCode',
        'redeem_after_date_reached' => 'redeemAfterDateReached',
        'expiration_date_comments' => 'expirationDateComments',
        'cancel_action' => 'cancelAction',
        'refund' => 'refund',
        'refund_date' => 'refundDate',
        'single_redeem' => 'singleRedeem',
        'has_transactions' => 'hasTransactions',
        'export_formats' => 'exportFormats',
        'confirmation_password_input' => 'confirmationPasswordInput',
        'custom_values' => 'customValues',
        'top_up_enabled' => 'topUpEnabled',
        'redeem' => 'redeem'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'token' => 'setToken',
        'status' => 'setStatus',
        'amount' => 'setAmount',
        'balance' => 'setBalance',
        'email' => 'setEmail',
        'expiration_date' => 'setExpirationDate',
        'type' => 'setType',
        'creation_type' => 'setCreationType',
        'gift' => 'setGift',
        'owner' => 'setOwner',
        'buyer' => 'setBuyer',
        'creation_date' => 'setCreationDate',
        'redeem_after_date' => 'setRedeemAfterDate',
        'redeem_on_week_days' => 'setRedeemOnWeekDays',
        'redeemer' => 'setRedeemer',
        'redeem_by' => 'setRedeemBy',
        'redeem_date' => 'setRedeemDate',
        'title' => 'setTitle',
        'description' => 'setDescription',
        'send_message' => 'setSendMessage',
        'buy' => 'setBuy',
        'redeem_allowed_groups' => 'setRedeemAllowedGroups',
        'redeem_allowed_users' => 'setRedeemAllowedUsers',
        'allow_partial_redeems' => 'setAllowPartialRedeems',
        'pin_status_for_redeem' => 'setPinStatusForRedeem',
        'pin' => 'setPin',
        'mobile_phone' => 'setMobilePhone',
        'enable_notifications' => 'setEnableNotifications',
        'can_assign' => 'setCanAssign',
        'can_change_expiration_date' => 'setCanChangeExpirationDate',
        'can_change_notification_settings' => 'setCanChangeNotificationSettings',
        'phone_configuration' => 'setPhoneConfiguration',
        'can_resend_email' => 'setCanResendEmail',
        'can_unblock_pin' => 'setCanUnblockPin',
        'can_manage_notification_settings' => 'setCanManageNotificationSettings',
        'can_change_pin' => 'setCanChangePin',
        'require_old_pin_for_change' => 'setRequireOldPinForChange',
        'pin_input' => 'setPinInput',
        'show_configuration' => 'setShowConfiguration',
        'show_type' => 'setShowType',
        'show_qr_code' => 'setShowQrCode',
        'redeem_after_date_reached' => 'setRedeemAfterDateReached',
        'expiration_date_comments' => 'setExpirationDateComments',
        'cancel_action' => 'setCancelAction',
        'refund' => 'setRefund',
        'refund_date' => 'setRefundDate',
        'single_redeem' => 'setSingleRedeem',
        'has_transactions' => 'setHasTransactions',
        'export_formats' => 'setExportFormats',
        'confirmation_password_input' => 'setConfirmationPasswordInput',
        'custom_values' => 'setCustomValues',
        'top_up_enabled' => 'setTopUpEnabled',
        'redeem' => 'setRedeem'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'token' => 'getToken',
        'status' => 'getStatus',
        'amount' => 'getAmount',
        'balance' => 'getBalance',
        'email' => 'getEmail',
        'expiration_date' => 'getExpirationDate',
        'type' => 'getType',
        'creation_type' => 'getCreationType',
        'gift' => 'getGift',
        'owner' => 'getOwner',
        'buyer' => 'getBuyer',
        'creation_date' => 'getCreationDate',
        'redeem_after_date' => 'getRedeemAfterDate',
        'redeem_on_week_days' => 'getRedeemOnWeekDays',
        'redeemer' => 'getRedeemer',
        'redeem_by' => 'getRedeemBy',
        'redeem_date' => 'getRedeemDate',
        'title' => 'getTitle',
        'description' => 'getDescription',
        'send_message' => 'getSendMessage',
        'buy' => 'getBuy',
        'redeem_allowed_groups' => 'getRedeemAllowedGroups',
        'redeem_allowed_users' => 'getRedeemAllowedUsers',
        'allow_partial_redeems' => 'getAllowPartialRedeems',
        'pin_status_for_redeem' => 'getPinStatusForRedeem',
        'pin' => 'getPin',
        'mobile_phone' => 'getMobilePhone',
        'enable_notifications' => 'getEnableNotifications',
        'can_assign' => 'getCanAssign',
        'can_change_expiration_date' => 'getCanChangeExpirationDate',
        'can_change_notification_settings' => 'getCanChangeNotificationSettings',
        'phone_configuration' => 'getPhoneConfiguration',
        'can_resend_email' => 'getCanResendEmail',
        'can_unblock_pin' => 'getCanUnblockPin',
        'can_manage_notification_settings' => 'getCanManageNotificationSettings',
        'can_change_pin' => 'getCanChangePin',
        'require_old_pin_for_change' => 'getRequireOldPinForChange',
        'pin_input' => 'getPinInput',
        'show_configuration' => 'getShowConfiguration',
        'show_type' => 'getShowType',
        'show_qr_code' => 'getShowQrCode',
        'redeem_after_date_reached' => 'getRedeemAfterDateReached',
        'expiration_date_comments' => 'getExpirationDateComments',
        'cancel_action' => 'getCancelAction',
        'refund' => 'getRefund',
        'refund_date' => 'getRefundDate',
        'single_redeem' => 'getSingleRedeem',
        'has_transactions' => 'getHasTransactions',
        'export_formats' => 'getExportFormats',
        'confirmation_password_input' => 'getConfirmationPasswordInput',
        'custom_values' => 'getCustomValues',
        'top_up_enabled' => 'getTopUpEnabled',
        'redeem' => 'getRedeem'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('creation_type', $data ?? [], null);
        $this->setIfExists('gift', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('buyer', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('redeem_after_date', $data ?? [], null);
        $this->setIfExists('redeem_on_week_days', $data ?? [], null);
        $this->setIfExists('redeemer', $data ?? [], null);
        $this->setIfExists('redeem_by', $data ?? [], null);
        $this->setIfExists('redeem_date', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('send_message', $data ?? [], null);
        $this->setIfExists('buy', $data ?? [], null);
        $this->setIfExists('redeem_allowed_groups', $data ?? [], null);
        $this->setIfExists('redeem_allowed_users', $data ?? [], null);
        $this->setIfExists('allow_partial_redeems', $data ?? [], null);
        $this->setIfExists('pin_status_for_redeem', $data ?? [], null);
        $this->setIfExists('pin', $data ?? [], null);
        $this->setIfExists('mobile_phone', $data ?? [], null);
        $this->setIfExists('enable_notifications', $data ?? [], null);
        $this->setIfExists('can_assign', $data ?? [], null);
        $this->setIfExists('can_change_expiration_date', $data ?? [], null);
        $this->setIfExists('can_change_notification_settings', $data ?? [], null);
        $this->setIfExists('phone_configuration', $data ?? [], null);
        $this->setIfExists('can_resend_email', $data ?? [], null);
        $this->setIfExists('can_unblock_pin', $data ?? [], null);
        $this->setIfExists('can_manage_notification_settings', $data ?? [], null);
        $this->setIfExists('can_change_pin', $data ?? [], null);
        $this->setIfExists('require_old_pin_for_change', $data ?? [], null);
        $this->setIfExists('pin_input', $data ?? [], null);
        $this->setIfExists('show_configuration', $data ?? [], null);
        $this->setIfExists('show_type', $data ?? [], null);
        $this->setIfExists('show_qr_code', $data ?? [], null);
        $this->setIfExists('redeem_after_date_reached', $data ?? [], null);
        $this->setIfExists('expiration_date_comments', $data ?? [], null);
        $this->setIfExists('cancel_action', $data ?? [], null);
        $this->setIfExists('refund', $data ?? [], null);
        $this->setIfExists('refund_date', $data ?? [], null);
        $this->setIfExists('single_redeem', $data ?? [], null);
        $this->setIfExists('has_transactions', $data ?? [], null);
        $this->setIfExists('export_formats', $data ?? [], null);
        $this->setIfExists('confirmation_password_input', $data ?? [], null);
        $this->setIfExists('custom_values', $data ?? [], null);
        $this->setIfExists('top_up_enabled', $data ?? [], null);
        $this->setIfExists('redeem', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The internal entity identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token The voucher token
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\VoucherStatusEnum|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\VoucherStatusEnum|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The voucher amount. Only returned when the voucher had a fixed amount when generated.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance The voucher balance.
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The contact e-mail for this voucher.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date The date the voucher expires
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\VoucherType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\VoucherType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets creation_type
     *
     * @return \OpenAPI\Client\Model\VoucherCreationTypeEnum|null
     */
    public function getCreationType()
    {
        return $this->container['creation_type'];
    }

    /**
     * Sets creation_type
     *
     * @param \OpenAPI\Client\Model\VoucherCreationTypeEnum|null $creation_type creation_type
     *
     * @return self
     */
    public function setCreationType($creation_type)
    {
        if (is_null($creation_type)) {
            throw new \InvalidArgumentException('non-nullable creation_type cannot be null');
        }
        $this->container['creation_type'] = $creation_type;

        return $this;
    }

    /**
     * Gets gift
     *
     * @return bool|null
     */
    public function getGift()
    {
        return $this->container['gift'];
    }

    /**
     * Sets gift
     *
     * @param bool|null $gift Indicates whether this voucher was bought as a gift. Only returned when `creationType` is `bought`.
     *
     * @return self
     */
    public function setGift($gift)
    {
        if (is_null($gift)) {
            throw new \InvalidArgumentException('non-nullable gift cannot be null');
        }
        $this->container['gift'] = $gift;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\VoucherResultAllOfOwner|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\VoucherResultAllOfOwner|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \OpenAPI\Client\Model\VoucherResultAllOfBuyer|null
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \OpenAPI\Client\Model\VoucherResultAllOfBuyer|null $buyer buyer
     *
     * @return self
     */
    public function setBuyer($buyer)
    {
        if (is_null($buyer)) {
            throw new \InvalidArgumentException('non-nullable buyer cannot be null');
        }
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date The date a voucher was generated or bought
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            throw new \InvalidArgumentException('non-nullable creation_date cannot be null');
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets redeem_after_date
     *
     * @return \DateTime|null
     */
    public function getRedeemAfterDate()
    {
        return $this->container['redeem_after_date'];
    }

    /**
     * Sets redeem_after_date
     *
     * @param \DateTime|null $redeem_after_date The date after which a voucher can be redeemed. Only returned when the voucher status is neither `redeemed` nor `canceled`. Also not returned when searching for redeemed vouchers of a specific user.
     *
     * @return self
     */
    public function setRedeemAfterDate($redeem_after_date)
    {
        if (is_null($redeem_after_date)) {
            throw new \InvalidArgumentException('non-nullable redeem_after_date cannot be null');
        }
        $this->container['redeem_after_date'] = $redeem_after_date;

        return $this;
    }

    /**
     * Gets redeem_on_week_days
     *
     * @return \OpenAPI\Client\Model\WeekDayEnum[]|null
     */
    public function getRedeemOnWeekDays()
    {
        return $this->container['redeem_on_week_days'];
    }

    /**
     * Sets redeem_on_week_days
     *
     * @param \OpenAPI\Client\Model\WeekDayEnum[]|null $redeem_on_week_days The days of the week a voucher can be redeemed. Only returned when the voucher status is neither `redeemed` nor `canceled`. Also not returned when searching for redeemed vouchers of a specific user.
     *
     * @return self
     */
    public function setRedeemOnWeekDays($redeem_on_week_days)
    {
        if (is_null($redeem_on_week_days)) {
            throw new \InvalidArgumentException('non-nullable redeem_on_week_days cannot be null');
        }
        $this->container['redeem_on_week_days'] = $redeem_on_week_days;

        return $this;
    }

    /**
     * Gets redeemer
     *
     * @return \OpenAPI\Client\Model\VoucherResultAllOfRedeemer|null
     * @deprecated
     */
    public function getRedeemer()
    {
        return $this->container['redeemer'];
    }

    /**
     * Sets redeemer
     *
     * @param \OpenAPI\Client\Model\VoucherResultAllOfRedeemer|null $redeemer redeemer
     *
     * @return self
     * @deprecated
     */
    public function setRedeemer($redeemer)
    {
        if (is_null($redeemer)) {
            throw new \InvalidArgumentException('non-nullable redeemer cannot be null');
        }
        $this->container['redeemer'] = $redeemer;

        return $this;
    }

    /**
     * Gets redeem_by
     *
     * @return \OpenAPI\Client\Model\VoucherResultAllOfRedeemBy|null
     * @deprecated
     */
    public function getRedeemBy()
    {
        return $this->container['redeem_by'];
    }

    /**
     * Sets redeem_by
     *
     * @param \OpenAPI\Client\Model\VoucherResultAllOfRedeemBy|null $redeem_by redeem_by
     *
     * @return self
     * @deprecated
     */
    public function setRedeemBy($redeem_by)
    {
        if (is_null($redeem_by)) {
            throw new \InvalidArgumentException('non-nullable redeem_by cannot be null');
        }
        $this->container['redeem_by'] = $redeem_by;

        return $this;
    }

    /**
     * Gets redeem_date
     *
     * @return \DateTime|null
     * @deprecated
     */
    public function getRedeemDate()
    {
        return $this->container['redeem_date'];
    }

    /**
     * Sets redeem_date
     *
     * @param \DateTime|null $redeem_date Use `singleRedeem.date` instead.
     *
     * @return self
     * @deprecated
     */
    public function setRedeemDate($redeem_date)
    {
        if (is_null($redeem_date)) {
            throw new \InvalidArgumentException('non-nullable redeem_date cannot be null');
        }
        $this->container['redeem_date'] = $redeem_date;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The voucher title when it was created.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The voucher description when it was created.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets send_message
     *
     * @return string|null
     */
    public function getSendMessage()
    {
        return $this->container['send_message'];
    }

    /**
     * Sets send_message
     *
     * @param string|null $send_message The message from the user that sent the voucher. Only for sent vouchers.
     *
     * @return self
     */
    public function setSendMessage($send_message)
    {
        if (is_null($send_message)) {
            throw new \InvalidArgumentException('non-nullable send_message cannot be null');
        }
        $this->container['send_message'] = $send_message;

        return $this;
    }

    /**
     * Gets buy
     *
     * @return \OpenAPI\Client\Model\VoucherViewAllOfBuy|null
     */
    public function getBuy()
    {
        return $this->container['buy'];
    }

    /**
     * Sets buy
     *
     * @param \OpenAPI\Client\Model\VoucherViewAllOfBuy|null $buy buy
     *
     * @return self
     */
    public function setBuy($buy)
    {
        if (is_null($buy)) {
            throw new \InvalidArgumentException('non-nullable buy cannot be null');
        }
        $this->container['buy'] = $buy;

        return $this;
    }

    /**
     * Gets redeem_allowed_groups
     *
     * @return \OpenAPI\Client\Model\Group[]|null
     */
    public function getRedeemAllowedGroups()
    {
        return $this->container['redeem_allowed_groups'];
    }

    /**
     * Sets redeem_allowed_groups
     *
     * @param \OpenAPI\Client\Model\Group[]|null $redeem_allowed_groups The list of goups allowed as redeemers. And empty list means all groups with permissions are allowed. Only this list or the `redeemAllowedUsers` list can be not null at the same time.
     *
     * @return self
     */
    public function setRedeemAllowedGroups($redeem_allowed_groups)
    {
        if (is_null($redeem_allowed_groups)) {
            throw new \InvalidArgumentException('non-nullable redeem_allowed_groups cannot be null');
        }
        $this->container['redeem_allowed_groups'] = $redeem_allowed_groups;

        return $this;
    }

    /**
     * Gets redeem_allowed_users
     *
     * @return \OpenAPI\Client\Model\User[]|null
     */
    public function getRedeemAllowedUsers()
    {
        return $this->container['redeem_allowed_users'];
    }

    /**
     * Sets redeem_allowed_users
     *
     * @param \OpenAPI\Client\Model\User[]|null $redeem_allowed_users The list of users allowed as redeemers. An empty list means all users with permissions are allowed. Only this list or the `redeemAllowedGroups` list can be not null at the same time.
     *
     * @return self
     */
    public function setRedeemAllowedUsers($redeem_allowed_users)
    {
        if (is_null($redeem_allowed_users)) {
            throw new \InvalidArgumentException('non-nullable redeem_allowed_users cannot be null');
        }
        $this->container['redeem_allowed_users'] = $redeem_allowed_users;

        return $this;
    }

    /**
     * Gets allow_partial_redeems
     *
     * @return bool|null
     */
    public function getAllowPartialRedeems()
    {
        return $this->container['allow_partial_redeems'];
    }

    /**
     * Sets allow_partial_redeems
     *
     * @param bool|null $allow_partial_redeems Indicates whether partial redeems can occur, that is, a redeem with an amount which is not the total voucher amount.
     *
     * @return self
     */
    public function setAllowPartialRedeems($allow_partial_redeems)
    {
        if (is_null($allow_partial_redeems)) {
            throw new \InvalidArgumentException('non-nullable allow_partial_redeems cannot be null');
        }
        $this->container['allow_partial_redeems'] = $allow_partial_redeems;

        return $this;
    }

    /**
     * Gets pin_status_for_redeem
     *
     * @return \OpenAPI\Client\Model\VoucherPinStatusForRedeemEnum|null
     */
    public function getPinStatusForRedeem()
    {
        return $this->container['pin_status_for_redeem'];
    }

    /**
     * Sets pin_status_for_redeem
     *
     * @param \OpenAPI\Client\Model\VoucherPinStatusForRedeemEnum|null $pin_status_for_redeem pin_status_for_redeem
     *
     * @return self
     */
    public function setPinStatusForRedeem($pin_status_for_redeem)
    {
        if (is_null($pin_status_for_redeem)) {
            throw new \InvalidArgumentException('non-nullable pin_status_for_redeem cannot be null');
        }
        $this->container['pin_status_for_redeem'] = $pin_status_for_redeem;

        return $this;
    }

    /**
     * Gets pin
     *
     * @return string|null
     */
    public function getPin()
    {
        return $this->container['pin'];
    }

    /**
     * Sets pin
     *
     * @param string|null $pin The voucher pin used for redeeming. Only visible for admins or buyer / owner, and when the voucher is initially active.
     *
     * @return self
     */
    public function setPin($pin)
    {
        if (is_null($pin)) {
            throw new \InvalidArgumentException('non-nullable pin cannot be null');
        }
        $this->container['pin'] = $pin;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone The contact mobile phone for this voucher.
     *
     * @return self
     */
    public function setMobilePhone($mobile_phone)
    {
        if (is_null($mobile_phone)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone cannot be null');
        }
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets enable_notifications
     *
     * @return bool|null
     */
    public function getEnableNotifications()
    {
        return $this->container['enable_notifications'];
    }

    /**
     * Sets enable_notifications
     *
     * @param bool|null $enable_notifications Whether notifications are enabled for this voucher.
     *
     * @return self
     */
    public function setEnableNotifications($enable_notifications)
    {
        if (is_null($enable_notifications)) {
            throw new \InvalidArgumentException('non-nullable enable_notifications cannot be null');
        }
        $this->container['enable_notifications'] = $enable_notifications;

        return $this;
    }

    /**
     * Gets can_assign
     *
     * @return bool|null
     */
    public function getCanAssign()
    {
        return $this->container['can_assign'];
    }

    /**
     * Sets can_assign
     *
     * @param bool|null $can_assign Can the authenticated admin assign the voucher to a user? Only applies to generated vouchers.
     *
     * @return self
     */
    public function setCanAssign($can_assign)
    {
        if (is_null($can_assign)) {
            throw new \InvalidArgumentException('non-nullable can_assign cannot be null');
        }
        $this->container['can_assign'] = $can_assign;

        return $this;
    }

    /**
     * Gets can_change_expiration_date
     *
     * @return bool|null
     */
    public function getCanChangeExpirationDate()
    {
        return $this->container['can_change_expiration_date'];
    }

    /**
     * Sets can_change_expiration_date
     *
     * @param bool|null $can_change_expiration_date Can the authenticated user change this voucher's expiration date?
     *
     * @return self
     */
    public function setCanChangeExpirationDate($can_change_expiration_date)
    {
        if (is_null($can_change_expiration_date)) {
            throw new \InvalidArgumentException('non-nullable can_change_expiration_date cannot be null');
        }
        $this->container['can_change_expiration_date'] = $can_change_expiration_date;

        return $this;
    }

    /**
     * Gets can_change_notification_settings
     *
     * @return bool|null
     */
    public function getCanChangeNotificationSettings()
    {
        return $this->container['can_change_notification_settings'];
    }

    /**
     * Sets can_change_notification_settings
     *
     * @param bool|null $can_change_notification_settings Can the authenticated user change this voucher's notification settings, including the e-mail the voucher was sent to?
     *
     * @return self
     */
    public function setCanChangeNotificationSettings($can_change_notification_settings)
    {
        if (is_null($can_change_notification_settings)) {
            throw new \InvalidArgumentException('non-nullable can_change_notification_settings cannot be null');
        }
        $this->container['can_change_notification_settings'] = $can_change_notification_settings;

        return $this;
    }

    /**
     * Gets phone_configuration
     *
     * @return \OpenAPI\Client\Model\VoucherViewAllOfPhoneConfiguration|null
     */
    public function getPhoneConfiguration()
    {
        return $this->container['phone_configuration'];
    }

    /**
     * Sets phone_configuration
     *
     * @param \OpenAPI\Client\Model\VoucherViewAllOfPhoneConfiguration|null $phone_configuration phone_configuration
     *
     * @return self
     */
    public function setPhoneConfiguration($phone_configuration)
    {
        if (is_null($phone_configuration)) {
            throw new \InvalidArgumentException('non-nullable phone_configuration cannot be null');
        }
        $this->container['phone_configuration'] = $phone_configuration;

        return $this;
    }

    /**
     * Gets can_resend_email
     *
     * @return bool|null
     */
    public function getCanResendEmail()
    {
        return $this->container['can_resend_email'];
    }

    /**
     * Sets can_resend_email
     *
     * @param bool|null $can_resend_email Can the authenticated user re-send the voucher by e-mail? Only applies to sent vouchers.
     *
     * @return self
     */
    public function setCanResendEmail($can_resend_email)
    {
        if (is_null($can_resend_email)) {
            throw new \InvalidArgumentException('non-nullable can_resend_email cannot be null');
        }
        $this->container['can_resend_email'] = $can_resend_email;

        return $this;
    }

    /**
     * Gets can_unblock_pin
     *
     * @return bool|null
     */
    public function getCanUnblockPin()
    {
        return $this->container['can_unblock_pin'];
    }

    /**
     * Sets can_unblock_pin
     *
     * @param bool|null $can_unblock_pin Can the authenticated user unblock the voucher PIN? Is only returned if the voucher PIN is actually blocked and the authenticated user has permission to unblock it.
     *
     * @return self
     */
    public function setCanUnblockPin($can_unblock_pin)
    {
        if (is_null($can_unblock_pin)) {
            throw new \InvalidArgumentException('non-nullable can_unblock_pin cannot be null');
        }
        $this->container['can_unblock_pin'] = $can_unblock_pin;

        return $this;
    }

    /**
     * Gets can_manage_notification_settings
     *
     * @return bool|null
     */
    public function getCanManageNotificationSettings()
    {
        return $this->container['can_manage_notification_settings'];
    }

    /**
     * Sets can_manage_notification_settings
     *
     * @param bool|null $can_manage_notification_settings Can the authenticated user manage notification settings of this voucher? Is only returned for vouchers that have notifications on its own (generated inactive or sent) and the authenticated user has permission to manage the settings.
     *
     * @return self
     */
    public function setCanManageNotificationSettings($can_manage_notification_settings)
    {
        if (is_null($can_manage_notification_settings)) {
            throw new \InvalidArgumentException('non-nullable can_manage_notification_settings cannot be null');
        }
        $this->container['can_manage_notification_settings'] = $can_manage_notification_settings;

        return $this;
    }

    /**
     * Gets can_change_pin
     *
     * @return bool|null
     */
    public function getCanChangePin()
    {
        return $this->container['can_change_pin'];
    }

    /**
     * Sets can_change_pin
     *
     * @param bool|null $can_change_pin Can the authenticated change the voucher PIN? Is only returned if the voucher is open, uses PIN and the authenticated user has permission to change it.
     *
     * @return self
     */
    public function setCanChangePin($can_change_pin)
    {
        if (is_null($can_change_pin)) {
            throw new \InvalidArgumentException('non-nullable can_change_pin cannot be null');
        }
        $this->container['can_change_pin'] = $can_change_pin;

        return $this;
    }

    /**
     * Gets require_old_pin_for_change
     *
     * @return bool|null
     */
    public function getRequireOldPinForChange()
    {
        return $this->container['require_old_pin_for_change'];
    }

    /**
     * Sets require_old_pin_for_change
     *
     * @param bool|null $require_old_pin_for_change In case `canChangePin` is true, indicates whether the old PIN should be entered by the user. This is the case when the authenticated user is the voucher owner and the `pin` value is not returned
     *
     * @return self
     */
    public function setRequireOldPinForChange($require_old_pin_for_change)
    {
        if (is_null($require_old_pin_for_change)) {
            throw new \InvalidArgumentException('non-nullable require_old_pin_for_change cannot be null');
        }
        $this->container['require_old_pin_for_change'] = $require_old_pin_for_change;

        return $this;
    }

    /**
     * Gets pin_input
     *
     * @return \OpenAPI\Client\Model\VoucherViewAllOfPinInput|null
     */
    public function getPinInput()
    {
        return $this->container['pin_input'];
    }

    /**
     * Sets pin_input
     *
     * @param \OpenAPI\Client\Model\VoucherViewAllOfPinInput|null $pin_input pin_input
     *
     * @return self
     */
    public function setPinInput($pin_input)
    {
        if (is_null($pin_input)) {
            throw new \InvalidArgumentException('non-nullable pin_input cannot be null');
        }
        $this->container['pin_input'] = $pin_input;

        return $this;
    }

    /**
     * Gets show_configuration
     *
     * @return bool|null
     */
    public function getShowConfiguration()
    {
        return $this->container['show_configuration'];
    }

    /**
     * Sets show_configuration
     *
     * @param bool|null $show_configuration Should the voucher configuration be shown to the logged user? This flag is `true` only for admins, and only if there are multiple visible configurations.
     *
     * @return self
     */
    public function setShowConfiguration($show_configuration)
    {
        if (is_null($show_configuration)) {
            throw new \InvalidArgumentException('non-nullable show_configuration cannot be null');
        }
        $this->container['show_configuration'] = $show_configuration;

        return $this;
    }

    /**
     * Gets show_type
     *
     * @return bool|null
     */
    public function getShowType()
    {
        return $this->container['show_type'];
    }

    /**
     * Sets show_type
     *
     * @param bool|null $show_type Should the voucher type be shown to the logged users? This flag is `true` only for admins.
     *
     * @return self
     */
    public function setShowType($show_type)
    {
        if (is_null($show_type)) {
            throw new \InvalidArgumentException('non-nullable show_type cannot be null');
        }
        $this->container['show_type'] = $show_type;

        return $this;
    }

    /**
     * Gets show_qr_code
     *
     * @return bool|null
     */
    public function getShowQrCode()
    {
        return $this->container['show_qr_code'];
    }

    /**
     * Sets show_qr_code
     *
     * @param bool|null $show_qr_code Should the voucher token be shown as QR-code for users?
     *
     * @return self
     */
    public function setShowQrCode($show_qr_code)
    {
        if (is_null($show_qr_code)) {
            throw new \InvalidArgumentException('non-nullable show_qr_code cannot be null');
        }
        $this->container['show_qr_code'] = $show_qr_code;

        return $this;
    }

    /**
     * Gets redeem_after_date_reached
     *
     * @return bool|null
     */
    public function getRedeemAfterDateReached()
    {
        return $this->container['redeem_after_date_reached'];
    }

    /**
     * Sets redeem_after_date_reached
     *
     * @param bool|null $redeem_after_date_reached Should the voucher be available to be redeemed?
     *
     * @return self
     */
    public function setRedeemAfterDateReached($redeem_after_date_reached)
    {
        if (is_null($redeem_after_date_reached)) {
            throw new \InvalidArgumentException('non-nullable redeem_after_date_reached cannot be null');
        }
        $this->container['redeem_after_date_reached'] = $redeem_after_date_reached;

        return $this;
    }

    /**
     * Gets expiration_date_comments
     *
     * @return string|null
     */
    public function getExpirationDateComments()
    {
        return $this->container['expiration_date_comments'];
    }

    /**
     * Sets expiration_date_comments
     *
     * @param string|null $expiration_date_comments Administration comments regarding expiration date change.
     *
     * @return self
     */
    public function setExpirationDateComments($expiration_date_comments)
    {
        if (is_null($expiration_date_comments)) {
            throw new \InvalidArgumentException('non-nullable expiration_date_comments cannot be null');
        }
        $this->container['expiration_date_comments'] = $expiration_date_comments;

        return $this;
    }

    /**
     * Gets cancel_action
     *
     * @return \OpenAPI\Client\Model\VoucherCancelActionEnum|null
     */
    public function getCancelAction()
    {
        return $this->container['cancel_action'];
    }

    /**
     * Sets cancel_action
     *
     * @param \OpenAPI\Client\Model\VoucherCancelActionEnum|null $cancel_action cancel_action
     *
     * @return self
     */
    public function setCancelAction($cancel_action)
    {
        if (is_null($cancel_action)) {
            throw new \InvalidArgumentException('non-nullable cancel_action cannot be null');
        }
        $this->container['cancel_action'] = $cancel_action;

        return $this;
    }

    /**
     * Gets refund
     *
     * @return \OpenAPI\Client\Model\VoucherViewAllOfRefund|null
     */
    public function getRefund()
    {
        return $this->container['refund'];
    }

    /**
     * Sets refund
     *
     * @param \OpenAPI\Client\Model\VoucherViewAllOfRefund|null $refund refund
     *
     * @return self
     */
    public function setRefund($refund)
    {
        if (is_null($refund)) {
            throw new \InvalidArgumentException('non-nullable refund cannot be null');
        }
        $this->container['refund'] = $refund;

        return $this;
    }

    /**
     * Gets refund_date
     *
     * @return \DateTime|null
     */
    public function getRefundDate()
    {
        return $this->container['refund_date'];
    }

    /**
     * Sets refund_date
     *
     * @param \DateTime|null $refund_date The date the voucher was refunded, if any
     *
     * @return self
     */
    public function setRefundDate($refund_date)
    {
        if (is_null($refund_date)) {
            throw new \InvalidArgumentException('non-nullable refund_date cannot be null');
        }
        $this->container['refund_date'] = $refund_date;

        return $this;
    }

    /**
     * Gets single_redeem
     *
     * @return \OpenAPI\Client\Model\VoucherViewAllOfSingleRedeem|null
     */
    public function getSingleRedeem()
    {
        return $this->container['single_redeem'];
    }

    /**
     * Sets single_redeem
     *
     * @param \OpenAPI\Client\Model\VoucherViewAllOfSingleRedeem|null $single_redeem single_redeem
     *
     * @return self
     */
    public function setSingleRedeem($single_redeem)
    {
        if (is_null($single_redeem)) {
            throw new \InvalidArgumentException('non-nullable single_redeem cannot be null');
        }
        $this->container['single_redeem'] = $single_redeem;

        return $this;
    }

    /**
     * Gets has_transactions
     *
     * @return bool|null
     */
    public function getHasTransactions()
    {
        return $this->container['has_transactions'];
    }

    /**
     * Sets has_transactions
     *
     * @param bool|null $has_transactions Indicates whether the voucher has transactions, that means, if there are any redeems of top-ups for this voucher. If so, a separated request to `GET /vouchers/{key}/transactions` should be performed in order to fetch them. Note that if `redeemDate` is returned, it means the voucher cannot be partially redeemed and was already fully redeemed. In this case, there are no more transactions to show, and this flag will be false.
     *
     * @return self
     */
    public function setHasTransactions($has_transactions)
    {
        if (is_null($has_transactions)) {
            throw new \InvalidArgumentException('non-nullable has_transactions cannot be null');
        }
        $this->container['has_transactions'] = $has_transactions;

        return $this;
    }

    /**
     * Gets export_formats
     *
     * @return \OpenAPI\Client\Model\ExportFormat[]|null
     */
    public function getExportFormats()
    {
        return $this->container['export_formats'];
    }

    /**
     * Sets export_formats
     *
     * @param \OpenAPI\Client\Model\ExportFormat[]|null $export_formats The formats which the data can be exported
     *
     * @return self
     */
    public function setExportFormats($export_formats)
    {
        if (is_null($export_formats)) {
            throw new \InvalidArgumentException('non-nullable export_formats cannot be null');
        }
        $this->container['export_formats'] = $export_formats;

        return $this;
    }

    /**
     * Gets confirmation_password_input
     *
     * @return \OpenAPI\Client\Model\VoucherViewAllOfConfirmationPasswordInput|null
     */
    public function getConfirmationPasswordInput()
    {
        return $this->container['confirmation_password_input'];
    }

    /**
     * Sets confirmation_password_input
     *
     * @param \OpenAPI\Client\Model\VoucherViewAllOfConfirmationPasswordInput|null $confirmation_password_input confirmation_password_input
     *
     * @return self
     */
    public function setConfirmationPasswordInput($confirmation_password_input)
    {
        if (is_null($confirmation_password_input)) {
            throw new \InvalidArgumentException('non-nullable confirmation_password_input cannot be null');
        }
        $this->container['confirmation_password_input'] = $confirmation_password_input;

        return $this;
    }

    /**
     * Gets custom_values
     *
     * @return \OpenAPI\Client\Model\CustomFieldValue[]|null
     */
    public function getCustomValues()
    {
        return $this->container['custom_values'];
    }

    /**
     * Sets custom_values
     *
     * @param \OpenAPI\Client\Model\CustomFieldValue[]|null $custom_values The list of custom field values this voucher has.
     *
     * @return self
     */
    public function setCustomValues($custom_values)
    {
        if (is_null($custom_values)) {
            throw new \InvalidArgumentException('non-nullable custom_values cannot be null');
        }
        $this->container['custom_values'] = $custom_values;

        return $this;
    }

    /**
     * Gets top_up_enabled
     *
     * @return bool|null
     */
    public function getTopUpEnabled()
    {
        return $this->container['top_up_enabled'];
    }

    /**
     * Sets top_up_enabled
     *
     * @param bool|null $top_up_enabled Indicates whether the voucher configuration supports top-up. This flag is not related to the top-up permission.
     *
     * @return self
     */
    public function setTopUpEnabled($top_up_enabled)
    {
        if (is_null($top_up_enabled)) {
            throw new \InvalidArgumentException('non-nullable top_up_enabled cannot be null');
        }
        $this->container['top_up_enabled'] = $top_up_enabled;

        return $this;
    }

    /**
     * Gets redeem
     *
     * @return \OpenAPI\Client\Model\VoucherViewAllOfRedeem|null
     * @deprecated
     */
    public function getRedeem()
    {
        return $this->container['redeem'];
    }

    /**
     * Sets redeem
     *
     * @param \OpenAPI\Client\Model\VoucherViewAllOfRedeem|null $redeem redeem
     *
     * @return self
     * @deprecated
     */
    public function setRedeem($redeem)
    {
        if (is_null($redeem)) {
            throw new \InvalidArgumentException('non-nullable redeem cannot be null');
        }
        $this->container['redeem'] = $redeem;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


