<?php
/**
 * UserDataForNewAllOfUser
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserDataForNewAllOfUser Class Doc Comment
 *
 * @category Class
 * @description The object that can be altered and posted back to register the user
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserDataForNewAllOfUser implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserDataForNew_allOf_user';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'name' => 'string',
        'username' => 'string',
        'email' => 'string',
        'custom_values' => 'array<string,string>',
        'hidden_fields' => 'string[]',
        'group' => 'string',
        'broker' => 'string',
        'mobile_phones' => '\OpenAPI\Client\Model\PhoneNew[]',
        'land_line_phones' => '\OpenAPI\Client\Model\PhoneNew[]',
        'passwords' => '\OpenAPI\Client\Model\PasswordRegistration[]',
        'skip_activation_email' => 'bool',
        'identity_provider_request_id' => 'string',
        'addresses' => '\OpenAPI\Client\Model\AddressNew[]',
        'contact_infos' => '\OpenAPI\Client\Model\ContactInfoNew[]',
        'images' => 'string[]',
        'captcha' => '\OpenAPI\Client\Model\UserNewAllOfCaptcha',
        'accept_agreement' => 'bool',
        'accept_agreements' => 'string[]',
        'as_member' => 'bool',
        'security_question' => 'string',
        'security_answer' => 'string',
        'nfc_token' => '\OpenAPI\Client\Model\UserNewAllOfNfcToken',
        'invite_token' => 'string',
        'external_payment_token' => 'string',
        'user_agent_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'name' => null,
        'username' => null,
        'email' => null,
        'custom_values' => null,
        'hidden_fields' => null,
        'group' => null,
        'broker' => null,
        'mobile_phones' => null,
        'land_line_phones' => null,
        'passwords' => null,
        'skip_activation_email' => null,
        'identity_provider_request_id' => null,
        'addresses' => null,
        'contact_infos' => null,
        'images' => null,
        'captcha' => null,
        'accept_agreement' => null,
        'accept_agreements' => null,
        'as_member' => null,
        'security_question' => null,
        'security_answer' => null,
        'nfc_token' => null,
        'invite_token' => null,
        'external_payment_token' => null,
        'user_agent_id' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'name' => false,
        'username' => false,
        'email' => false,
        'custom_values' => false,
        'hidden_fields' => false,
        'group' => false,
        'broker' => false,
        'mobile_phones' => false,
        'land_line_phones' => false,
        'passwords' => false,
        'skip_activation_email' => false,
        'identity_provider_request_id' => false,
        'addresses' => false,
        'contact_infos' => false,
        'images' => false,
        'captcha' => false,
        'accept_agreement' => false,
        'accept_agreements' => false,
        'as_member' => false,
        'security_question' => false,
        'security_answer' => false,
        'nfc_token' => false,
        'invite_token' => false,
        'external_payment_token' => false,
        'user_agent_id' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
        'username' => 'username',
        'email' => 'email',
        'custom_values' => 'customValues',
        'hidden_fields' => 'hiddenFields',
        'group' => 'group',
        'broker' => 'broker',
        'mobile_phones' => 'mobilePhones',
        'land_line_phones' => 'landLinePhones',
        'passwords' => 'passwords',
        'skip_activation_email' => 'skipActivationEmail',
        'identity_provider_request_id' => 'identityProviderRequestId',
        'addresses' => 'addresses',
        'contact_infos' => 'contactInfos',
        'images' => 'images',
        'captcha' => 'captcha',
        'accept_agreement' => 'acceptAgreement',
        'accept_agreements' => 'acceptAgreements',
        'as_member' => 'asMember',
        'security_question' => 'securityQuestion',
        'security_answer' => 'securityAnswer',
        'nfc_token' => 'nfcToken',
        'invite_token' => 'inviteToken',
        'external_payment_token' => 'externalPaymentToken',
        'user_agent_id' => 'userAgentId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
        'username' => 'setUsername',
        'email' => 'setEmail',
        'custom_values' => 'setCustomValues',
        'hidden_fields' => 'setHiddenFields',
        'group' => 'setGroup',
        'broker' => 'setBroker',
        'mobile_phones' => 'setMobilePhones',
        'land_line_phones' => 'setLandLinePhones',
        'passwords' => 'setPasswords',
        'skip_activation_email' => 'setSkipActivationEmail',
        'identity_provider_request_id' => 'setIdentityProviderRequestId',
        'addresses' => 'setAddresses',
        'contact_infos' => 'setContactInfos',
        'images' => 'setImages',
        'captcha' => 'setCaptcha',
        'accept_agreement' => 'setAcceptAgreement',
        'accept_agreements' => 'setAcceptAgreements',
        'as_member' => 'setAsMember',
        'security_question' => 'setSecurityQuestion',
        'security_answer' => 'setSecurityAnswer',
        'nfc_token' => 'setNfcToken',
        'invite_token' => 'setInviteToken',
        'external_payment_token' => 'setExternalPaymentToken',
        'user_agent_id' => 'setUserAgentId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
        'username' => 'getUsername',
        'email' => 'getEmail',
        'custom_values' => 'getCustomValues',
        'hidden_fields' => 'getHiddenFields',
        'group' => 'getGroup',
        'broker' => 'getBroker',
        'mobile_phones' => 'getMobilePhones',
        'land_line_phones' => 'getLandLinePhones',
        'passwords' => 'getPasswords',
        'skip_activation_email' => 'getSkipActivationEmail',
        'identity_provider_request_id' => 'getIdentityProviderRequestId',
        'addresses' => 'getAddresses',
        'contact_infos' => 'getContactInfos',
        'images' => 'getImages',
        'captcha' => 'getCaptcha',
        'accept_agreement' => 'getAcceptAgreement',
        'accept_agreements' => 'getAcceptAgreements',
        'as_member' => 'getAsMember',
        'security_question' => 'getSecurityQuestion',
        'security_answer' => 'getSecurityAnswer',
        'nfc_token' => 'getNfcToken',
        'invite_token' => 'getInviteToken',
        'external_payment_token' => 'getExternalPaymentToken',
        'user_agent_id' => 'getUserAgentId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('custom_values', $data ?? [], null);
        $this->setIfExists('hidden_fields', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('broker', $data ?? [], null);
        $this->setIfExists('mobile_phones', $data ?? [], null);
        $this->setIfExists('land_line_phones', $data ?? [], null);
        $this->setIfExists('passwords', $data ?? [], null);
        $this->setIfExists('skip_activation_email', $data ?? [], null);
        $this->setIfExists('identity_provider_request_id', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('contact_infos', $data ?? [], null);
        $this->setIfExists('images', $data ?? [], null);
        $this->setIfExists('captcha', $data ?? [], null);
        $this->setIfExists('accept_agreement', $data ?? [], null);
        $this->setIfExists('accept_agreements', $data ?? [], null);
        $this->setIfExists('as_member', $data ?? [], null);
        $this->setIfExists('security_question', $data ?? [], null);
        $this->setIfExists('security_answer', $data ?? [], null);
        $this->setIfExists('nfc_token', $data ?? [], null);
        $this->setIfExists('invite_token', $data ?? [], null);
        $this->setIfExists('external_payment_token', $data ?? [], null);
        $this->setIfExists('user_agent_id', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The user's full name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username The user's login name
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The user's e-mail
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets custom_values
     *
     * @return array<string,string>|null
     */
    public function getCustomValues()
    {
        return $this->container['custom_values'];
    }

    /**
     * Sets custom_values
     *
     * @param array<string,string>|null $custom_values Holds the custom field values, keyed by field internal name or id. The format of the value depends on the custom field type. In order to lookup the custom fields, use either the `GET /users/data-for-new` (when creating) or `GET /users/{user}/data-for-edit` (when modifying) a user, and lookup each field by either internal name. Example: `{..., \"customValues\": {\"gender\": \"male\", \"birthDate\": \"1980-10-27\"}}`
     *
     * @return self
     */
    public function setCustomValues($custom_values)
    {
        if (is_null($custom_values)) {
            throw new \InvalidArgumentException('non-nullable custom_values cannot be null');
        }
        $this->container['custom_values'] = $custom_values;

        return $this;
    }

    /**
     * Gets hidden_fields
     *
     * @return string[]|null
     */
    public function getHiddenFields()
    {
        return $this->container['hidden_fields'];
    }

    /**
     * Sets hidden_fields
     *
     * @param string[]|null $hidden_fields An array with the internal names of either the basic or custom fields that should be hidden from other users. Currently the only basic profile field that can be hidden is email. Any other will be considered a custom field, and should be the same key as used in the 'customValues' property. Note that this is not related to the privacy setting, which uses the privacy controls, and are more general (not per field).
     *
     * @return self
     */
    public function setHiddenFields($hidden_fields)
    {
        if (is_null($hidden_fields)) {
            throw new \InvalidArgumentException('non-nullable hidden_fields cannot be null');
        }
        $this->container['hidden_fields'] = $hidden_fields;

        return $this;
    }

    /**
     * Gets group
     *
     * @return string|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param string|null $group The initial user group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets broker
     *
     * @return string|null
     */
    public function getBroker()
    {
        return $this->container['broker'];
    }

    /**
     * Sets broker
     *
     * @param string|null $broker Either the identifier or other identification value (login name, e-mail, etc) of the broker for the new user. Only allowed if logged-in as administrator with permission.
     *
     * @return self
     */
    public function setBroker($broker)
    {
        if (is_null($broker)) {
            throw new \InvalidArgumentException('non-nullable broker cannot be null');
        }
        $this->container['broker'] = $broker;

        return $this;
    }

    /**
     * Gets mobile_phones
     *
     * @return \OpenAPI\Client\Model\PhoneNew[]|null
     */
    public function getMobilePhones()
    {
        return $this->container['mobile_phones'];
    }

    /**
     * Sets mobile_phones
     *
     * @param \OpenAPI\Client\Model\PhoneNew[]|null $mobile_phones Mobile phones to be registered together with the user
     *
     * @return self
     */
    public function setMobilePhones($mobile_phones)
    {
        if (is_null($mobile_phones)) {
            throw new \InvalidArgumentException('non-nullable mobile_phones cannot be null');
        }
        $this->container['mobile_phones'] = $mobile_phones;

        return $this;
    }

    /**
     * Gets land_line_phones
     *
     * @return \OpenAPI\Client\Model\PhoneNew[]|null
     */
    public function getLandLinePhones()
    {
        return $this->container['land_line_phones'];
    }

    /**
     * Sets land_line_phones
     *
     * @param \OpenAPI\Client\Model\PhoneNew[]|null $land_line_phones Land-line phones to be registered together with the user
     *
     * @return self
     */
    public function setLandLinePhones($land_line_phones)
    {
        if (is_null($land_line_phones)) {
            throw new \InvalidArgumentException('non-nullable land_line_phones cannot be null');
        }
        $this->container['land_line_phones'] = $land_line_phones;

        return $this;
    }

    /**
     * Gets passwords
     *
     * @return \OpenAPI\Client\Model\PasswordRegistration[]|null
     */
    public function getPasswords()
    {
        return $this->container['passwords'];
    }

    /**
     * Sets passwords
     *
     * @param \OpenAPI\Client\Model\PasswordRegistration[]|null $passwords The initial passwords of the user
     *
     * @return self
     */
    public function setPasswords($passwords)
    {
        if (is_null($passwords)) {
            throw new \InvalidArgumentException('non-nullable passwords cannot be null');
        }
        $this->container['passwords'] = $passwords;

        return $this;
    }

    /**
     * Gets skip_activation_email
     *
     * @return bool|null
     */
    public function getSkipActivationEmail()
    {
        return $this->container['skip_activation_email'];
    }

    /**
     * Sets skip_activation_email
     *
     * @param bool|null $skip_activation_email When set to true, the activation e-mail is not sent to the registered user. Can only be used when an administrator / broker is registering a user, and ignored on public registrations (the e-mail is always sent on public registrations).
     *
     * @return self
     */
    public function setSkipActivationEmail($skip_activation_email)
    {
        if (is_null($skip_activation_email)) {
            throw new \InvalidArgumentException('non-nullable skip_activation_email cannot be null');
        }
        $this->container['skip_activation_email'] = $skip_activation_email;

        return $this;
    }

    /**
     * Gets identity_provider_request_id
     *
     * @return string|null
     */
    public function getIdentityProviderRequestId()
    {
        return $this->container['identity_provider_request_id'];
    }

    /**
     * Sets identity_provider_request_id
     *
     * @param string|null $identity_provider_request_id When using an [external identity provider](https://wiki.cyclos.org/index.php/External_identity_providers), this is the request id used to complete the registration process after filling up the registration form.
     *
     * @return self
     */
    public function setIdentityProviderRequestId($identity_provider_request_id)
    {
        if (is_null($identity_provider_request_id)) {
            throw new \InvalidArgumentException('non-nullable identity_provider_request_id cannot be null');
        }
        $this->container['identity_provider_request_id'] = $identity_provider_request_id;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \OpenAPI\Client\Model\AddressNew[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \OpenAPI\Client\Model\AddressNew[]|null $addresses Addresses to be registered together with the user
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            throw new \InvalidArgumentException('non-nullable addresses cannot be null');
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets contact_infos
     *
     * @return \OpenAPI\Client\Model\ContactInfoNew[]|null
     */
    public function getContactInfos()
    {
        return $this->container['contact_infos'];
    }

    /**
     * Sets contact_infos
     *
     * @param \OpenAPI\Client\Model\ContactInfoNew[]|null $contact_infos Public contacts to be registered together with the user
     *
     * @return self
     */
    public function setContactInfos($contact_infos)
    {
        if (is_null($contact_infos)) {
            throw new \InvalidArgumentException('non-nullable contact_infos cannot be null');
        }
        $this->container['contact_infos'] = $contact_infos;

        return $this;
    }

    /**
     * Gets images
     *
     * @return string[]|null
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param string[]|null $images The ids of previously uploaded user temporary images to be initially used as profile images
     *
     * @return self
     */
    public function setImages($images)
    {
        if (is_null($images)) {
            throw new \InvalidArgumentException('non-nullable images cannot be null');
        }
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets captcha
     *
     * @return \OpenAPI\Client\Model\UserNewAllOfCaptcha|null
     */
    public function getCaptcha()
    {
        return $this->container['captcha'];
    }

    /**
     * Sets captcha
     *
     * @param \OpenAPI\Client\Model\UserNewAllOfCaptcha|null $captcha captcha
     *
     * @return self
     */
    public function setCaptcha($captcha)
    {
        if (is_null($captcha)) {
            throw new \InvalidArgumentException('non-nullable captcha cannot be null');
        }
        $this->container['captcha'] = $captcha;

        return $this;
    }

    /**
     * Gets accept_agreement
     *
     * @return bool|null
     */
    public function getAcceptAgreement()
    {
        return $this->container['accept_agreement'];
    }

    /**
     * Sets accept_agreement
     *
     * @param bool|null $accept_agreement When there are agreements that need to be accepted for registration, either this property should be set to `true`, indicating that all agreements are accepted, or the `accepteAgreements` array must be set indicating which ones are agreed.
     *
     * @return self
     */
    public function setAcceptAgreement($accept_agreement)
    {
        if (is_null($accept_agreement)) {
            throw new \InvalidArgumentException('non-nullable accept_agreement cannot be null');
        }
        $this->container['accept_agreement'] = $accept_agreement;

        return $this;
    }

    /**
     * Gets accept_agreements
     *
     * @return string[]|null
     */
    public function getAcceptAgreements()
    {
        return $this->container['accept_agreements'];
    }

    /**
     * Sets accept_agreements
     *
     * @param string[]|null $accept_agreements Either ids or internal names of agreements to accept. When there are agreements, either the `accepteAgreement` flag should be sent, indicating that all agreements are accepted, or this array should be sent indicating which agreements are accepted. All required agreements must be sent, or a validation error is returned. Optional agreements can be sent or not.
     *
     * @return self
     */
    public function setAcceptAgreements($accept_agreements)
    {
        if (is_null($accept_agreements)) {
            throw new \InvalidArgumentException('non-nullable accept_agreements cannot be null');
        }
        $this->container['accept_agreements'] = $accept_agreements;

        return $this;
    }

    /**
     * Gets as_member
     *
     * @return bool|null
     */
    public function getAsMember()
    {
        return $this->container['as_member'];
    }

    /**
     * Sets as_member
     *
     * @param bool|null $as_member Flag required only when the authenticated user is a broker, in that case we need to distingish between registering as member or broker. If true then the new user will be registered without a brokering relationship. Otherwise the authenticated user will be set as the broker of the new user.
     *
     * @return self
     */
    public function setAsMember($as_member)
    {
        if (is_null($as_member)) {
            throw new \InvalidArgumentException('non-nullable as_member cannot be null');
        }
        $this->container['as_member'] = $as_member;

        return $this;
    }

    /**
     * Gets security_question
     *
     * @return string|null
     */
    public function getSecurityQuestion()
    {
        return $this->container['security_question'];
    }

    /**
     * Sets security_question
     *
     * @param string|null $security_question If the server is configured to use security question, is the `internalName` of the question present in the result of `data-for-new`, in the `securityQuestions` property. Is optional and only used in public registration.
     *
     * @return self
     */
    public function setSecurityQuestion($security_question)
    {
        if (is_null($security_question)) {
            throw new \InvalidArgumentException('non-nullable security_question cannot be null');
        }
        $this->container['security_question'] = $security_question;

        return $this;
    }

    /**
     * Gets security_answer
     *
     * @return string|null
     */
    public function getSecurityAnswer()
    {
        return $this->container['security_answer'];
    }

    /**
     * Sets security_answer
     *
     * @param string|null $security_answer If a `securityQuestion` is informed, this is the answer. Required in this case. Only used in public registration.
     *
     * @return self
     */
    public function setSecurityAnswer($security_answer)
    {
        if (is_null($security_answer)) {
            throw new \InvalidArgumentException('non-nullable security_answer cannot be null');
        }
        $this->container['security_answer'] = $security_answer;

        return $this;
    }

    /**
     * Gets nfc_token
     *
     * @return \OpenAPI\Client\Model\UserNewAllOfNfcToken|null
     */
    public function getNfcToken()
    {
        return $this->container['nfc_token'];
    }

    /**
     * Sets nfc_token
     *
     * @param \OpenAPI\Client\Model\UserNewAllOfNfcToken|null $nfc_token nfc_token
     *
     * @return self
     */
    public function setNfcToken($nfc_token)
    {
        if (is_null($nfc_token)) {
            throw new \InvalidArgumentException('non-nullable nfc_token cannot be null');
        }
        $this->container['nfc_token'] = $nfc_token;

        return $this;
    }

    /**
     * Gets invite_token
     *
     * @return string|null
     */
    public function getInviteToken()
    {
        return $this->container['invite_token'];
    }

    /**
     * Sets invite_token
     *
     * @param string|null $invite_token A token generated by sending an invitation for new users. When given, the e-mail will be pre-filled, and if the same e-mail address is used, it won't need to be validated, because the token was previously sent to that e-mail address. Also, if the link was sent by a broker, that broker will be immediately assigned to the the newly registered user. Only used for public registrations.
     *
     * @return self
     */
    public function setInviteToken($invite_token)
    {
        if (is_null($invite_token)) {
            throw new \InvalidArgumentException('non-nullable invite_token cannot be null');
        }
        $this->container['invite_token'] = $invite_token;

        return $this;
    }

    /**
     * Gets external_payment_token
     *
     * @return string|null
     */
    public function getExternalPaymentToken()
    {
        return $this->container['external_payment_token'];
    }

    /**
     * Sets external_payment_token
     *
     * @param string|null $external_payment_token The payment token generated by sending a external payment for new users. When given, the e-mail will be filled and it won't need to be validated, because the payment identifier was previously sent to that e-mail address. Only used for public registrations.
     *
     * @return self
     */
    public function setExternalPaymentToken($external_payment_token)
    {
        if (is_null($external_payment_token)) {
            throw new \InvalidArgumentException('non-nullable external_payment_token cannot be null');
        }
        $this->container['external_payment_token'] = $external_payment_token;

        return $this;
    }

    /**
     * Gets user_agent_id
     *
     * @return string|null
     */
    public function getUserAgentId()
    {
        return $this->container['user_agent_id'];
    }

    /**
     * Sets user_agent_id
     *
     * @param string|null $user_agent_id A stable client-side generated id, which will be used to identify the device from which the user is being registered. It will be used when a trusted device activation is requested, in case the activation comes from the same device and the user's email was verified, then an activation code would not be required. Only used for public registrations.
     *
     * @return self
     */
    public function setUserAgentId($user_agent_id)
    {
        if (is_null($user_agent_id)) {
            throw new \InvalidArgumentException('non-nullable user_agent_id cannot be null');
        }
        $this->container['user_agent_id'] = $user_agent_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


