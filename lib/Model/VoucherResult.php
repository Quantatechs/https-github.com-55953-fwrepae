<?php
/**
 * VoucherResult
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VoucherResult Class Doc Comment
 *
 * @category Class
 * @description Result of a voucher search
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VoucherResult implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VoucherResult';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'token' => 'string',
        'status' => '\OpenAPI\Client\Model\VoucherStatusEnum',
        'amount' => 'float',
        'balance' => 'float',
        'email' => 'string',
        'expiration_date' => '\DateTime',
        'type' => '\OpenAPI\Client\Model\VoucherType',
        'creation_type' => '\OpenAPI\Client\Model\VoucherCreationTypeEnum',
        'gift' => 'bool',
        'owner' => '\OpenAPI\Client\Model\VoucherResultAllOfOwner',
        'buyer' => '\OpenAPI\Client\Model\VoucherResultAllOfBuyer',
        'creation_date' => '\DateTime',
        'redeem_after_date' => '\DateTime',
        'redeem_on_week_days' => '\OpenAPI\Client\Model\WeekDayEnum[]',
        'redeemer' => '\OpenAPI\Client\Model\VoucherResultAllOfRedeemer',
        'redeem_by' => '\OpenAPI\Client\Model\VoucherResultAllOfRedeemBy',
        'redeem_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'token' => null,
        'status' => null,
        'amount' => 'number',
        'balance' => 'number',
        'email' => null,
        'expiration_date' => 'date-time',
        'type' => null,
        'creation_type' => null,
        'gift' => null,
        'owner' => null,
        'buyer' => null,
        'creation_date' => 'date-time',
        'redeem_after_date' => 'date-time',
        'redeem_on_week_days' => null,
        'redeemer' => null,
        'redeem_by' => null,
        'redeem_date' => 'date-time'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'token' => false,
        'status' => false,
        'amount' => false,
        'balance' => false,
        'email' => false,
        'expiration_date' => false,
        'type' => false,
        'creation_type' => false,
        'gift' => false,
        'owner' => false,
        'buyer' => false,
        'creation_date' => false,
        'redeem_after_date' => false,
        'redeem_on_week_days' => false,
        'redeemer' => false,
        'redeem_by' => false,
        'redeem_date' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'token' => 'token',
        'status' => 'status',
        'amount' => 'amount',
        'balance' => 'balance',
        'email' => 'email',
        'expiration_date' => 'expirationDate',
        'type' => 'type',
        'creation_type' => 'creationType',
        'gift' => 'gift',
        'owner' => 'owner',
        'buyer' => 'buyer',
        'creation_date' => 'creationDate',
        'redeem_after_date' => 'redeemAfterDate',
        'redeem_on_week_days' => 'redeemOnWeekDays',
        'redeemer' => 'redeemer',
        'redeem_by' => 'redeemBy',
        'redeem_date' => 'redeemDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'token' => 'setToken',
        'status' => 'setStatus',
        'amount' => 'setAmount',
        'balance' => 'setBalance',
        'email' => 'setEmail',
        'expiration_date' => 'setExpirationDate',
        'type' => 'setType',
        'creation_type' => 'setCreationType',
        'gift' => 'setGift',
        'owner' => 'setOwner',
        'buyer' => 'setBuyer',
        'creation_date' => 'setCreationDate',
        'redeem_after_date' => 'setRedeemAfterDate',
        'redeem_on_week_days' => 'setRedeemOnWeekDays',
        'redeemer' => 'setRedeemer',
        'redeem_by' => 'setRedeemBy',
        'redeem_date' => 'setRedeemDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'token' => 'getToken',
        'status' => 'getStatus',
        'amount' => 'getAmount',
        'balance' => 'getBalance',
        'email' => 'getEmail',
        'expiration_date' => 'getExpirationDate',
        'type' => 'getType',
        'creation_type' => 'getCreationType',
        'gift' => 'getGift',
        'owner' => 'getOwner',
        'buyer' => 'getBuyer',
        'creation_date' => 'getCreationDate',
        'redeem_after_date' => 'getRedeemAfterDate',
        'redeem_on_week_days' => 'getRedeemOnWeekDays',
        'redeemer' => 'getRedeemer',
        'redeem_by' => 'getRedeemBy',
        'redeem_date' => 'getRedeemDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('token', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('creation_type', $data ?? [], null);
        $this->setIfExists('gift', $data ?? [], null);
        $this->setIfExists('owner', $data ?? [], null);
        $this->setIfExists('buyer', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('redeem_after_date', $data ?? [], null);
        $this->setIfExists('redeem_on_week_days', $data ?? [], null);
        $this->setIfExists('redeemer', $data ?? [], null);
        $this->setIfExists('redeem_by', $data ?? [], null);
        $this->setIfExists('redeem_date', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The internal entity identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets token
     *
     * @return string|null
     */
    public function getToken()
    {
        return $this->container['token'];
    }

    /**
     * Sets token
     *
     * @param string|null $token The voucher token
     *
     * @return self
     */
    public function setToken($token)
    {
        if (is_null($token)) {
            throw new \InvalidArgumentException('non-nullable token cannot be null');
        }
        $this->container['token'] = $token;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\VoucherStatusEnum|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\VoucherStatusEnum|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The voucher amount. Only returned when the voucher had a fixed amount when generated.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance The voucher balance.
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The e-mail to which the voucher was sent or which receives notifications.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date The date the voucher expires
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\VoucherType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\VoucherType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets creation_type
     *
     * @return \OpenAPI\Client\Model\VoucherCreationTypeEnum|null
     */
    public function getCreationType()
    {
        return $this->container['creation_type'];
    }

    /**
     * Sets creation_type
     *
     * @param \OpenAPI\Client\Model\VoucherCreationTypeEnum|null $creation_type creation_type
     *
     * @return self
     */
    public function setCreationType($creation_type)
    {
        if (is_null($creation_type)) {
            throw new \InvalidArgumentException('non-nullable creation_type cannot be null');
        }
        $this->container['creation_type'] = $creation_type;

        return $this;
    }

    /**
     * Gets gift
     *
     * @return bool|null
     */
    public function getGift()
    {
        return $this->container['gift'];
    }

    /**
     * Sets gift
     *
     * @param bool|null $gift Indicates whether this voucher was bought as a gift. Only returned when `creationType` is `bought`.
     *
     * @return self
     */
    public function setGift($gift)
    {
        if (is_null($gift)) {
            throw new \InvalidArgumentException('non-nullable gift cannot be null');
        }
        $this->container['gift'] = $gift;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \OpenAPI\Client\Model\VoucherResultAllOfOwner|null
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \OpenAPI\Client\Model\VoucherResultAllOfOwner|null $owner owner
     *
     * @return self
     */
    public function setOwner($owner)
    {
        if (is_null($owner)) {
            throw new \InvalidArgumentException('non-nullable owner cannot be null');
        }
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets buyer
     *
     * @return \OpenAPI\Client\Model\VoucherResultAllOfBuyer|null
     */
    public function getBuyer()
    {
        return $this->container['buyer'];
    }

    /**
     * Sets buyer
     *
     * @param \OpenAPI\Client\Model\VoucherResultAllOfBuyer|null $buyer buyer
     *
     * @return self
     */
    public function setBuyer($buyer)
    {
        if (is_null($buyer)) {
            throw new \InvalidArgumentException('non-nullable buyer cannot be null');
        }
        $this->container['buyer'] = $buyer;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date The date a voucher was generated or bought
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            throw new \InvalidArgumentException('non-nullable creation_date cannot be null');
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets redeem_after_date
     *
     * @return \DateTime|null
     */
    public function getRedeemAfterDate()
    {
        return $this->container['redeem_after_date'];
    }

    /**
     * Sets redeem_after_date
     *
     * @param \DateTime|null $redeem_after_date The date after which a voucher can be redeemed. Only returned when the voucher status is neither `redeemed` nor `canceled`. Also not returned when searching for redeemed vouchers of a specific user.
     *
     * @return self
     */
    public function setRedeemAfterDate($redeem_after_date)
    {
        if (is_null($redeem_after_date)) {
            throw new \InvalidArgumentException('non-nullable redeem_after_date cannot be null');
        }
        $this->container['redeem_after_date'] = $redeem_after_date;

        return $this;
    }

    /**
     * Gets redeem_on_week_days
     *
     * @return \OpenAPI\Client\Model\WeekDayEnum[]|null
     */
    public function getRedeemOnWeekDays()
    {
        return $this->container['redeem_on_week_days'];
    }

    /**
     * Sets redeem_on_week_days
     *
     * @param \OpenAPI\Client\Model\WeekDayEnum[]|null $redeem_on_week_days The days of the week a voucher can be redeemed. Only returned when the voucher status is neither `redeemed` nor `canceled`. Also not returned when searching for redeemed vouchers of a specific user.
     *
     * @return self
     */
    public function setRedeemOnWeekDays($redeem_on_week_days)
    {
        if (is_null($redeem_on_week_days)) {
            throw new \InvalidArgumentException('non-nullable redeem_on_week_days cannot be null');
        }
        $this->container['redeem_on_week_days'] = $redeem_on_week_days;

        return $this;
    }

    /**
     * Gets redeemer
     *
     * @return \OpenAPI\Client\Model\VoucherResultAllOfRedeemer|null
     * @deprecated
     */
    public function getRedeemer()
    {
        return $this->container['redeemer'];
    }

    /**
     * Sets redeemer
     *
     * @param \OpenAPI\Client\Model\VoucherResultAllOfRedeemer|null $redeemer redeemer
     *
     * @return self
     * @deprecated
     */
    public function setRedeemer($redeemer)
    {
        if (is_null($redeemer)) {
            throw new \InvalidArgumentException('non-nullable redeemer cannot be null');
        }
        $this->container['redeemer'] = $redeemer;

        return $this;
    }

    /**
     * Gets redeem_by
     *
     * @return \OpenAPI\Client\Model\VoucherResultAllOfRedeemBy|null
     * @deprecated
     */
    public function getRedeemBy()
    {
        return $this->container['redeem_by'];
    }

    /**
     * Sets redeem_by
     *
     * @param \OpenAPI\Client\Model\VoucherResultAllOfRedeemBy|null $redeem_by redeem_by
     *
     * @return self
     * @deprecated
     */
    public function setRedeemBy($redeem_by)
    {
        if (is_null($redeem_by)) {
            throw new \InvalidArgumentException('non-nullable redeem_by cannot be null');
        }
        $this->container['redeem_by'] = $redeem_by;

        return $this;
    }

    /**
     * Gets redeem_date
     *
     * @return \DateTime|null
     * @deprecated
     */
    public function getRedeemDate()
    {
        return $this->container['redeem_date'];
    }

    /**
     * Sets redeem_date
     *
     * @param \DateTime|null $redeem_date This field doesn't belong to the voucher itself, but to the transaction. Search for voucher transactions instead.
     *
     * @return self
     * @deprecated
     */
    public function setRedeemDate($redeem_date)
    {
        if (is_null($redeem_date)) {
            throw new \InvalidArgumentException('non-nullable redeem_date cannot be null');
        }
        $this->container['redeem_date'] = $redeem_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


