<?php
/**
 * UserAuth
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserAuth Class Doc Comment
 *
 * @category Class
 * @description Contains information returned after logging in an user.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserAuth implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserAuth';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user' => '\OpenAPI\Client\Model\User',
        'language' => '\OpenAPI\Client\Model\VersionedEntity',
        'global' => 'bool',
        'system_administrator' => 'bool',
        'alias_operator' => 'bool',
        'permissions' => '\OpenAPI\Client\Model\Permissions',
        'session_token' => 'string',
        'trusted_session' => 'bool',
        'access_client' => '\OpenAPI\Client\Model\EntityReference',
        'principal_type' => '\OpenAPI\Client\Model\EntityReference',
        'principal' => 'string',
        'password_type' => '\OpenAPI\Client\Model\PasswordType',
        'expired_password' => 'bool',
        'pending_agreements' => 'bool',
        'ever_accepted_agreements' => 'bool',
        'login_confirmation' => '\OpenAPI\Client\Model\PasswordInput',
        'totp_enabled' => 'bool',
        'unauthorized_address' => 'bool',
        'allow_pin' => 'bool',
        'role' => '\OpenAPI\Client\Model\RoleEnum',
        'secondary_password_type' => '\OpenAPI\Client\Model\PasswordType',
        'expired_secondary_password' => 'bool',
        'pending_secondary_password' => 'bool',
        'configuration' => '\OpenAPI\Client\Model\UserAuthAllOfConfiguration',
        'group' => '\OpenAPI\Client\Model\Group'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user' => null,
        'language' => null,
        'global' => null,
        'system_administrator' => null,
        'alias_operator' => null,
        'permissions' => null,
        'session_token' => null,
        'trusted_session' => null,
        'access_client' => null,
        'principal_type' => null,
        'principal' => null,
        'password_type' => null,
        'expired_password' => null,
        'pending_agreements' => null,
        'ever_accepted_agreements' => null,
        'login_confirmation' => null,
        'totp_enabled' => null,
        'unauthorized_address' => null,
        'allow_pin' => null,
        'role' => null,
        'secondary_password_type' => null,
        'expired_secondary_password' => null,
        'pending_secondary_password' => null,
        'configuration' => null,
        'group' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user' => false,
        'language' => false,
        'global' => false,
        'system_administrator' => false,
        'alias_operator' => false,
        'permissions' => false,
        'session_token' => false,
        'trusted_session' => false,
        'access_client' => false,
        'principal_type' => false,
        'principal' => false,
        'password_type' => false,
        'expired_password' => false,
        'pending_agreements' => false,
        'ever_accepted_agreements' => false,
        'login_confirmation' => false,
        'totp_enabled' => false,
        'unauthorized_address' => false,
        'allow_pin' => false,
        'role' => false,
        'secondary_password_type' => false,
        'expired_secondary_password' => false,
        'pending_secondary_password' => false,
        'configuration' => false,
        'group' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user' => 'user',
        'language' => 'language',
        'global' => 'global',
        'system_administrator' => 'systemAdministrator',
        'alias_operator' => 'aliasOperator',
        'permissions' => 'permissions',
        'session_token' => 'sessionToken',
        'trusted_session' => 'trustedSession',
        'access_client' => 'accessClient',
        'principal_type' => 'principalType',
        'principal' => 'principal',
        'password_type' => 'passwordType',
        'expired_password' => 'expiredPassword',
        'pending_agreements' => 'pendingAgreements',
        'ever_accepted_agreements' => 'everAcceptedAgreements',
        'login_confirmation' => 'loginConfirmation',
        'totp_enabled' => 'totpEnabled',
        'unauthorized_address' => 'unauthorizedAddress',
        'allow_pin' => 'allowPin',
        'role' => 'role',
        'secondary_password_type' => 'secondaryPasswordType',
        'expired_secondary_password' => 'expiredSecondaryPassword',
        'pending_secondary_password' => 'pendingSecondaryPassword',
        'configuration' => 'configuration',
        'group' => 'group'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user' => 'setUser',
        'language' => 'setLanguage',
        'global' => 'setGlobal',
        'system_administrator' => 'setSystemAdministrator',
        'alias_operator' => 'setAliasOperator',
        'permissions' => 'setPermissions',
        'session_token' => 'setSessionToken',
        'trusted_session' => 'setTrustedSession',
        'access_client' => 'setAccessClient',
        'principal_type' => 'setPrincipalType',
        'principal' => 'setPrincipal',
        'password_type' => 'setPasswordType',
        'expired_password' => 'setExpiredPassword',
        'pending_agreements' => 'setPendingAgreements',
        'ever_accepted_agreements' => 'setEverAcceptedAgreements',
        'login_confirmation' => 'setLoginConfirmation',
        'totp_enabled' => 'setTotpEnabled',
        'unauthorized_address' => 'setUnauthorizedAddress',
        'allow_pin' => 'setAllowPin',
        'role' => 'setRole',
        'secondary_password_type' => 'setSecondaryPasswordType',
        'expired_secondary_password' => 'setExpiredSecondaryPassword',
        'pending_secondary_password' => 'setPendingSecondaryPassword',
        'configuration' => 'setConfiguration',
        'group' => 'setGroup'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user' => 'getUser',
        'language' => 'getLanguage',
        'global' => 'getGlobal',
        'system_administrator' => 'getSystemAdministrator',
        'alias_operator' => 'getAliasOperator',
        'permissions' => 'getPermissions',
        'session_token' => 'getSessionToken',
        'trusted_session' => 'getTrustedSession',
        'access_client' => 'getAccessClient',
        'principal_type' => 'getPrincipalType',
        'principal' => 'getPrincipal',
        'password_type' => 'getPasswordType',
        'expired_password' => 'getExpiredPassword',
        'pending_agreements' => 'getPendingAgreements',
        'ever_accepted_agreements' => 'getEverAcceptedAgreements',
        'login_confirmation' => 'getLoginConfirmation',
        'totp_enabled' => 'getTotpEnabled',
        'unauthorized_address' => 'getUnauthorizedAddress',
        'allow_pin' => 'getAllowPin',
        'role' => 'getRole',
        'secondary_password_type' => 'getSecondaryPasswordType',
        'expired_secondary_password' => 'getExpiredSecondaryPassword',
        'pending_secondary_password' => 'getPendingSecondaryPassword',
        'configuration' => 'getConfiguration',
        'group' => 'getGroup'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('language', $data ?? [], null);
        $this->setIfExists('global', $data ?? [], null);
        $this->setIfExists('system_administrator', $data ?? [], null);
        $this->setIfExists('alias_operator', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('session_token', $data ?? [], null);
        $this->setIfExists('trusted_session', $data ?? [], null);
        $this->setIfExists('access_client', $data ?? [], null);
        $this->setIfExists('principal_type', $data ?? [], null);
        $this->setIfExists('principal', $data ?? [], null);
        $this->setIfExists('password_type', $data ?? [], null);
        $this->setIfExists('expired_password', $data ?? [], null);
        $this->setIfExists('pending_agreements', $data ?? [], null);
        $this->setIfExists('ever_accepted_agreements', $data ?? [], null);
        $this->setIfExists('login_confirmation', $data ?? [], null);
        $this->setIfExists('totp_enabled', $data ?? [], null);
        $this->setIfExists('unauthorized_address', $data ?? [], null);
        $this->setIfExists('allow_pin', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('secondary_password_type', $data ?? [], null);
        $this->setIfExists('expired_secondary_password', $data ?? [], null);
        $this->setIfExists('pending_secondary_password', $data ?? [], null);
        $this->setIfExists('configuration', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\User|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\User|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \OpenAPI\Client\Model\VersionedEntity|null
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \OpenAPI\Client\Model\VersionedEntity|null $language language
     *
     * @return self
     */
    public function setLanguage($language)
    {
        if (is_null($language)) {
            throw new \InvalidArgumentException('non-nullable language cannot be null');
        }
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets global
     *
     * @return bool|null
     */
    public function getGlobal()
    {
        return $this->container['global'];
    }

    /**
     * Sets global
     *
     * @param bool|null $global Indicates whether this user belongs to global mode. Only returned if there is an authenticated user.
     *
     * @return self
     */
    public function setGlobal($global)
    {
        if (is_null($global)) {
            throw new \InvalidArgumentException('non-nullable global cannot be null');
        }
        $this->container['global'] = $global;

        return $this;
    }

    /**
     * Gets system_administrator
     *
     * @return bool|null
     */
    public function getSystemAdministrator()
    {
        return $this->container['system_administrator'];
    }

    /**
     * Sets system_administrator
     *
     * @param bool|null $system_administrator Indicates whether this user is a system administrator, that is, either belongs to the global system administrators group or to the network system administrators group. Only returned if `role` is `administrator`.
     *
     * @return self
     */
    public function setSystemAdministrator($system_administrator)
    {
        if (is_null($system_administrator)) {
            throw new \InvalidArgumentException('non-nullable system_administrator cannot be null');
        }
        $this->container['system_administrator'] = $system_administrator;

        return $this;
    }

    /**
     * Gets alias_operator
     *
     * @return bool|null
     */
    public function getAliasOperator()
    {
        return $this->container['alias_operator'];
    }

    /**
     * Sets alias_operator
     *
     * @param bool|null $alias_operator Indicates whether this user is an operator which is an alias of his owner member, that is, has all member permissions, and is not restricted to an operator group. Only returned if `role` is `operator`.
     *
     * @return self
     */
    public function setAliasOperator($alias_operator)
    {
        if (is_null($alias_operator)) {
            throw new \InvalidArgumentException('non-nullable alias_operator cannot be null');
        }
        $this->container['alias_operator'] = $alias_operator;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \OpenAPI\Client\Model\Permissions|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \OpenAPI\Client\Model\Permissions|null $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        if (is_null($permissions)) {
            throw new \InvalidArgumentException('non-nullable permissions cannot be null');
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets session_token
     *
     * @return string|null
     */
    public function getSessionToken()
    {
        return $this->container['session_token'];
    }

    /**
     * Sets session_token
     *
     * @param string|null $session_token A token that must be passed in on the Session-Token header on subsequent requests instead of the login name and password. Only returned if using a session authentication.
     *
     * @return self
     */
    public function setSessionToken($session_token)
    {
        if (is_null($session_token)) {
            throw new \InvalidArgumentException('non-nullable session_token cannot be null');
        }
        $this->container['session_token'] = $session_token;

        return $this;
    }

    /**
     * Gets trusted_session
     *
     * @return bool|null
     */
    public function getTrustedSession()
    {
        return $this->container['trusted_session'];
    }

    /**
     * Sets trusted_session
     *
     * @param bool|null $trusted_session Whether the current session is a trusted one or not. If trusted then no confirmation password (if any) will be required for subsequent requests in the same session. Only returned if using a session authentication.
     *
     * @return self
     */
    public function setTrustedSession($trusted_session)
    {
        if (is_null($trusted_session)) {
            throw new \InvalidArgumentException('non-nullable trusted_session cannot be null');
        }
        $this->container['trusted_session'] = $trusted_session;

        return $this;
    }

    /**
     * Gets access_client
     *
     * @return \OpenAPI\Client\Model\EntityReference|null
     */
    public function getAccessClient()
    {
        return $this->container['access_client'];
    }

    /**
     * Sets access_client
     *
     * @param \OpenAPI\Client\Model\EntityReference|null $access_client access_client
     *
     * @return self
     */
    public function setAccessClient($access_client)
    {
        if (is_null($access_client)) {
            throw new \InvalidArgumentException('non-nullable access_client cannot be null');
        }
        $this->container['access_client'] = $access_client;

        return $this;
    }

    /**
     * Gets principal_type
     *
     * @return \OpenAPI\Client\Model\EntityReference|null
     */
    public function getPrincipalType()
    {
        return $this->container['principal_type'];
    }

    /**
     * Sets principal_type
     *
     * @param \OpenAPI\Client\Model\EntityReference|null $principal_type principal_type
     *
     * @return self
     */
    public function setPrincipalType($principal_type)
    {
        if (is_null($principal_type)) {
            throw new \InvalidArgumentException('non-nullable principal_type cannot be null');
        }
        $this->container['principal_type'] = $principal_type;

        return $this;
    }

    /**
     * Gets principal
     *
     * @return string|null
     */
    public function getPrincipal()
    {
        return $this->container['principal'];
    }

    /**
     * Sets principal
     *
     * @param string|null $principal The principal (user identification) used on authentication. Can be the value of the login name, e-mail, account number, custom field or token used on authentication or at the moment of login. Is not returned when the authentication was performed via access client.
     *
     * @return self
     */
    public function setPrincipal($principal)
    {
        if (is_null($principal)) {
            throw new \InvalidArgumentException('non-nullable principal cannot be null');
        }
        $this->container['principal'] = $principal;

        return $this;
    }

    /**
     * Gets password_type
     *
     * @return \OpenAPI\Client\Model\PasswordType|null
     */
    public function getPasswordType()
    {
        return $this->container['password_type'];
    }

    /**
     * Sets password_type
     *
     * @param \OpenAPI\Client\Model\PasswordType|null $password_type password_type
     *
     * @return self
     */
    public function setPasswordType($password_type)
    {
        if (is_null($password_type)) {
            throw new \InvalidArgumentException('non-nullable password_type cannot be null');
        }
        $this->container['password_type'] = $password_type;

        return $this;
    }

    /**
     * Gets expired_password
     *
     * @return bool|null
     */
    public function getExpiredPassword()
    {
        return $this->container['expired_password'];
    }

    /**
     * Sets expired_password
     *
     * @param bool|null $expired_password Returns whether the current access password is expired. If so, the user will have to change the password, or all other actions will be denied.
     *
     * @return self
     */
    public function setExpiredPassword($expired_password)
    {
        if (is_null($expired_password)) {
            throw new \InvalidArgumentException('non-nullable expired_password cannot be null');
        }
        $this->container['expired_password'] = $expired_password;

        return $this;
    }

    /**
     * Gets pending_agreements
     *
     * @return bool|null
     */
    public function getPendingAgreements()
    {
        return $this->container['pending_agreements'];
    }

    /**
     * Sets pending_agreements
     *
     * @param bool|null $pending_agreements Returns whether the current user has some agreements pending accept. If so, a call to `GET /agreements/pending` should be performed to get the content of the pending agreements, and then a `POST /agreements/pending{id_or_internal_name}` to accept each agreement.
     *
     * @return self
     */
    public function setPendingAgreements($pending_agreements)
    {
        if (is_null($pending_agreements)) {
            throw new \InvalidArgumentException('non-nullable pending_agreements cannot be null');
        }
        $this->container['pending_agreements'] = $pending_agreements;

        return $this;
    }

    /**
     * Gets ever_accepted_agreements
     *
     * @return bool|null
     */
    public function getEverAcceptedAgreements()
    {
        return $this->container['ever_accepted_agreements'];
    }

    /**
     * Sets ever_accepted_agreements
     *
     * @param bool|null $ever_accepted_agreements Returns whether the current user has ever accepted any agreement. This is always false for operators, as operators themselves don't accept agreements. However, their owner members do.
     *
     * @return self
     */
    public function setEverAcceptedAgreements($ever_accepted_agreements)
    {
        if (is_null($ever_accepted_agreements)) {
            throw new \InvalidArgumentException('non-nullable ever_accepted_agreements cannot be null');
        }
        $this->container['ever_accepted_agreements'] = $ever_accepted_agreements;

        return $this;
    }

    /**
     * Gets login_confirmation
     *
     * @return \OpenAPI\Client\Model\PasswordInput|null
     */
    public function getLoginConfirmation()
    {
        return $this->container['login_confirmation'];
    }

    /**
     * Sets login_confirmation
     *
     * @param \OpenAPI\Client\Model\PasswordInput|null $login_confirmation login_confirmation
     *
     * @return self
     */
    public function setLoginConfirmation($login_confirmation)
    {
        if (is_null($login_confirmation)) {
            throw new \InvalidArgumentException('non-nullable login_confirmation cannot be null');
        }
        $this->container['login_confirmation'] = $login_confirmation;

        return $this;
    }

    /**
     * Gets totp_enabled
     *
     * @return bool|null
     */
    public function getTotpEnabled()
    {
        return $this->container['totp_enabled'];
    }

    /**
     * Sets totp_enabled
     *
     * @param bool|null $totp_enabled Indicates whether an authenticator app (TOTP) is enabled for the user. The user himself may have or not an active TOTP.
     *
     * @return self
     */
    public function setTotpEnabled($totp_enabled)
    {
        if (is_null($totp_enabled)) {
            throw new \InvalidArgumentException('non-nullable totp_enabled cannot be null');
        }
        $this->container['totp_enabled'] = $totp_enabled;

        return $this;
    }

    /**
     * Gets unauthorized_address
     *
     * @return bool|null
     */
    public function getUnauthorizedAddress()
    {
        return $this->container['unauthorized_address'];
    }

    /**
     * Sets unauthorized_address
     *
     * @param bool|null $unauthorized_address Returns whether the current guest session is not authorized from the client IP address. This is returned for guests, rather than enforced, because it could be too early to enforce it. For example, even the language to display an error message is returned from a server call. If we would deny it, clients could not even know which message to show.
     *
     * @return self
     */
    public function setUnauthorizedAddress($unauthorized_address)
    {
        if (is_null($unauthorized_address)) {
            throw new \InvalidArgumentException('non-nullable unauthorized_address cannot be null');
        }
        $this->container['unauthorized_address'] = $unauthorized_address;

        return $this;
    }

    /**
     * Gets allow_pin
     *
     * @return bool|null
     */
    public function getAllowPin()
    {
        return $this->container['allow_pin'];
    }

    /**
     * Sets allow_pin
     *
     * @param bool|null $allow_pin Returns whether the configuration for the current channel has device PIN enabled.
     *
     * @return self
     */
    public function setAllowPin($allow_pin)
    {
        if (is_null($allow_pin)) {
            throw new \InvalidArgumentException('non-nullable allow_pin cannot be null');
        }
        $this->container['allow_pin'] = $allow_pin;

        return $this;
    }

    /**
     * Gets role
     *
     * @return \OpenAPI\Client\Model\RoleEnum|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param \OpenAPI\Client\Model\RoleEnum|null $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets secondary_password_type
     *
     * @return \OpenAPI\Client\Model\PasswordType|null
     * @deprecated
     */
    public function getSecondaryPasswordType()
    {
        return $this->container['secondary_password_type'];
    }

    /**
     * Sets secondary_password_type
     *
     * @param \OpenAPI\Client\Model\PasswordType|null $secondary_password_type secondary_password_type
     *
     * @return self
     * @deprecated
     */
    public function setSecondaryPasswordType($secondary_password_type)
    {
        if (is_null($secondary_password_type)) {
            throw new \InvalidArgumentException('non-nullable secondary_password_type cannot be null');
        }
        $this->container['secondary_password_type'] = $secondary_password_type;

        return $this;
    }

    /**
     * Gets expired_secondary_password
     *
     * @return bool|null
     * @deprecated
     */
    public function getExpiredSecondaryPassword()
    {
        return $this->container['expired_secondary_password'];
    }

    /**
     * Sets expired_secondary_password
     *
     * @param bool|null $expired_secondary_password Use `loginConfirmation.passwordStatus in [expired, reset]`
     *
     * @return self
     * @deprecated
     */
    public function setExpiredSecondaryPassword($expired_secondary_password)
    {
        if (is_null($expired_secondary_password)) {
            throw new \InvalidArgumentException('non-nullable expired_secondary_password cannot be null');
        }
        $this->container['expired_secondary_password'] = $expired_secondary_password;

        return $this;
    }

    /**
     * Gets pending_secondary_password
     *
     * @return bool|null
     * @deprecated
     */
    public function getPendingSecondaryPassword()
    {
        return $this->container['pending_secondary_password'];
    }

    /**
     * Sets pending_secondary_password
     *
     * @param bool|null $pending_secondary_password Use `loginConfirmation != null`
     *
     * @return self
     * @deprecated
     */
    public function setPendingSecondaryPassword($pending_secondary_password)
    {
        if (is_null($pending_secondary_password)) {
            throw new \InvalidArgumentException('non-nullable pending_secondary_password cannot be null');
        }
        $this->container['pending_secondary_password'] = $pending_secondary_password;

        return $this;
    }

    /**
     * Gets configuration
     *
     * @return \OpenAPI\Client\Model\UserAuthAllOfConfiguration|null
     */
    public function getConfiguration()
    {
        return $this->container['configuration'];
    }

    /**
     * Sets configuration
     *
     * @param \OpenAPI\Client\Model\UserAuthAllOfConfiguration|null $configuration configuration
     *
     * @return self
     */
    public function setConfiguration($configuration)
    {
        if (is_null($configuration)) {
            throw new \InvalidArgumentException('non-nullable configuration cannot be null');
        }
        $this->container['configuration'] = $configuration;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \OpenAPI\Client\Model\Group|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \OpenAPI\Client\Model\Group|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


