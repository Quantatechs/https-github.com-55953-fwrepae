<?php
/**
 * UserView
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserView Class Doc Comment
 *
 * @category Class
 * @description Represents a user with all data for viewing the profile
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserView implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'display' => 'string',
        'image' => '\OpenAPI\Client\Model\UserAllOfImage',
        'user' => '\OpenAPI\Client\Model\UserAllOfUser',
        'locator' => 'string',
        'locator_principal' => '\OpenAPI\Client\Model\UserAllOfLocatorPrincipal',
        'name' => 'string',
        'username' => 'string',
        'email' => 'string',
        'name_label' => 'string',
        'email_pending_validation' => 'string',
        'enabled_profile_fields' => 'string[]',
        'custom_values' => '\OpenAPI\Client\Model\UserCustomFieldValue[]',
        'group' => '\OpenAPI\Client\Model\UserViewAllOfGroup',
        'group_set' => '\OpenAPI\Client\Model\UserViewAllOfGroupSet',
        'status' => '\OpenAPI\Client\Model\UserViewAllOfStatus',
        'additional_images' => '\OpenAPI\Client\Model\Image[]',
        'addresses' => '\OpenAPI\Client\Model\AddressView[]',
        'phones' => '\OpenAPI\Client\Model\PhoneView[]',
        'contact_infos' => '\OpenAPI\Client\Model\ContactInfoDetailed[]',
        'contact' => '\OpenAPI\Client\Model\UserViewAllOfContact',
        'registration_date' => '\DateTime',
        'activation_date' => '\DateTime',
        'online' => 'bool',
        'last_login' => '\DateTime',
        'first_login' => '\DateTime',
        'invited_by' => '\OpenAPI\Client\Model\UserViewAllOfInvitedBy',
        'references' => '\OpenAPI\Client\Model\UserViewAllOfReferences',
        'payment_feedbacks' => '\OpenAPI\Client\Model\UserViewAllOfPaymentFeedbacks',
        'permissions' => '\OpenAPI\Client\Model\UserViewAllOfPermissions',
        'brokers' => '\OpenAPI\Client\Model\BrokerView[]',
        'role' => '\OpenAPI\Client\Model\RoleEnum',
        'relationship' => '\OpenAPI\Client\Model\UserRelationshipEnum',
        'records' => 'array<string,\OpenAPI\Client\Model\UserRecords>',
        'documents' => '\OpenAPI\Client\Model\UserDocuments',
        'accounts' => '\OpenAPI\Client\Model\AccountWithStatus[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'display' => null,
        'image' => null,
        'user' => null,
        'locator' => null,
        'locator_principal' => null,
        'name' => null,
        'username' => null,
        'email' => null,
        'name_label' => null,
        'email_pending_validation' => null,
        'enabled_profile_fields' => null,
        'custom_values' => null,
        'group' => null,
        'group_set' => null,
        'status' => null,
        'additional_images' => null,
        'addresses' => null,
        'phones' => null,
        'contact_infos' => null,
        'contact' => null,
        'registration_date' => 'date-time',
        'activation_date' => 'date-time',
        'online' => null,
        'last_login' => 'date-time',
        'first_login' => 'date-time',
        'invited_by' => null,
        'references' => null,
        'payment_feedbacks' => null,
        'permissions' => null,
        'brokers' => null,
        'role' => null,
        'relationship' => null,
        'records' => null,
        'documents' => null,
        'accounts' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'display' => false,
        'image' => false,
        'user' => false,
        'locator' => false,
        'locator_principal' => false,
        'name' => false,
        'username' => false,
        'email' => false,
        'name_label' => false,
        'email_pending_validation' => false,
        'enabled_profile_fields' => false,
        'custom_values' => false,
        'group' => false,
        'group_set' => false,
        'status' => false,
        'additional_images' => false,
        'addresses' => false,
        'phones' => false,
        'contact_infos' => false,
        'contact' => false,
        'registration_date' => false,
        'activation_date' => false,
        'online' => false,
        'last_login' => false,
        'first_login' => false,
        'invited_by' => false,
        'references' => false,
        'payment_feedbacks' => false,
        'permissions' => false,
        'brokers' => false,
        'role' => false,
        'relationship' => false,
        'records' => false,
        'documents' => false,
        'accounts' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'display' => 'display',
        'image' => 'image',
        'user' => 'user',
        'locator' => 'locator',
        'locator_principal' => 'locatorPrincipal',
        'name' => 'name',
        'username' => 'username',
        'email' => 'email',
        'name_label' => 'nameLabel',
        'email_pending_validation' => 'emailPendingValidation',
        'enabled_profile_fields' => 'enabledProfileFields',
        'custom_values' => 'customValues',
        'group' => 'group',
        'group_set' => 'groupSet',
        'status' => 'status',
        'additional_images' => 'additionalImages',
        'addresses' => 'addresses',
        'phones' => 'phones',
        'contact_infos' => 'contactInfos',
        'contact' => 'contact',
        'registration_date' => 'registrationDate',
        'activation_date' => 'activationDate',
        'online' => 'online',
        'last_login' => 'lastLogin',
        'first_login' => 'firstLogin',
        'invited_by' => 'invitedBy',
        'references' => 'references',
        'payment_feedbacks' => 'paymentFeedbacks',
        'permissions' => 'permissions',
        'brokers' => 'brokers',
        'role' => 'role',
        'relationship' => 'relationship',
        'records' => 'records',
        'documents' => 'documents',
        'accounts' => 'accounts'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'display' => 'setDisplay',
        'image' => 'setImage',
        'user' => 'setUser',
        'locator' => 'setLocator',
        'locator_principal' => 'setLocatorPrincipal',
        'name' => 'setName',
        'username' => 'setUsername',
        'email' => 'setEmail',
        'name_label' => 'setNameLabel',
        'email_pending_validation' => 'setEmailPendingValidation',
        'enabled_profile_fields' => 'setEnabledProfileFields',
        'custom_values' => 'setCustomValues',
        'group' => 'setGroup',
        'group_set' => 'setGroupSet',
        'status' => 'setStatus',
        'additional_images' => 'setAdditionalImages',
        'addresses' => 'setAddresses',
        'phones' => 'setPhones',
        'contact_infos' => 'setContactInfos',
        'contact' => 'setContact',
        'registration_date' => 'setRegistrationDate',
        'activation_date' => 'setActivationDate',
        'online' => 'setOnline',
        'last_login' => 'setLastLogin',
        'first_login' => 'setFirstLogin',
        'invited_by' => 'setInvitedBy',
        'references' => 'setReferences',
        'payment_feedbacks' => 'setPaymentFeedbacks',
        'permissions' => 'setPermissions',
        'brokers' => 'setBrokers',
        'role' => 'setRole',
        'relationship' => 'setRelationship',
        'records' => 'setRecords',
        'documents' => 'setDocuments',
        'accounts' => 'setAccounts'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'display' => 'getDisplay',
        'image' => 'getImage',
        'user' => 'getUser',
        'locator' => 'getLocator',
        'locator_principal' => 'getLocatorPrincipal',
        'name' => 'getName',
        'username' => 'getUsername',
        'email' => 'getEmail',
        'name_label' => 'getNameLabel',
        'email_pending_validation' => 'getEmailPendingValidation',
        'enabled_profile_fields' => 'getEnabledProfileFields',
        'custom_values' => 'getCustomValues',
        'group' => 'getGroup',
        'group_set' => 'getGroupSet',
        'status' => 'getStatus',
        'additional_images' => 'getAdditionalImages',
        'addresses' => 'getAddresses',
        'phones' => 'getPhones',
        'contact_infos' => 'getContactInfos',
        'contact' => 'getContact',
        'registration_date' => 'getRegistrationDate',
        'activation_date' => 'getActivationDate',
        'online' => 'getOnline',
        'last_login' => 'getLastLogin',
        'first_login' => 'getFirstLogin',
        'invited_by' => 'getInvitedBy',
        'references' => 'getReferences',
        'payment_feedbacks' => 'getPaymentFeedbacks',
        'permissions' => 'getPermissions',
        'brokers' => 'getBrokers',
        'role' => 'getRole',
        'relationship' => 'getRelationship',
        'records' => 'getRecords',
        'documents' => 'getDocuments',
        'accounts' => 'getAccounts'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('locator', $data ?? [], null);
        $this->setIfExists('locator_principal', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('name_label', $data ?? [], null);
        $this->setIfExists('email_pending_validation', $data ?? [], null);
        $this->setIfExists('enabled_profile_fields', $data ?? [], null);
        $this->setIfExists('custom_values', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('group_set', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('additional_images', $data ?? [], null);
        $this->setIfExists('addresses', $data ?? [], null);
        $this->setIfExists('phones', $data ?? [], null);
        $this->setIfExists('contact_infos', $data ?? [], null);
        $this->setIfExists('contact', $data ?? [], null);
        $this->setIfExists('registration_date', $data ?? [], null);
        $this->setIfExists('activation_date', $data ?? [], null);
        $this->setIfExists('online', $data ?? [], null);
        $this->setIfExists('last_login', $data ?? [], null);
        $this->setIfExists('first_login', $data ?? [], null);
        $this->setIfExists('invited_by', $data ?? [], null);
        $this->setIfExists('references', $data ?? [], null);
        $this->setIfExists('payment_feedbacks', $data ?? [], null);
        $this->setIfExists('permissions', $data ?? [], null);
        $this->setIfExists('brokers', $data ?? [], null);
        $this->setIfExists('role', $data ?? [], null);
        $this->setIfExists('relationship', $data ?? [], null);
        $this->setIfExists('records', $data ?? [], null);
        $this->setIfExists('documents', $data ?? [], null);
        $this->setIfExists('accounts', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The internal entity identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string|null
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string|null $display Contains the formatting of the user according to the configuration. When this object is in the search result, this is only returned if no profile fields are marked to return in user list.
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            throw new \InvalidArgumentException('non-nullable display cannot be null');
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \OpenAPI\Client\Model\UserAllOfImage|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \OpenAPI\Client\Model\UserAllOfImage|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\UserAllOfUser|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\UserAllOfUser|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets locator
     *
     * @return string|null
     */
    public function getLocator()
    {
        return $this->container['locator'];
    }

    /**
     * Sets locator
     *
     * @param string|null $locator Only returned if this user was located from a string value (login name, email, phone, account number, etc). Is the raw string value.
     *
     * @return self
     */
    public function setLocator($locator)
    {
        if (is_null($locator)) {
            throw new \InvalidArgumentException('non-nullable locator cannot be null');
        }
        $this->container['locator'] = $locator;

        return $this;
    }

    /**
     * Gets locator_principal
     *
     * @return \OpenAPI\Client\Model\UserAllOfLocatorPrincipal|null
     */
    public function getLocatorPrincipal()
    {
        return $this->container['locator_principal'];
    }

    /**
     * Sets locator_principal
     *
     * @param \OpenAPI\Client\Model\UserAllOfLocatorPrincipal|null $locator_principal locator_principal
     *
     * @return self
     */
    public function setLocatorPrincipal($locator_principal)
    {
        if (is_null($locator_principal)) {
            throw new \InvalidArgumentException('non-nullable locator_principal cannot be null');
        }
        $this->container['locator_principal'] = $locator_principal;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The user's full name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username The user's login name
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The user's e-mail
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets name_label
     *
     * @return string|null
     */
    public function getNameLabel()
    {
        return $this->container['name_label'];
    }

    /**
     * Sets name_label
     *
     * @param string|null $name_label The label used for the name of users
     *
     * @return self
     */
    public function setNameLabel($name_label)
    {
        if (is_null($name_label)) {
            throw new \InvalidArgumentException('non-nullable name_label cannot be null');
        }
        $this->container['name_label'] = $name_label;

        return $this;
    }

    /**
     * Gets email_pending_validation
     *
     * @return string|null
     */
    public function getEmailPendingValidation()
    {
        return $this->container['email_pending_validation'];
    }

    /**
     * Sets email_pending_validation
     *
     * @param string|null $email_pending_validation Returned for managers / own user when the user has changed his e-mail but hasn't yet validated the new e-mail. The e-mail change validation is a configuration in Cyclos.
     *
     * @return self
     */
    public function setEmailPendingValidation($email_pending_validation)
    {
        if (is_null($email_pending_validation)) {
            throw new \InvalidArgumentException('non-nullable email_pending_validation cannot be null');
        }
        $this->container['email_pending_validation'] = $email_pending_validation;

        return $this;
    }

    /**
     * Gets enabled_profile_fields
     *
     * @return string[]|null
     */
    public function getEnabledProfileFields()
    {
        return $this->container['enabled_profile_fields'];
    }

    /**
     * Sets enabled_profile_fields
     *
     * @param string[]|null $enabled_profile_fields The internal names of profile fields enabled for this user. For example, the user might have no phones, but it might be because he is not allowed to have phones or because there are currently no phones. Same for addresses, images and optional profile fields.
     *
     * @return self
     */
    public function setEnabledProfileFields($enabled_profile_fields)
    {
        if (is_null($enabled_profile_fields)) {
            throw new \InvalidArgumentException('non-nullable enabled_profile_fields cannot be null');
        }
        $this->container['enabled_profile_fields'] = $enabled_profile_fields;

        return $this;
    }

    /**
     * Gets custom_values
     *
     * @return \OpenAPI\Client\Model\UserCustomFieldValue[]|null
     */
    public function getCustomValues()
    {
        return $this->container['custom_values'];
    }

    /**
     * Sets custom_values
     *
     * @param \OpenAPI\Client\Model\UserCustomFieldValue[]|null $custom_values The list of custom field values this user has
     *
     * @return self
     */
    public function setCustomValues($custom_values)
    {
        if (is_null($custom_values)) {
            throw new \InvalidArgumentException('non-nullable custom_values cannot be null');
        }
        $this->container['custom_values'] = $custom_values;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \OpenAPI\Client\Model\UserViewAllOfGroup|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \OpenAPI\Client\Model\UserViewAllOfGroup|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets group_set
     *
     * @return \OpenAPI\Client\Model\UserViewAllOfGroupSet|null
     */
    public function getGroupSet()
    {
        return $this->container['group_set'];
    }

    /**
     * Sets group_set
     *
     * @param \OpenAPI\Client\Model\UserViewAllOfGroupSet|null $group_set group_set
     *
     * @return self
     */
    public function setGroupSet($group_set)
    {
        if (is_null($group_set)) {
            throw new \InvalidArgumentException('non-nullable group_set cannot be null');
        }
        $this->container['group_set'] = $group_set;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\UserViewAllOfStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\UserViewAllOfStatus|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets additional_images
     *
     * @return \OpenAPI\Client\Model\Image[]|null
     */
    public function getAdditionalImages()
    {
        return $this->container['additional_images'];
    }

    /**
     * Sets additional_images
     *
     * @param \OpenAPI\Client\Model\Image[]|null $additional_images Holds the images other than the primary image, which is returned in the `image` field
     *
     * @return self
     */
    public function setAdditionalImages($additional_images)
    {
        if (is_null($additional_images)) {
            throw new \InvalidArgumentException('non-nullable additional_images cannot be null');
        }
        $this->container['additional_images'] = $additional_images;

        return $this;
    }

    /**
     * Gets addresses
     *
     * @return \OpenAPI\Client\Model\AddressView[]|null
     */
    public function getAddresses()
    {
        return $this->container['addresses'];
    }

    /**
     * Sets addresses
     *
     * @param \OpenAPI\Client\Model\AddressView[]|null $addresses Visible addresses
     *
     * @return self
     */
    public function setAddresses($addresses)
    {
        if (is_null($addresses)) {
            throw new \InvalidArgumentException('non-nullable addresses cannot be null');
        }
        $this->container['addresses'] = $addresses;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \OpenAPI\Client\Model\PhoneView[]|null
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param \OpenAPI\Client\Model\PhoneView[]|null $phones Visible phones
     *
     * @return self
     */
    public function setPhones($phones)
    {
        if (is_null($phones)) {
            throw new \InvalidArgumentException('non-nullable phones cannot be null');
        }
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets contact_infos
     *
     * @return \OpenAPI\Client\Model\ContactInfoDetailed[]|null
     */
    public function getContactInfos()
    {
        return $this->container['contact_infos'];
    }

    /**
     * Sets contact_infos
     *
     * @param \OpenAPI\Client\Model\ContactInfoDetailed[]|null $contact_infos Visible public contact information
     *
     * @return self
     */
    public function setContactInfos($contact_infos)
    {
        if (is_null($contact_infos)) {
            throw new \InvalidArgumentException('non-nullable contact_infos cannot be null');
        }
        $this->container['contact_infos'] = $contact_infos;

        return $this;
    }

    /**
     * Gets contact
     *
     * @return \OpenAPI\Client\Model\UserViewAllOfContact|null
     */
    public function getContact()
    {
        return $this->container['contact'];
    }

    /**
     * Sets contact
     *
     * @param \OpenAPI\Client\Model\UserViewAllOfContact|null $contact contact
     *
     * @return self
     */
    public function setContact($contact)
    {
        if (is_null($contact)) {
            throw new \InvalidArgumentException('non-nullable contact cannot be null');
        }
        $this->container['contact'] = $contact;

        return $this;
    }

    /**
     * Gets registration_date
     *
     * @return \DateTime|null
     */
    public function getRegistrationDate()
    {
        return $this->container['registration_date'];
    }

    /**
     * Sets registration_date
     *
     * @param \DateTime|null $registration_date The date the user was registered. Only returned if the logged user manages the given used.
     *
     * @return self
     */
    public function setRegistrationDate($registration_date)
    {
        if (is_null($registration_date)) {
            throw new \InvalidArgumentException('non-nullable registration_date cannot be null');
        }
        $this->container['registration_date'] = $registration_date;

        return $this;
    }

    /**
     * Gets activation_date
     *
     * @return \DateTime|null
     */
    public function getActivationDate()
    {
        return $this->container['activation_date'];
    }

    /**
     * Sets activation_date
     *
     * @param \DateTime|null $activation_date The date the user was made active the first time. Only returned if the logged user manages the given used.
     *
     * @return self
     */
    public function setActivationDate($activation_date)
    {
        if (is_null($activation_date)) {
            throw new \InvalidArgumentException('non-nullable activation_date cannot be null');
        }
        $this->container['activation_date'] = $activation_date;

        return $this;
    }

    /**
     * Gets online
     *
     * @return bool|null
     */
    public function getOnline()
    {
        return $this->container['online'];
    }

    /**
     * Sets online
     *
     * @param bool|null $online Indicates whether the given user is logged-in to the system. Only returned if the logged user manages the given used.
     *
     * @return self
     */
    public function setOnline($online)
    {
        if (is_null($online)) {
            throw new \InvalidArgumentException('non-nullable online cannot be null');
        }
        $this->container['online'] = $online;

        return $this;
    }

    /**
     * Gets last_login
     *
     * @return \DateTime|null
     */
    public function getLastLogin()
    {
        return $this->container['last_login'];
    }

    /**
     * Sets last_login
     *
     * @param \DateTime|null $last_login The last time the user logged in, or null if never logged in. Only returned if the logged user manages the given used.
     *
     * @return self
     */
    public function setLastLogin($last_login)
    {
        if (is_null($last_login)) {
            throw new \InvalidArgumentException('non-nullable last_login cannot be null');
        }
        $this->container['last_login'] = $last_login;

        return $this;
    }

    /**
     * Gets first_login
     *
     * @return \DateTime|null
     */
    public function getFirstLogin()
    {
        return $this->container['first_login'];
    }

    /**
     * Sets first_login
     *
     * @param \DateTime|null $first_login The first time the user logged in, or null if never logged in. Only returned if the logged user manages the given used.
     *
     * @return self
     */
    public function setFirstLogin($first_login)
    {
        if (is_null($first_login)) {
            throw new \InvalidArgumentException('non-nullable first_login cannot be null');
        }
        $this->container['first_login'] = $first_login;

        return $this;
    }

    /**
     * Gets invited_by
     *
     * @return \OpenAPI\Client\Model\UserViewAllOfInvitedBy|null
     */
    public function getInvitedBy()
    {
        return $this->container['invited_by'];
    }

    /**
     * Sets invited_by
     *
     * @param \OpenAPI\Client\Model\UserViewAllOfInvitedBy|null $invited_by invited_by
     *
     * @return self
     */
    public function setInvitedBy($invited_by)
    {
        if (is_null($invited_by)) {
            throw new \InvalidArgumentException('non-nullable invited_by cannot be null');
        }
        $this->container['invited_by'] = $invited_by;

        return $this;
    }

    /**
     * Gets references
     *
     * @return \OpenAPI\Client\Model\UserViewAllOfReferences|null
     */
    public function getReferences()
    {
        return $this->container['references'];
    }

    /**
     * Sets references
     *
     * @param \OpenAPI\Client\Model\UserViewAllOfReferences|null $references references
     *
     * @return self
     */
    public function setReferences($references)
    {
        if (is_null($references)) {
            throw new \InvalidArgumentException('non-nullable references cannot be null');
        }
        $this->container['references'] = $references;

        return $this;
    }

    /**
     * Gets payment_feedbacks
     *
     * @return \OpenAPI\Client\Model\UserViewAllOfPaymentFeedbacks|null
     */
    public function getPaymentFeedbacks()
    {
        return $this->container['payment_feedbacks'];
    }

    /**
     * Sets payment_feedbacks
     *
     * @param \OpenAPI\Client\Model\UserViewAllOfPaymentFeedbacks|null $payment_feedbacks payment_feedbacks
     *
     * @return self
     */
    public function setPaymentFeedbacks($payment_feedbacks)
    {
        if (is_null($payment_feedbacks)) {
            throw new \InvalidArgumentException('non-nullable payment_feedbacks cannot be null');
        }
        $this->container['payment_feedbacks'] = $payment_feedbacks;

        return $this;
    }

    /**
     * Gets permissions
     *
     * @return \OpenAPI\Client\Model\UserViewAllOfPermissions|null
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     *
     * @param \OpenAPI\Client\Model\UserViewAllOfPermissions|null $permissions permissions
     *
     * @return self
     */
    public function setPermissions($permissions)
    {
        if (is_null($permissions)) {
            throw new \InvalidArgumentException('non-nullable permissions cannot be null');
        }
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets brokers
     *
     * @return \OpenAPI\Client\Model\BrokerView[]|null
     */
    public function getBrokers()
    {
        return $this->container['brokers'];
    }

    /**
     * Sets brokers
     *
     * @param \OpenAPI\Client\Model\BrokerView[]|null $brokers Visible brokers
     *
     * @return self
     */
    public function setBrokers($brokers)
    {
        if (is_null($brokers)) {
            throw new \InvalidArgumentException('non-nullable brokers cannot be null');
        }
        $this->container['brokers'] = $brokers;

        return $this;
    }

    /**
     * Gets role
     *
     * @return \OpenAPI\Client\Model\RoleEnum|null
     */
    public function getRole()
    {
        return $this->container['role'];
    }

    /**
     * Sets role
     *
     * @param \OpenAPI\Client\Model\RoleEnum|null $role role
     *
     * @return self
     */
    public function setRole($role)
    {
        if (is_null($role)) {
            throw new \InvalidArgumentException('non-nullable role cannot be null');
        }
        $this->container['role'] = $role;

        return $this;
    }

    /**
     * Gets relationship
     *
     * @return \OpenAPI\Client\Model\UserRelationshipEnum|null
     */
    public function getRelationship()
    {
        return $this->container['relationship'];
    }

    /**
     * Sets relationship
     *
     * @param \OpenAPI\Client\Model\UserRelationshipEnum|null $relationship relationship
     *
     * @return self
     */
    public function setRelationship($relationship)
    {
        if (is_null($relationship)) {
            throw new \InvalidArgumentException('non-nullable relationship cannot be null');
        }
        $this->container['relationship'] = $relationship;

        return $this;
    }

    /**
     * Gets records
     *
     * @return array<string,\OpenAPI\Client\Model\UserRecords>|null
     */
    public function getRecords()
    {
        return $this->container['records'];
    }

    /**
     * Sets records
     *
     * @param array<string,\OpenAPI\Client\Model\UserRecords>|null $records Records data, keyed by record type id or internal name.
     *
     * @return self
     */
    public function setRecords($records)
    {
        if (is_null($records)) {
            throw new \InvalidArgumentException('non-nullable records cannot be null');
        }
        $this->container['records'] = $records;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \OpenAPI\Client\Model\UserDocuments|null
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \OpenAPI\Client\Model\UserDocuments|null $documents documents
     *
     * @return self
     */
    public function setDocuments($documents)
    {
        if (is_null($documents)) {
            throw new \InvalidArgumentException('non-nullable documents cannot be null');
        }
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets accounts
     *
     * @return \OpenAPI\Client\Model\AccountWithStatus[]|null
     */
    public function getAccounts()
    {
        return $this->container['accounts'];
    }

    /**
     * Sets accounts
     *
     * @param \OpenAPI\Client\Model\AccountWithStatus[]|null $accounts The list of accounts with status
     *
     * @return self
     */
    public function setAccounts($accounts)
    {
        if (is_null($accounts)) {
            throw new \InvalidArgumentException('non-nullable accounts cannot be null');
        }
        $this->container['accounts'] = $accounts;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


