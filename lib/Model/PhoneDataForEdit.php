<?php
/**
 * PhoneDataForEdit
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PhoneDataForEdit Class Doc Comment
 *
 * @category Class
 * @description Contains data for editing an existing phone
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PhoneDataForEdit implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'PhoneDataForEdit';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'country' => 'string',
        'always_show_international_number' => 'bool',
        'example' => 'string',
        'extension_enabled' => 'bool',
        'sms_enabled' => 'bool',
        'enable_privacy' => 'bool',
        'manage_privacy' => 'bool',
        'manually_verify' => 'bool',
        'confirmation_password_input' => '\OpenAPI\Client\Model\PasswordInput',
        'type' => '\OpenAPI\Client\Model\PhoneKind',
        'user' => '\OpenAPI\Client\Model\User',
        'phone' => '\OpenAPI\Client\Model\PhoneDataForEditAllOfPhone',
        'can_edit' => 'bool',
        'can_remove' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'country' => null,
        'always_show_international_number' => null,
        'example' => null,
        'extension_enabled' => null,
        'sms_enabled' => null,
        'enable_privacy' => null,
        'manage_privacy' => null,
        'manually_verify' => null,
        'confirmation_password_input' => null,
        'type' => null,
        'user' => null,
        'phone' => null,
        'can_edit' => null,
        'can_remove' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'country' => false,
        'always_show_international_number' => false,
        'example' => false,
        'extension_enabled' => false,
        'sms_enabled' => false,
        'enable_privacy' => false,
        'manage_privacy' => false,
        'manually_verify' => false,
        'confirmation_password_input' => false,
        'type' => false,
        'user' => false,
        'phone' => false,
        'can_edit' => false,
        'can_remove' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'country' => 'country',
        'always_show_international_number' => 'alwaysShowInternationalNumber',
        'example' => 'example',
        'extension_enabled' => 'extensionEnabled',
        'sms_enabled' => 'smsEnabled',
        'enable_privacy' => 'enablePrivacy',
        'manage_privacy' => 'managePrivacy',
        'manually_verify' => 'manuallyVerify',
        'confirmation_password_input' => 'confirmationPasswordInput',
        'type' => 'type',
        'user' => 'user',
        'phone' => 'phone',
        'can_edit' => 'canEdit',
        'can_remove' => 'canRemove'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'country' => 'setCountry',
        'always_show_international_number' => 'setAlwaysShowInternationalNumber',
        'example' => 'setExample',
        'extension_enabled' => 'setExtensionEnabled',
        'sms_enabled' => 'setSmsEnabled',
        'enable_privacy' => 'setEnablePrivacy',
        'manage_privacy' => 'setManagePrivacy',
        'manually_verify' => 'setManuallyVerify',
        'confirmation_password_input' => 'setConfirmationPasswordInput',
        'type' => 'setType',
        'user' => 'setUser',
        'phone' => 'setPhone',
        'can_edit' => 'setCanEdit',
        'can_remove' => 'setCanRemove'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'country' => 'getCountry',
        'always_show_international_number' => 'getAlwaysShowInternationalNumber',
        'example' => 'getExample',
        'extension_enabled' => 'getExtensionEnabled',
        'sms_enabled' => 'getSmsEnabled',
        'enable_privacy' => 'getEnablePrivacy',
        'manage_privacy' => 'getManagePrivacy',
        'manually_verify' => 'getManuallyVerify',
        'confirmation_password_input' => 'getConfirmationPasswordInput',
        'type' => 'getType',
        'user' => 'getUser',
        'phone' => 'getPhone',
        'can_edit' => 'getCanEdit',
        'can_remove' => 'getCanRemove'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('country', $data ?? [], null);
        $this->setIfExists('always_show_international_number', $data ?? [], null);
        $this->setIfExists('example', $data ?? [], null);
        $this->setIfExists('extension_enabled', $data ?? [], null);
        $this->setIfExists('sms_enabled', $data ?? [], null);
        $this->setIfExists('enable_privacy', $data ?? [], null);
        $this->setIfExists('manage_privacy', $data ?? [], null);
        $this->setIfExists('manually_verify', $data ?? [], null);
        $this->setIfExists('confirmation_password_input', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('phone', $data ?? [], null);
        $this->setIfExists('can_edit', $data ?? [], null);
        $this->setIfExists('can_remove', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets country
     *
     * @return string|null
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string|null $country The 2-letter country code used by default for numbers. Unless an international number is specified (using the `+` prefix), the phone number is assumed to belong to this country.
     *
     * @return self
     */
    public function setCountry($country)
    {
        if (is_null($country)) {
            throw new \InvalidArgumentException('non-nullable country cannot be null');
        }
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets always_show_international_number
     *
     * @return bool|null
     */
    public function getAlwaysShowInternationalNumber()
    {
        return $this->container['always_show_international_number'];
    }

    /**
     * Sets always_show_international_number
     *
     * @param bool|null $always_show_international_number Indicates the it is configured to always format numbers using the international format. If set to false, numbers will be formatted in the national format.
     *
     * @return self
     */
    public function setAlwaysShowInternationalNumber($always_show_international_number)
    {
        if (is_null($always_show_international_number)) {
            throw new \InvalidArgumentException('non-nullable always_show_international_number cannot be null');
        }
        $this->container['always_show_international_number'] = $always_show_international_number;

        return $this;
    }

    /**
     * Gets example
     *
     * @return string|null
     */
    public function getExample()
    {
        return $this->container['example'];
    }

    /**
     * Sets example
     *
     * @param string|null $example An example phone number. Can be either a land-line or mobile phone number example, depending on this phone kind phone
     *
     * @return self
     */
    public function setExample($example)
    {
        if (is_null($example)) {
            throw new \InvalidArgumentException('non-nullable example cannot be null');
        }
        $this->container['example'] = $example;

        return $this;
    }

    /**
     * Gets extension_enabled
     *
     * @return bool|null
     */
    public function getExtensionEnabled()
    {
        return $this->container['extension_enabled'];
    }

    /**
     * Sets extension_enabled
     *
     * @param bool|null $extension_enabled Only returned for land line phones. Indicates whether the extension is enabled.
     *
     * @return self
     */
    public function setExtensionEnabled($extension_enabled)
    {
        if (is_null($extension_enabled)) {
            throw new \InvalidArgumentException('non-nullable extension_enabled cannot be null');
        }
        $this->container['extension_enabled'] = $extension_enabled;

        return $this;
    }

    /**
     * Gets sms_enabled
     *
     * @return bool|null
     */
    public function getSmsEnabled()
    {
        return $this->container['sms_enabled'];
    }

    /**
     * Sets sms_enabled
     *
     * @param bool|null $sms_enabled Only returned for mobile phones. Indicates whether outbound SMS is enabled in Cyclos
     *
     * @return self
     */
    public function setSmsEnabled($sms_enabled)
    {
        if (is_null($sms_enabled)) {
            throw new \InvalidArgumentException('non-nullable sms_enabled cannot be null');
        }
        $this->container['sms_enabled'] = $sms_enabled;

        return $this;
    }

    /**
     * Gets enable_privacy
     *
     * @return bool|null
     */
    public function getEnablePrivacy()
    {
        return $this->container['enable_privacy'];
    }

    /**
     * Sets enable_privacy
     *
     * @param bool|null $enable_privacy Indicates whether privacy can be used for this phone
     *
     * @return self
     */
    public function setEnablePrivacy($enable_privacy)
    {
        if (is_null($enable_privacy)) {
            throw new \InvalidArgumentException('non-nullable enable_privacy cannot be null');
        }
        $this->container['enable_privacy'] = $enable_privacy;

        return $this;
    }

    /**
     * Gets manage_privacy
     *
     * @return bool|null
     */
    public function getManagePrivacy()
    {
        return $this->container['manage_privacy'];
    }

    /**
     * Sets manage_privacy
     *
     * @param bool|null $manage_privacy Can the authenticated user manage the privacy of this phone?
     *
     * @return self
     */
    public function setManagePrivacy($manage_privacy)
    {
        if (is_null($manage_privacy)) {
            throw new \InvalidArgumentException('non-nullable manage_privacy cannot be null');
        }
        $this->container['manage_privacy'] = $manage_privacy;

        return $this;
    }

    /**
     * Gets manually_verify
     *
     * @return bool|null
     */
    public function getManuallyVerify()
    {
        return $this->container['manually_verify'];
    }

    /**
     * Sets manually_verify
     *
     * @param bool|null $manually_verify Can the authenticated user manully verify a mobile phone?
     *
     * @return self
     */
    public function setManuallyVerify($manually_verify)
    {
        if (is_null($manually_verify)) {
            throw new \InvalidArgumentException('non-nullable manually_verify cannot be null');
        }
        $this->container['manually_verify'] = $manually_verify;

        return $this;
    }

    /**
     * Gets confirmation_password_input
     *
     * @return \OpenAPI\Client\Model\PasswordInput|null
     */
    public function getConfirmationPasswordInput()
    {
        return $this->container['confirmation_password_input'];
    }

    /**
     * Sets confirmation_password_input
     *
     * @param \OpenAPI\Client\Model\PasswordInput|null $confirmation_password_input confirmation_password_input
     *
     * @return self
     */
    public function setConfirmationPasswordInput($confirmation_password_input)
    {
        if (is_null($confirmation_password_input)) {
            throw new \InvalidArgumentException('non-nullable confirmation_password_input cannot be null');
        }
        $this->container['confirmation_password_input'] = $confirmation_password_input;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\PhoneKind|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\PhoneKind|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\User|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\User|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return \OpenAPI\Client\Model\PhoneDataForEditAllOfPhone|null
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param \OpenAPI\Client\Model\PhoneDataForEditAllOfPhone|null $phone phone
     *
     * @return self
     */
    public function setPhone($phone)
    {
        if (is_null($phone)) {
            throw new \InvalidArgumentException('non-nullable phone cannot be null');
        }
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool|null
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool|null $can_edit Can the authenticated user edit this phone?
     *
     * @return self
     */
    public function setCanEdit($can_edit)
    {
        if (is_null($can_edit)) {
            throw new \InvalidArgumentException('non-nullable can_edit cannot be null');
        }
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets can_remove
     *
     * @return bool|null
     */
    public function getCanRemove()
    {
        return $this->container['can_remove'];
    }

    /**
     * Sets can_remove
     *
     * @param bool|null $can_remove Can the authenticated user remove this phone?
     *
     * @return self
     */
    public function setCanRemove($can_remove)
    {
        if (is_null($can_remove)) {
            throw new \InvalidArgumentException('non-nullable can_remove cannot be null');
        }
        $this->container['can_remove'] = $can_remove;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


