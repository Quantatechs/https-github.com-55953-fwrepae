<?php
/**
 * VoucherDataForRedeemAllOfPinInput
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VoucherDataForRedeemAllOfPinInput Class Doc Comment
 *
 * @category Class
 * @description Is returned when this redeem requires a PIN to be entered. Contains the definitions for the voucher PIN.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VoucherDataForRedeemAllOfPinInput implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VoucherDataForRedeem_allOf_pinInput';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'allowed_credentials' => '\OpenAPI\Client\Model\CredentialTypeEnum[]',
        'active_credentials' => '\OpenAPI\Client\Model\CredentialTypeEnum[]',
        'password_type' => '\OpenAPI\Client\Model\PasswordTypeDetailed',
        'password_status' => '\OpenAPI\Client\Model\PasswordStatusEnum',
        'confirmation_password_once_per_session' => 'bool',
        'buttons' => 'string[][]',
        'virtual_keyboard_id' => 'string',
        'pin_input' => '\OpenAPI\Client\Model\PinInput',
        'email_to_send_otp' => 'string',
        'mobile_phones_to_send_otp' => '\OpenAPI\Client\Model\Phone[]',
        'otp_send_mediums' => '\OpenAPI\Client\Model\SendMediumEnum[]',
        'has_reusable_otp' => 'bool',
        'has_active_password' => 'bool',
        'has_active_device' => 'bool',
        'device_availability' => '\OpenAPI\Client\Model\AvailabilityEnum',
        'pin_availability' => '\OpenAPI\Client\Model\AvailabilityEnum',
        'id' => 'string',
        'name' => 'string',
        'internal_name' => 'string',
        'only_numeric' => 'bool',
        'min_length' => 'int',
        'max_length' => 'int',
        'lower_case_letters' => '\OpenAPI\Client\Model\AvailabilityEnum',
        'upper_case_letters' => '\OpenAPI\Client\Model\AvailabilityEnum',
        'numbers' => '\OpenAPI\Client\Model\AvailabilityEnum',
        'special_characters' => '\OpenAPI\Client\Model\AvailabilityEnum',
        'global' => 'bool',
        'mode' => '\OpenAPI\Client\Model\PasswordModeEnum',
        'input_method' => '\OpenAPI\Client\Model\PasswordInputMethodEnum',
        'number_of_buttons' => 'int',
        'buttons_per_row' => 'int',
        'description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'allowed_credentials' => null,
        'active_credentials' => null,
        'password_type' => null,
        'password_status' => null,
        'confirmation_password_once_per_session' => null,
        'buttons' => null,
        'virtual_keyboard_id' => null,
        'pin_input' => null,
        'email_to_send_otp' => null,
        'mobile_phones_to_send_otp' => null,
        'otp_send_mediums' => null,
        'has_reusable_otp' => null,
        'has_active_password' => null,
        'has_active_device' => null,
        'device_availability' => null,
        'pin_availability' => null,
        'id' => null,
        'name' => null,
        'internal_name' => null,
        'only_numeric' => null,
        'min_length' => null,
        'max_length' => null,
        'lower_case_letters' => null,
        'upper_case_letters' => null,
        'numbers' => null,
        'special_characters' => null,
        'global' => null,
        'mode' => null,
        'input_method' => null,
        'number_of_buttons' => null,
        'buttons_per_row' => null,
        'description' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'allowed_credentials' => false,
        'active_credentials' => false,
        'password_type' => false,
        'password_status' => false,
        'confirmation_password_once_per_session' => false,
        'buttons' => false,
        'virtual_keyboard_id' => false,
        'pin_input' => false,
        'email_to_send_otp' => false,
        'mobile_phones_to_send_otp' => false,
        'otp_send_mediums' => false,
        'has_reusable_otp' => false,
        'has_active_password' => false,
        'has_active_device' => false,
        'device_availability' => false,
        'pin_availability' => false,
        'id' => false,
        'name' => false,
        'internal_name' => false,
        'only_numeric' => false,
        'min_length' => false,
        'max_length' => false,
        'lower_case_letters' => false,
        'upper_case_letters' => false,
        'numbers' => false,
        'special_characters' => false,
        'global' => false,
        'mode' => false,
        'input_method' => false,
        'number_of_buttons' => false,
        'buttons_per_row' => false,
        'description' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'allowed_credentials' => 'allowedCredentials',
        'active_credentials' => 'activeCredentials',
        'password_type' => 'passwordType',
        'password_status' => 'passwordStatus',
        'confirmation_password_once_per_session' => 'confirmationPasswordOncePerSession',
        'buttons' => 'buttons',
        'virtual_keyboard_id' => 'virtualKeyboardId',
        'pin_input' => 'pinInput',
        'email_to_send_otp' => 'emailToSendOtp',
        'mobile_phones_to_send_otp' => 'mobilePhonesToSendOtp',
        'otp_send_mediums' => 'otpSendMediums',
        'has_reusable_otp' => 'hasReusableOtp',
        'has_active_password' => 'hasActivePassword',
        'has_active_device' => 'hasActiveDevice',
        'device_availability' => 'deviceAvailability',
        'pin_availability' => 'pinAvailability',
        'id' => 'id',
        'name' => 'name',
        'internal_name' => 'internalName',
        'only_numeric' => 'onlyNumeric',
        'min_length' => 'minLength',
        'max_length' => 'maxLength',
        'lower_case_letters' => 'lowerCaseLetters',
        'upper_case_letters' => 'upperCaseLetters',
        'numbers' => 'numbers',
        'special_characters' => 'specialCharacters',
        'global' => 'global',
        'mode' => 'mode',
        'input_method' => 'inputMethod',
        'number_of_buttons' => 'numberOfButtons',
        'buttons_per_row' => 'buttonsPerRow',
        'description' => 'description'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'allowed_credentials' => 'setAllowedCredentials',
        'active_credentials' => 'setActiveCredentials',
        'password_type' => 'setPasswordType',
        'password_status' => 'setPasswordStatus',
        'confirmation_password_once_per_session' => 'setConfirmationPasswordOncePerSession',
        'buttons' => 'setButtons',
        'virtual_keyboard_id' => 'setVirtualKeyboardId',
        'pin_input' => 'setPinInput',
        'email_to_send_otp' => 'setEmailToSendOtp',
        'mobile_phones_to_send_otp' => 'setMobilePhonesToSendOtp',
        'otp_send_mediums' => 'setOtpSendMediums',
        'has_reusable_otp' => 'setHasReusableOtp',
        'has_active_password' => 'setHasActivePassword',
        'has_active_device' => 'setHasActiveDevice',
        'device_availability' => 'setDeviceAvailability',
        'pin_availability' => 'setPinAvailability',
        'id' => 'setId',
        'name' => 'setName',
        'internal_name' => 'setInternalName',
        'only_numeric' => 'setOnlyNumeric',
        'min_length' => 'setMinLength',
        'max_length' => 'setMaxLength',
        'lower_case_letters' => 'setLowerCaseLetters',
        'upper_case_letters' => 'setUpperCaseLetters',
        'numbers' => 'setNumbers',
        'special_characters' => 'setSpecialCharacters',
        'global' => 'setGlobal',
        'mode' => 'setMode',
        'input_method' => 'setInputMethod',
        'number_of_buttons' => 'setNumberOfButtons',
        'buttons_per_row' => 'setButtonsPerRow',
        'description' => 'setDescription'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'allowed_credentials' => 'getAllowedCredentials',
        'active_credentials' => 'getActiveCredentials',
        'password_type' => 'getPasswordType',
        'password_status' => 'getPasswordStatus',
        'confirmation_password_once_per_session' => 'getConfirmationPasswordOncePerSession',
        'buttons' => 'getButtons',
        'virtual_keyboard_id' => 'getVirtualKeyboardId',
        'pin_input' => 'getPinInput',
        'email_to_send_otp' => 'getEmailToSendOtp',
        'mobile_phones_to_send_otp' => 'getMobilePhonesToSendOtp',
        'otp_send_mediums' => 'getOtpSendMediums',
        'has_reusable_otp' => 'getHasReusableOtp',
        'has_active_password' => 'getHasActivePassword',
        'has_active_device' => 'getHasActiveDevice',
        'device_availability' => 'getDeviceAvailability',
        'pin_availability' => 'getPinAvailability',
        'id' => 'getId',
        'name' => 'getName',
        'internal_name' => 'getInternalName',
        'only_numeric' => 'getOnlyNumeric',
        'min_length' => 'getMinLength',
        'max_length' => 'getMaxLength',
        'lower_case_letters' => 'getLowerCaseLetters',
        'upper_case_letters' => 'getUpperCaseLetters',
        'numbers' => 'getNumbers',
        'special_characters' => 'getSpecialCharacters',
        'global' => 'getGlobal',
        'mode' => 'getMode',
        'input_method' => 'getInputMethod',
        'number_of_buttons' => 'getNumberOfButtons',
        'buttons_per_row' => 'getButtonsPerRow',
        'description' => 'getDescription'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('allowed_credentials', $data ?? [], null);
        $this->setIfExists('active_credentials', $data ?? [], null);
        $this->setIfExists('password_type', $data ?? [], null);
        $this->setIfExists('password_status', $data ?? [], null);
        $this->setIfExists('confirmation_password_once_per_session', $data ?? [], null);
        $this->setIfExists('buttons', $data ?? [], null);
        $this->setIfExists('virtual_keyboard_id', $data ?? [], null);
        $this->setIfExists('pin_input', $data ?? [], null);
        $this->setIfExists('email_to_send_otp', $data ?? [], null);
        $this->setIfExists('mobile_phones_to_send_otp', $data ?? [], null);
        $this->setIfExists('otp_send_mediums', $data ?? [], null);
        $this->setIfExists('has_reusable_otp', $data ?? [], null);
        $this->setIfExists('has_active_password', $data ?? [], null);
        $this->setIfExists('has_active_device', $data ?? [], null);
        $this->setIfExists('device_availability', $data ?? [], null);
        $this->setIfExists('pin_availability', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('internal_name', $data ?? [], null);
        $this->setIfExists('only_numeric', $data ?? [], null);
        $this->setIfExists('min_length', $data ?? [], null);
        $this->setIfExists('max_length', $data ?? [], null);
        $this->setIfExists('lower_case_letters', $data ?? [], null);
        $this->setIfExists('upper_case_letters', $data ?? [], null);
        $this->setIfExists('numbers', $data ?? [], null);
        $this->setIfExists('special_characters', $data ?? [], null);
        $this->setIfExists('global', $data ?? [], null);
        $this->setIfExists('mode', $data ?? [], null);
        $this->setIfExists('input_method', $data ?? [], null);
        $this->setIfExists('number_of_buttons', $data ?? [], null);
        $this->setIfExists('buttons_per_row', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets allowed_credentials
     *
     * @return \OpenAPI\Client\Model\CredentialTypeEnum[]|null
     */
    public function getAllowedCredentials()
    {
        return $this->container['allowed_credentials'];
    }

    /**
     * Sets allowed_credentials
     *
     * @param \OpenAPI\Client\Model\CredentialTypeEnum[]|null $allowed_credentials The credential types which are allowed in this action.
     *
     * @return self
     */
    public function setAllowedCredentials($allowed_credentials)
    {
        if (is_null($allowed_credentials)) {
            throw new \InvalidArgumentException('non-nullable allowed_credentials cannot be null');
        }
        $this->container['allowed_credentials'] = $allowed_credentials;

        return $this;
    }

    /**
     * Gets active_credentials
     *
     * @return \OpenAPI\Client\Model\CredentialTypeEnum[]|null
     */
    public function getActiveCredentials()
    {
        return $this->container['active_credentials'];
    }

    /**
     * Sets active_credentials
     *
     * @param \OpenAPI\Client\Model\CredentialTypeEnum[]|null $active_credentials The credential types which the current authenticated user have active. Is a subset of `allowedCredentials`.
     *
     * @return self
     */
    public function setActiveCredentials($active_credentials)
    {
        if (is_null($active_credentials)) {
            throw new \InvalidArgumentException('non-nullable active_credentials cannot be null');
        }
        $this->container['active_credentials'] = $active_credentials;

        return $this;
    }

    /**
     * Gets password_type
     *
     * @return \OpenAPI\Client\Model\PasswordTypeDetailed|null
     */
    public function getPasswordType()
    {
        return $this->container['password_type'];
    }

    /**
     * Sets password_type
     *
     * @param \OpenAPI\Client\Model\PasswordTypeDetailed|null $password_type password_type
     *
     * @return self
     */
    public function setPasswordType($password_type)
    {
        if (is_null($password_type)) {
            throw new \InvalidArgumentException('non-nullable password_type cannot be null');
        }
        $this->container['password_type'] = $password_type;

        return $this;
    }

    /**
     * Gets password_status
     *
     * @return \OpenAPI\Client\Model\PasswordStatusEnum|null
     */
    public function getPasswordStatus()
    {
        return $this->container['password_status'];
    }

    /**
     * Sets password_status
     *
     * @param \OpenAPI\Client\Model\PasswordStatusEnum|null $password_status password_status
     *
     * @return self
     */
    public function setPasswordStatus($password_status)
    {
        if (is_null($password_status)) {
            throw new \InvalidArgumentException('non-nullable password_status cannot be null');
        }
        $this->container['password_status'] = $password_status;

        return $this;
    }

    /**
     * Gets confirmation_password_once_per_session
     *
     * @return bool|null
     */
    public function getConfirmationPasswordOncePerSession()
    {
        return $this->container['confirmation_password_once_per_session'];
    }

    /**
     * Sets confirmation_password_once_per_session
     *
     * @param bool|null $confirmation_password_once_per_session Only returned when there is an authenticated user (not for login). Determines whether this password, when used as confirmation, should be requested only once until the user logs out.
     *
     * @return self
     */
    public function setConfirmationPasswordOncePerSession($confirmation_password_once_per_session)
    {
        if (is_null($confirmation_password_once_per_session)) {
            throw new \InvalidArgumentException('non-nullable confirmation_password_once_per_session cannot be null');
        }
        $this->container['confirmation_password_once_per_session'] = $confirmation_password_once_per_session;

        return $this;
    }

    /**
     * Gets buttons
     *
     * @return string[][]|null
     */
    public function getButtons()
    {
        return $this->container['buttons'];
    }

    /**
     * Sets buttons
     *
     * @param string[][]|null $buttons Only for `virtualKeyboard`, contains the sequences of buttons that should be displayed for the user. The explanation for the value that should be sent on virtual keyboard mode is shown above, in the description of this type.
     *
     * @return self
     */
    public function setButtons($buttons)
    {
        if (is_null($buttons)) {
            throw new \InvalidArgumentException('non-nullable buttons cannot be null');
        }
        $this->container['buttons'] = $buttons;

        return $this;
    }

    /**
     * Gets virtual_keyboard_id
     *
     * @return string|null
     */
    public function getVirtualKeyboardId()
    {
        return $this->container['virtual_keyboard_id'];
    }

    /**
     * Sets virtual_keyboard_id
     *
     * @param string|null $virtual_keyboard_id The id that should be sent together with the sequences when `passwordType.inputMethod` is `virtualKeyboard`.
     *
     * @return self
     */
    public function setVirtualKeyboardId($virtual_keyboard_id)
    {
        if (is_null($virtual_keyboard_id)) {
            throw new \InvalidArgumentException('non-nullable virtual_keyboard_id cannot be null');
        }
        $this->container['virtual_keyboard_id'] = $virtual_keyboard_id;

        return $this;
    }

    /**
     * Gets pin_input
     *
     * @return \OpenAPI\Client\Model\PinInput|null
     */
    public function getPinInput()
    {
        return $this->container['pin_input'];
    }

    /**
     * Sets pin_input
     *
     * @param \OpenAPI\Client\Model\PinInput|null $pin_input pin_input
     *
     * @return self
     */
    public function setPinInput($pin_input)
    {
        if (is_null($pin_input)) {
            throw new \InvalidArgumentException('non-nullable pin_input cannot be null');
        }
        $this->container['pin_input'] = $pin_input;

        return $this;
    }

    /**
     * Gets email_to_send_otp
     *
     * @return string|null
     */
    public function getEmailToSendOtp()
    {
        return $this->container['email_to_send_otp'];
    }

    /**
     * Sets email_to_send_otp
     *
     * @param string|null $email_to_send_otp The email available to request a new otp. Only returned if `otpSendMediums` contains `email`
     *
     * @return self
     */
    public function setEmailToSendOtp($email_to_send_otp)
    {
        if (is_null($email_to_send_otp)) {
            throw new \InvalidArgumentException('non-nullable email_to_send_otp cannot be null');
        }
        $this->container['email_to_send_otp'] = $email_to_send_otp;

        return $this;
    }

    /**
     * Gets mobile_phones_to_send_otp
     *
     * @return \OpenAPI\Client\Model\Phone[]|null
     */
    public function getMobilePhonesToSendOtp()
    {
        return $this->container['mobile_phones_to_send_otp'];
    }

    /**
     * Sets mobile_phones_to_send_otp
     *
     * @param \OpenAPI\Client\Model\Phone[]|null $mobile_phones_to_send_otp The phones available to request a new otp. Only returned if `otpSendMediums` contains `sms`
     *
     * @return self
     */
    public function setMobilePhonesToSendOtp($mobile_phones_to_send_otp)
    {
        if (is_null($mobile_phones_to_send_otp)) {
            throw new \InvalidArgumentException('non-nullable mobile_phones_to_send_otp cannot be null');
        }
        $this->container['mobile_phones_to_send_otp'] = $mobile_phones_to_send_otp;

        return $this;
    }

    /**
     * Gets otp_send_mediums
     *
     * @return \OpenAPI\Client\Model\SendMediumEnum[]|null
     */
    public function getOtpSendMediums()
    {
        return $this->container['otp_send_mediums'];
    }

    /**
     * Sets otp_send_mediums
     *
     * @param \OpenAPI\Client\Model\SendMediumEnum[]|null $otp_send_mediums Indicates the mediums the user can use to receive an OTP. Only returned when `allowedCredentials` contains `password` and `passwordType.mode` is `otp`.
     *
     * @return self
     */
    public function setOtpSendMediums($otp_send_mediums)
    {
        if (is_null($otp_send_mediums)) {
            throw new \InvalidArgumentException('non-nullable otp_send_mediums cannot be null');
        }
        $this->container['otp_send_mediums'] = $otp_send_mediums;

        return $this;
    }

    /**
     * Gets has_reusable_otp
     *
     * @return bool|null
     */
    public function getHasReusableOtp()
    {
        return $this->container['has_reusable_otp'];
    }

    /**
     * Sets has_reusable_otp
     *
     * @param bool|null $has_reusable_otp Indicates if the password is an OTP marked as reusable and the user has a currently valid OTP value. Only returned when `allowedCredentials` contains `password` and `passwordType.mode` is `otp`.
     *
     * @return self
     */
    public function setHasReusableOtp($has_reusable_otp)
    {
        if (is_null($has_reusable_otp)) {
            throw new \InvalidArgumentException('non-nullable has_reusable_otp cannot be null');
        }
        $this->container['has_reusable_otp'] = $has_reusable_otp;

        return $this;
    }

    /**
     * Gets has_active_password
     *
     * @return bool|null
     * @deprecated
     */
    public function getHasActivePassword()
    {
        return $this->container['has_active_password'];
    }

    /**
     * Sets has_active_password
     *
     * @param bool|null $has_active_password Use `activeCredentials` instead, which should contain `password`.
     *
     * @return self
     * @deprecated
     */
    public function setHasActivePassword($has_active_password)
    {
        if (is_null($has_active_password)) {
            throw new \InvalidArgumentException('non-nullable has_active_password cannot be null');
        }
        $this->container['has_active_password'] = $has_active_password;

        return $this;
    }

    /**
     * Gets has_active_device
     *
     * @return bool|null
     * @deprecated
     */
    public function getHasActiveDevice()
    {
        return $this->container['has_active_device'];
    }

    /**
     * Sets has_active_device
     *
     * @param bool|null $has_active_device Use `activeCredentials` instead, which should contain `device`.
     *
     * @return self
     * @deprecated
     */
    public function setHasActiveDevice($has_active_device)
    {
        if (is_null($has_active_device)) {
            throw new \InvalidArgumentException('non-nullable has_active_device cannot be null');
        }
        $this->container['has_active_device'] = $has_active_device;

        return $this;
    }

    /**
     * Gets device_availability
     *
     * @return \OpenAPI\Client\Model\AvailabilityEnum|null
     * @deprecated
     */
    public function getDeviceAvailability()
    {
        return $this->container['device_availability'];
    }

    /**
     * Sets device_availability
     *
     * @param \OpenAPI\Client\Model\AvailabilityEnum|null $device_availability device_availability
     *
     * @return self
     * @deprecated
     */
    public function setDeviceAvailability($device_availability)
    {
        if (is_null($device_availability)) {
            throw new \InvalidArgumentException('non-nullable device_availability cannot be null');
        }
        $this->container['device_availability'] = $device_availability;

        return $this;
    }

    /**
     * Gets pin_availability
     *
     * @return \OpenAPI\Client\Model\AvailabilityEnum|null
     * @deprecated
     */
    public function getPinAvailability()
    {
        return $this->container['pin_availability'];
    }

    /**
     * Sets pin_availability
     *
     * @param \OpenAPI\Client\Model\AvailabilityEnum|null $pin_availability pin_availability
     *
     * @return self
     * @deprecated
     */
    public function setPinAvailability($pin_availability)
    {
        if (is_null($pin_availability)) {
            throw new \InvalidArgumentException('non-nullable pin_availability cannot be null');
        }
        $this->container['pin_availability'] = $pin_availability;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     * @deprecated
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id Use `passwordType.id` instead
     *
     * @return self
     * @deprecated
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     * @deprecated
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Use `passwordType.name` instead
     *
     * @return self
     * @deprecated
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets internal_name
     *
     * @return string|null
     * @deprecated
     */
    public function getInternalName()
    {
        return $this->container['internal_name'];
    }

    /**
     * Sets internal_name
     *
     * @param string|null $internal_name Use `passwordType.internalName` instead
     *
     * @return self
     * @deprecated
     */
    public function setInternalName($internal_name)
    {
        if (is_null($internal_name)) {
            throw new \InvalidArgumentException('non-nullable internal_name cannot be null');
        }
        $this->container['internal_name'] = $internal_name;

        return $this;
    }

    /**
     * Gets only_numeric
     *
     * @return bool|null
     * @deprecated
     */
    public function getOnlyNumeric()
    {
        return $this->container['only_numeric'];
    }

    /**
     * Sets only_numeric
     *
     * @param bool|null $only_numeric Use `passwordType.onlyNumeric` instead
     *
     * @return self
     * @deprecated
     */
    public function setOnlyNumeric($only_numeric)
    {
        if (is_null($only_numeric)) {
            throw new \InvalidArgumentException('non-nullable only_numeric cannot be null');
        }
        $this->container['only_numeric'] = $only_numeric;

        return $this;
    }

    /**
     * Gets min_length
     *
     * @return int|null
     * @deprecated
     */
    public function getMinLength()
    {
        return $this->container['min_length'];
    }

    /**
     * Sets min_length
     *
     * @param int|null $min_length Use `passwordType.minLength` instead
     *
     * @return self
     * @deprecated
     */
    public function setMinLength($min_length)
    {
        if (is_null($min_length)) {
            throw new \InvalidArgumentException('non-nullable min_length cannot be null');
        }
        $this->container['min_length'] = $min_length;

        return $this;
    }

    /**
     * Gets max_length
     *
     * @return int|null
     * @deprecated
     */
    public function getMaxLength()
    {
        return $this->container['max_length'];
    }

    /**
     * Sets max_length
     *
     * @param int|null $max_length Use `passwordType.maxLength` instead
     *
     * @return self
     * @deprecated
     */
    public function setMaxLength($max_length)
    {
        if (is_null($max_length)) {
            throw new \InvalidArgumentException('non-nullable max_length cannot be null');
        }
        $this->container['max_length'] = $max_length;

        return $this;
    }

    /**
     * Gets lower_case_letters
     *
     * @return \OpenAPI\Client\Model\AvailabilityEnum|null
     * @deprecated
     */
    public function getLowerCaseLetters()
    {
        return $this->container['lower_case_letters'];
    }

    /**
     * Sets lower_case_letters
     *
     * @param \OpenAPI\Client\Model\AvailabilityEnum|null $lower_case_letters lower_case_letters
     *
     * @return self
     * @deprecated
     */
    public function setLowerCaseLetters($lower_case_letters)
    {
        if (is_null($lower_case_letters)) {
            throw new \InvalidArgumentException('non-nullable lower_case_letters cannot be null');
        }
        $this->container['lower_case_letters'] = $lower_case_letters;

        return $this;
    }

    /**
     * Gets upper_case_letters
     *
     * @return \OpenAPI\Client\Model\AvailabilityEnum|null
     * @deprecated
     */
    public function getUpperCaseLetters()
    {
        return $this->container['upper_case_letters'];
    }

    /**
     * Sets upper_case_letters
     *
     * @param \OpenAPI\Client\Model\AvailabilityEnum|null $upper_case_letters upper_case_letters
     *
     * @return self
     * @deprecated
     */
    public function setUpperCaseLetters($upper_case_letters)
    {
        if (is_null($upper_case_letters)) {
            throw new \InvalidArgumentException('non-nullable upper_case_letters cannot be null');
        }
        $this->container['upper_case_letters'] = $upper_case_letters;

        return $this;
    }

    /**
     * Gets numbers
     *
     * @return \OpenAPI\Client\Model\AvailabilityEnum|null
     * @deprecated
     */
    public function getNumbers()
    {
        return $this->container['numbers'];
    }

    /**
     * Sets numbers
     *
     * @param \OpenAPI\Client\Model\AvailabilityEnum|null $numbers numbers
     *
     * @return self
     * @deprecated
     */
    public function setNumbers($numbers)
    {
        if (is_null($numbers)) {
            throw new \InvalidArgumentException('non-nullable numbers cannot be null');
        }
        $this->container['numbers'] = $numbers;

        return $this;
    }

    /**
     * Gets special_characters
     *
     * @return \OpenAPI\Client\Model\AvailabilityEnum|null
     * @deprecated
     */
    public function getSpecialCharacters()
    {
        return $this->container['special_characters'];
    }

    /**
     * Sets special_characters
     *
     * @param \OpenAPI\Client\Model\AvailabilityEnum|null $special_characters special_characters
     *
     * @return self
     * @deprecated
     */
    public function setSpecialCharacters($special_characters)
    {
        if (is_null($special_characters)) {
            throw new \InvalidArgumentException('non-nullable special_characters cannot be null');
        }
        $this->container['special_characters'] = $special_characters;

        return $this;
    }

    /**
     * Gets global
     *
     * @return bool|null
     * @deprecated
     */
    public function getGlobal()
    {
        return $this->container['global'];
    }

    /**
     * Sets global
     *
     * @param bool|null $global Use `passwordType.global` instead
     *
     * @return self
     * @deprecated
     */
    public function setGlobal($global)
    {
        if (is_null($global)) {
            throw new \InvalidArgumentException('non-nullable global cannot be null');
        }
        $this->container['global'] = $global;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return \OpenAPI\Client\Model\PasswordModeEnum|null
     * @deprecated
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param \OpenAPI\Client\Model\PasswordModeEnum|null $mode mode
     *
     * @return self
     * @deprecated
     */
    public function setMode($mode)
    {
        if (is_null($mode)) {
            throw new \InvalidArgumentException('non-nullable mode cannot be null');
        }
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets input_method
     *
     * @return \OpenAPI\Client\Model\PasswordInputMethodEnum|null
     * @deprecated
     */
    public function getInputMethod()
    {
        return $this->container['input_method'];
    }

    /**
     * Sets input_method
     *
     * @param \OpenAPI\Client\Model\PasswordInputMethodEnum|null $input_method input_method
     *
     * @return self
     * @deprecated
     */
    public function setInputMethod($input_method)
    {
        if (is_null($input_method)) {
            throw new \InvalidArgumentException('non-nullable input_method cannot be null');
        }
        $this->container['input_method'] = $input_method;

        return $this;
    }

    /**
     * Gets number_of_buttons
     *
     * @return int|null
     * @deprecated
     */
    public function getNumberOfButtons()
    {
        return $this->container['number_of_buttons'];
    }

    /**
     * Sets number_of_buttons
     *
     * @param int|null $number_of_buttons Use `passwordType.numberOfButtons` instead
     *
     * @return self
     * @deprecated
     */
    public function setNumberOfButtons($number_of_buttons)
    {
        if (is_null($number_of_buttons)) {
            throw new \InvalidArgumentException('non-nullable number_of_buttons cannot be null');
        }
        $this->container['number_of_buttons'] = $number_of_buttons;

        return $this;
    }

    /**
     * Gets buttons_per_row
     *
     * @return int|null
     * @deprecated
     */
    public function getButtonsPerRow()
    {
        return $this->container['buttons_per_row'];
    }

    /**
     * Sets buttons_per_row
     *
     * @param int|null $buttons_per_row Use `passwordType.buttonsPerRow` instead
     *
     * @return self
     * @deprecated
     */
    public function setButtonsPerRow($buttons_per_row)
    {
        if (is_null($buttons_per_row)) {
            throw new \InvalidArgumentException('non-nullable buttons_per_row cannot be null');
        }
        $this->container['buttons_per_row'] = $buttons_per_row;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     * @deprecated
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description Use `passwordType.description` instead
     *
     * @return self
     * @deprecated
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


