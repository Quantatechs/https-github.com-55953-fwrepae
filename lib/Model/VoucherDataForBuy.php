<?php
/**
 * VoucherDataForBuy
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * VoucherDataForBuy Class Doc Comment
 *
 * @category Class
 * @description If a type is not specified when requesting this data only the given user data and the list of types the authenticated user can buy for it (could be himself) is returned.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class VoucherDataForBuy implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'VoucherDataForBuy';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user' => '\OpenAPI\Client\Model\User',
        'type' => '\OpenAPI\Client\Model\VoucherTypeDetailed',
        'payment_custom_fields' => '\OpenAPI\Client\Model\CustomFieldDetailed[]',
        'custom_fields' => '\OpenAPI\Client\Model\CustomFieldDetailed[]',
        'account' => '\OpenAPI\Client\Model\VoucherCreateDataAllOfAccount',
        'minimum_time_to_redeem' => '\OpenAPI\Client\Model\VoucherCreateDataAllOfMinimumTimeToRedeem',
        'expiration_date' => '\DateTime',
        'redeem_after_date' => '\DateTime',
        'redeem_on_week_days' => '\OpenAPI\Client\Model\WeekDayEnum[]',
        'can_buy_multiple' => 'bool',
        'fixed_amount' => 'float',
        'amount_range' => '\OpenAPI\Client\Model\VoucherDataForBuyAllOfAmountRange',
        'categories' => '\OpenAPI\Client\Model\VoucherCategory[]',
        'types' => '\OpenAPI\Client\Model\VoucherTypeDetailed[]',
        'voucher_custom_fields' => '\OpenAPI\Client\Model\CustomFieldDetailed[]',
        'confirmation_password_input' => '\OpenAPI\Client\Model\VoucherDataForBuyAllOfConfirmationPasswordInput'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user' => null,
        'type' => null,
        'payment_custom_fields' => null,
        'custom_fields' => null,
        'account' => null,
        'minimum_time_to_redeem' => null,
        'expiration_date' => 'date-time',
        'redeem_after_date' => 'date-time',
        'redeem_on_week_days' => null,
        'can_buy_multiple' => null,
        'fixed_amount' => 'number',
        'amount_range' => null,
        'categories' => null,
        'types' => null,
        'voucher_custom_fields' => null,
        'confirmation_password_input' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user' => false,
        'type' => false,
        'payment_custom_fields' => false,
        'custom_fields' => false,
        'account' => false,
        'minimum_time_to_redeem' => false,
        'expiration_date' => false,
        'redeem_after_date' => false,
        'redeem_on_week_days' => false,
        'can_buy_multiple' => false,
        'fixed_amount' => false,
        'amount_range' => false,
        'categories' => false,
        'types' => false,
        'voucher_custom_fields' => false,
        'confirmation_password_input' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user' => 'user',
        'type' => 'type',
        'payment_custom_fields' => 'paymentCustomFields',
        'custom_fields' => 'customFields',
        'account' => 'account',
        'minimum_time_to_redeem' => 'minimumTimeToRedeem',
        'expiration_date' => 'expirationDate',
        'redeem_after_date' => 'redeemAfterDate',
        'redeem_on_week_days' => 'redeemOnWeekDays',
        'can_buy_multiple' => 'canBuyMultiple',
        'fixed_amount' => 'fixedAmount',
        'amount_range' => 'amountRange',
        'categories' => 'categories',
        'types' => 'types',
        'voucher_custom_fields' => 'voucherCustomFields',
        'confirmation_password_input' => 'confirmationPasswordInput'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user' => 'setUser',
        'type' => 'setType',
        'payment_custom_fields' => 'setPaymentCustomFields',
        'custom_fields' => 'setCustomFields',
        'account' => 'setAccount',
        'minimum_time_to_redeem' => 'setMinimumTimeToRedeem',
        'expiration_date' => 'setExpirationDate',
        'redeem_after_date' => 'setRedeemAfterDate',
        'redeem_on_week_days' => 'setRedeemOnWeekDays',
        'can_buy_multiple' => 'setCanBuyMultiple',
        'fixed_amount' => 'setFixedAmount',
        'amount_range' => 'setAmountRange',
        'categories' => 'setCategories',
        'types' => 'setTypes',
        'voucher_custom_fields' => 'setVoucherCustomFields',
        'confirmation_password_input' => 'setConfirmationPasswordInput'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user' => 'getUser',
        'type' => 'getType',
        'payment_custom_fields' => 'getPaymentCustomFields',
        'custom_fields' => 'getCustomFields',
        'account' => 'getAccount',
        'minimum_time_to_redeem' => 'getMinimumTimeToRedeem',
        'expiration_date' => 'getExpirationDate',
        'redeem_after_date' => 'getRedeemAfterDate',
        'redeem_on_week_days' => 'getRedeemOnWeekDays',
        'can_buy_multiple' => 'getCanBuyMultiple',
        'fixed_amount' => 'getFixedAmount',
        'amount_range' => 'getAmountRange',
        'categories' => 'getCategories',
        'types' => 'getTypes',
        'voucher_custom_fields' => 'getVoucherCustomFields',
        'confirmation_password_input' => 'getConfirmationPasswordInput'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('payment_custom_fields', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('minimum_time_to_redeem', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('redeem_after_date', $data ?? [], null);
        $this->setIfExists('redeem_on_week_days', $data ?? [], null);
        $this->setIfExists('can_buy_multiple', $data ?? [], null);
        $this->setIfExists('fixed_amount', $data ?? [], null);
        $this->setIfExists('amount_range', $data ?? [], null);
        $this->setIfExists('categories', $data ?? [], null);
        $this->setIfExists('types', $data ?? [], null);
        $this->setIfExists('voucher_custom_fields', $data ?? [], null);
        $this->setIfExists('confirmation_password_input', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\User|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\User|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\VoucherTypeDetailed|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\VoucherTypeDetailed|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets payment_custom_fields
     *
     * @return \OpenAPI\Client\Model\CustomFieldDetailed[]|null
     */
    public function getPaymentCustomFields()
    {
        return $this->container['payment_custom_fields'];
    }

    /**
     * Sets payment_custom_fields
     *
     * @param \OpenAPI\Client\Model\CustomFieldDetailed[]|null $payment_custom_fields The payment custom fields associated with this voucher type
     *
     * @return self
     */
    public function setPaymentCustomFields($payment_custom_fields)
    {
        if (is_null($payment_custom_fields)) {
            throw new \InvalidArgumentException('non-nullable payment_custom_fields cannot be null');
        }
        $this->container['payment_custom_fields'] = $payment_custom_fields;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \OpenAPI\Client\Model\CustomFieldDetailed[]|null
     * @deprecated
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \OpenAPI\Client\Model\CustomFieldDetailed[]|null $custom_fields Use `paymentCustomFields` instead.
     *
     * @return self
     * @deprecated
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \OpenAPI\Client\Model\VoucherCreateDataAllOfAccount|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \OpenAPI\Client\Model\VoucherCreateDataAllOfAccount|null $account account
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets minimum_time_to_redeem
     *
     * @return \OpenAPI\Client\Model\VoucherCreateDataAllOfMinimumTimeToRedeem|null
     */
    public function getMinimumTimeToRedeem()
    {
        return $this->container['minimum_time_to_redeem'];
    }

    /**
     * Sets minimum_time_to_redeem
     *
     * @param \OpenAPI\Client\Model\VoucherCreateDataAllOfMinimumTimeToRedeem|null $minimum_time_to_redeem minimum_time_to_redeem
     *
     * @return self
     */
    public function setMinimumTimeToRedeem($minimum_time_to_redeem)
    {
        if (is_null($minimum_time_to_redeem)) {
            throw new \InvalidArgumentException('non-nullable minimum_time_to_redeem cannot be null');
        }
        $this->container['minimum_time_to_redeem'] = $minimum_time_to_redeem;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date The date the voucher expires
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets redeem_after_date
     *
     * @return \DateTime|null
     */
    public function getRedeemAfterDate()
    {
        return $this->container['redeem_after_date'];
    }

    /**
     * Sets redeem_after_date
     *
     * @param \DateTime|null $redeem_after_date The date after which a voucher can be redeemed, it is calculated based on `minimumTimeToRedeem`
     *
     * @return self
     */
    public function setRedeemAfterDate($redeem_after_date)
    {
        if (is_null($redeem_after_date)) {
            throw new \InvalidArgumentException('non-nullable redeem_after_date cannot be null');
        }
        $this->container['redeem_after_date'] = $redeem_after_date;

        return $this;
    }

    /**
     * Gets redeem_on_week_days
     *
     * @return \OpenAPI\Client\Model\WeekDayEnum[]|null
     */
    public function getRedeemOnWeekDays()
    {
        return $this->container['redeem_on_week_days'];
    }

    /**
     * Sets redeem_on_week_days
     *
     * @param \OpenAPI\Client\Model\WeekDayEnum[]|null $redeem_on_week_days The days of the week a voucher can be redeemed. Only returned when the voucher status is neither `redeemed` nor `canceled`. Also not returned when searching for redeemed vouchers of a specific user.
     *
     * @return self
     */
    public function setRedeemOnWeekDays($redeem_on_week_days)
    {
        if (is_null($redeem_on_week_days)) {
            throw new \InvalidArgumentException('non-nullable redeem_on_week_days cannot be null');
        }
        $this->container['redeem_on_week_days'] = $redeem_on_week_days;

        return $this;
    }

    /**
     * Gets can_buy_multiple
     *
     * @return bool|null
     */
    public function getCanBuyMultiple()
    {
        return $this->container['can_buy_multiple'];
    }

    /**
     * Sets can_buy_multiple
     *
     * @param bool|null $can_buy_multiple If user can buy multiple vouchers at same time
     *
     * @return self
     */
    public function setCanBuyMultiple($can_buy_multiple)
    {
        if (is_null($can_buy_multiple)) {
            throw new \InvalidArgumentException('non-nullable can_buy_multiple cannot be null');
        }
        $this->container['can_buy_multiple'] = $can_buy_multiple;

        return $this;
    }

    /**
     * Gets fixed_amount
     *
     * @return float|null
     */
    public function getFixedAmount()
    {
        return $this->container['fixed_amount'];
    }

    /**
     * Sets fixed_amount
     *
     * @param float|null $fixed_amount Returned if there is a fixed amount for bought vouchers. Is kept for backwards compatibility, because the `amountRange` is enough to return this information (when `min` and `max` are the same amount)
     *
     * @return self
     */
    public function setFixedAmount($fixed_amount)
    {
        if (is_null($fixed_amount)) {
            throw new \InvalidArgumentException('non-nullable fixed_amount cannot be null');
        }
        $this->container['fixed_amount'] = $fixed_amount;

        return $this;
    }

    /**
     * Gets amount_range
     *
     * @return \OpenAPI\Client\Model\VoucherDataForBuyAllOfAmountRange|null
     */
    public function getAmountRange()
    {
        return $this->container['amount_range'];
    }

    /**
     * Sets amount_range
     *
     * @param \OpenAPI\Client\Model\VoucherDataForBuyAllOfAmountRange|null $amount_range amount_range
     *
     * @return self
     */
    public function setAmountRange($amount_range)
    {
        if (is_null($amount_range)) {
            throw new \InvalidArgumentException('non-nullable amount_range cannot be null');
        }
        $this->container['amount_range'] = $amount_range;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return \OpenAPI\Client\Model\VoucherCategory[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param \OpenAPI\Client\Model\VoucherCategory[]|null $categories The list of voucher categories applicable to the possible types. Returned only if no type parameter is given.
     *
     * @return self
     */
    public function setCategories($categories)
    {
        if (is_null($categories)) {
            throw new \InvalidArgumentException('non-nullable categories cannot be null');
        }
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets types
     *
     * @return \OpenAPI\Client\Model\VoucherTypeDetailed[]|null
     */
    public function getTypes()
    {
        return $this->container['types'];
    }

    /**
     * Sets types
     *
     * @param \OpenAPI\Client\Model\VoucherTypeDetailed[]|null $types The list of voucher types the authenticated user can buy to another user (or himself). Returned only if no type parameter is given.
     *
     * @return self
     */
    public function setTypes($types)
    {
        if (is_null($types)) {
            throw new \InvalidArgumentException('non-nullable types cannot be null');
        }
        $this->container['types'] = $types;

        return $this;
    }

    /**
     * Gets voucher_custom_fields
     *
     * @return \OpenAPI\Client\Model\CustomFieldDetailed[]|null
     */
    public function getVoucherCustomFields()
    {
        return $this->container['voucher_custom_fields'];
    }

    /**
     * Sets voucher_custom_fields
     *
     * @param \OpenAPI\Client\Model\CustomFieldDetailed[]|null $voucher_custom_fields The list of available voucher custom fields associated with this voucher type for the authenticated user.
     *
     * @return self
     */
    public function setVoucherCustomFields($voucher_custom_fields)
    {
        if (is_null($voucher_custom_fields)) {
            throw new \InvalidArgumentException('non-nullable voucher_custom_fields cannot be null');
        }
        $this->container['voucher_custom_fields'] = $voucher_custom_fields;

        return $this;
    }

    /**
     * Gets confirmation_password_input
     *
     * @return \OpenAPI\Client\Model\VoucherDataForBuyAllOfConfirmationPasswordInput|null
     * @deprecated
     */
    public function getConfirmationPasswordInput()
    {
        return $this->container['confirmation_password_input'];
    }

    /**
     * Sets confirmation_password_input
     *
     * @param \OpenAPI\Client\Model\VoucherDataForBuyAllOfConfirmationPasswordInput|null $confirmation_password_input confirmation_password_input
     *
     * @return self
     * @deprecated
     */
    public function setConfirmationPasswordInput($confirmation_password_input)
    {
        if (is_null($confirmation_password_input)) {
            throw new \InvalidArgumentException('non-nullable confirmation_password_input cannot be null');
        }
        $this->container['confirmation_password_input'] = $confirmation_password_input;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


