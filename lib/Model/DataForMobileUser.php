<?php
/**
 * DataForMobileUser
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DataForMobileUser Class Doc Comment
 *
 * @category Class
 * @description Contains definitions for the data for UI for users
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DataForMobileUser implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataForMobileUser';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'cyclos_version' => 'string',
        'current_client_time' => '\DateTime',
        'locale' => 'string',
        'allowed_locales' => '\OpenAPI\Client\Model\UserLocale[]',
        'root_url' => 'string',
        'theme' => '\OpenAPI\Client\Model\ThemeUIElement',
        'translations' => '\OpenAPI\Client\Model\MobileTranslations',
        'max_image_width' => 'int',
        'max_image_height' => 'int',
        'max_upload_size' => 'int',
        'jpeg_quality' => 'int',
        'map_browser_api_key' => 'string',
        'application_username' => 'string',
        'number_format' => '\OpenAPI\Client\Model\NumberFormatEnum',
        'date_format' => '\OpenAPI\Client\Model\DateFormatEnum',
        'time_format' => '\OpenAPI\Client\Model\TimeFormatEnum',
        'auto_complete_results' => 'int',
        'hide_users_search_menu' => 'bool',
        'auth' => '\OpenAPI\Client\Model\Auth',
        'name_of_user' => 'string',
        'mobile_help' => '\OpenAPI\Client\Model\DataForMobileUserAllOfMobileHelp',
        'pos_help' => '\OpenAPI\Client\Model\DataForMobileUserAllOfPosHelp',
        'home_page' => '\OpenAPI\Client\Model\DataForMobileUserAllOfHomePage',
        'update_home_on_events' => '\OpenAPI\Client\Model\PushNotificationEventKind[]',
        'pages' => '\OpenAPI\Client\Model\MobilePage[]',
        'operations' => '\OpenAPI\Client\Model\Operation[]',
        'can_receive_from_nfc_tag' => 'bool',
        'device_activation_mode' => '\OpenAPI\Client\Model\DataForMobileUserAllOfDeviceActivationMode',
        'personalize_other_users' => 'bool',
        'mobile_camera_on_payment' => 'bool',
        'principals_allowing_qr_code' => '\OpenAPI\Client\Model\Principal[]',
        'scan_qr' => 'bool',
        'enable_bluetooth_printer' => 'bool',
        'top_up_enabled' => 'bool',
        'shopping_cart_web_shop_count' => 'int',
        'messages_status' => '\OpenAPI\Client\Model\DataForMobileUserAllOfMessagesStatus',
        'notifications_status' => '\OpenAPI\Client\Model\DataForMobileUserAllOfNotificationsStatus',
        'allowed_operations' => '\OpenAPI\Client\Model\MobileOperationEnum[]',
        'wizards' => '\OpenAPI\Client\Model\Wizard[]',
        'map_preference' => '\OpenAPI\Client\Model\MapPreferenceEnum',
        'pin_prompt' => 'int',
        'trusted_device_prompt' => 'int',
        'home_page_enabled' => 'bool',
        'hide_quick_actions' => 'bool',
        'reload_home_page' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'cyclos_version' => null,
        'current_client_time' => 'date-time',
        'locale' => null,
        'allowed_locales' => null,
        'root_url' => null,
        'theme' => null,
        'translations' => null,
        'max_image_width' => null,
        'max_image_height' => null,
        'max_upload_size' => null,
        'jpeg_quality' => null,
        'map_browser_api_key' => null,
        'application_username' => null,
        'number_format' => null,
        'date_format' => null,
        'time_format' => null,
        'auto_complete_results' => null,
        'hide_users_search_menu' => null,
        'auth' => null,
        'name_of_user' => null,
        'mobile_help' => null,
        'pos_help' => null,
        'home_page' => null,
        'update_home_on_events' => null,
        'pages' => null,
        'operations' => null,
        'can_receive_from_nfc_tag' => null,
        'device_activation_mode' => null,
        'personalize_other_users' => null,
        'mobile_camera_on_payment' => null,
        'principals_allowing_qr_code' => null,
        'scan_qr' => null,
        'enable_bluetooth_printer' => null,
        'top_up_enabled' => null,
        'shopping_cart_web_shop_count' => null,
        'messages_status' => null,
        'notifications_status' => null,
        'allowed_operations' => null,
        'wizards' => null,
        'map_preference' => null,
        'pin_prompt' => null,
        'trusted_device_prompt' => null,
        'home_page_enabled' => null,
        'hide_quick_actions' => null,
        'reload_home_page' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'cyclos_version' => false,
        'current_client_time' => false,
        'locale' => false,
        'allowed_locales' => false,
        'root_url' => false,
        'theme' => false,
        'translations' => false,
        'max_image_width' => false,
        'max_image_height' => false,
        'max_upload_size' => false,
        'jpeg_quality' => false,
        'map_browser_api_key' => false,
        'application_username' => false,
        'number_format' => false,
        'date_format' => false,
        'time_format' => false,
        'auto_complete_results' => false,
        'hide_users_search_menu' => false,
        'auth' => false,
        'name_of_user' => false,
        'mobile_help' => false,
        'pos_help' => false,
        'home_page' => false,
        'update_home_on_events' => false,
        'pages' => false,
        'operations' => false,
        'can_receive_from_nfc_tag' => false,
        'device_activation_mode' => false,
        'personalize_other_users' => false,
        'mobile_camera_on_payment' => false,
        'principals_allowing_qr_code' => false,
        'scan_qr' => false,
        'enable_bluetooth_printer' => false,
        'top_up_enabled' => false,
        'shopping_cart_web_shop_count' => false,
        'messages_status' => false,
        'notifications_status' => false,
        'allowed_operations' => false,
        'wizards' => false,
        'map_preference' => false,
        'pin_prompt' => false,
        'trusted_device_prompt' => false,
        'home_page_enabled' => false,
        'hide_quick_actions' => false,
        'reload_home_page' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cyclos_version' => 'cyclosVersion',
        'current_client_time' => 'currentClientTime',
        'locale' => 'locale',
        'allowed_locales' => 'allowedLocales',
        'root_url' => 'rootUrl',
        'theme' => 'theme',
        'translations' => 'translations',
        'max_image_width' => 'maxImageWidth',
        'max_image_height' => 'maxImageHeight',
        'max_upload_size' => 'maxUploadSize',
        'jpeg_quality' => 'jpegQuality',
        'map_browser_api_key' => 'mapBrowserApiKey',
        'application_username' => 'applicationUsername',
        'number_format' => 'numberFormat',
        'date_format' => 'dateFormat',
        'time_format' => 'timeFormat',
        'auto_complete_results' => 'autoCompleteResults',
        'hide_users_search_menu' => 'hideUsersSearchMenu',
        'auth' => 'auth',
        'name_of_user' => 'nameOfUser',
        'mobile_help' => 'mobileHelp',
        'pos_help' => 'posHelp',
        'home_page' => 'homePage',
        'update_home_on_events' => 'updateHomeOnEvents',
        'pages' => 'pages',
        'operations' => 'operations',
        'can_receive_from_nfc_tag' => 'canReceiveFromNfcTag',
        'device_activation_mode' => 'deviceActivationMode',
        'personalize_other_users' => 'personalizeOtherUsers',
        'mobile_camera_on_payment' => 'mobileCameraOnPayment',
        'principals_allowing_qr_code' => 'principalsAllowingQRCode',
        'scan_qr' => 'scanQr',
        'enable_bluetooth_printer' => 'enableBluetoothPrinter',
        'top_up_enabled' => 'topUpEnabled',
        'shopping_cart_web_shop_count' => 'shoppingCartWebShopCount',
        'messages_status' => 'messagesStatus',
        'notifications_status' => 'notificationsStatus',
        'allowed_operations' => 'allowedOperations',
        'wizards' => 'wizards',
        'map_preference' => 'mapPreference',
        'pin_prompt' => 'pinPrompt',
        'trusted_device_prompt' => 'trustedDevicePrompt',
        'home_page_enabled' => 'homePageEnabled',
        'hide_quick_actions' => 'hideQuickActions',
        'reload_home_page' => 'reloadHomePage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cyclos_version' => 'setCyclosVersion',
        'current_client_time' => 'setCurrentClientTime',
        'locale' => 'setLocale',
        'allowed_locales' => 'setAllowedLocales',
        'root_url' => 'setRootUrl',
        'theme' => 'setTheme',
        'translations' => 'setTranslations',
        'max_image_width' => 'setMaxImageWidth',
        'max_image_height' => 'setMaxImageHeight',
        'max_upload_size' => 'setMaxUploadSize',
        'jpeg_quality' => 'setJpegQuality',
        'map_browser_api_key' => 'setMapBrowserApiKey',
        'application_username' => 'setApplicationUsername',
        'number_format' => 'setNumberFormat',
        'date_format' => 'setDateFormat',
        'time_format' => 'setTimeFormat',
        'auto_complete_results' => 'setAutoCompleteResults',
        'hide_users_search_menu' => 'setHideUsersSearchMenu',
        'auth' => 'setAuth',
        'name_of_user' => 'setNameOfUser',
        'mobile_help' => 'setMobileHelp',
        'pos_help' => 'setPosHelp',
        'home_page' => 'setHomePage',
        'update_home_on_events' => 'setUpdateHomeOnEvents',
        'pages' => 'setPages',
        'operations' => 'setOperations',
        'can_receive_from_nfc_tag' => 'setCanReceiveFromNfcTag',
        'device_activation_mode' => 'setDeviceActivationMode',
        'personalize_other_users' => 'setPersonalizeOtherUsers',
        'mobile_camera_on_payment' => 'setMobileCameraOnPayment',
        'principals_allowing_qr_code' => 'setPrincipalsAllowingQrCode',
        'scan_qr' => 'setScanQr',
        'enable_bluetooth_printer' => 'setEnableBluetoothPrinter',
        'top_up_enabled' => 'setTopUpEnabled',
        'shopping_cart_web_shop_count' => 'setShoppingCartWebShopCount',
        'messages_status' => 'setMessagesStatus',
        'notifications_status' => 'setNotificationsStatus',
        'allowed_operations' => 'setAllowedOperations',
        'wizards' => 'setWizards',
        'map_preference' => 'setMapPreference',
        'pin_prompt' => 'setPinPrompt',
        'trusted_device_prompt' => 'setTrustedDevicePrompt',
        'home_page_enabled' => 'setHomePageEnabled',
        'hide_quick_actions' => 'setHideQuickActions',
        'reload_home_page' => 'setReloadHomePage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cyclos_version' => 'getCyclosVersion',
        'current_client_time' => 'getCurrentClientTime',
        'locale' => 'getLocale',
        'allowed_locales' => 'getAllowedLocales',
        'root_url' => 'getRootUrl',
        'theme' => 'getTheme',
        'translations' => 'getTranslations',
        'max_image_width' => 'getMaxImageWidth',
        'max_image_height' => 'getMaxImageHeight',
        'max_upload_size' => 'getMaxUploadSize',
        'jpeg_quality' => 'getJpegQuality',
        'map_browser_api_key' => 'getMapBrowserApiKey',
        'application_username' => 'getApplicationUsername',
        'number_format' => 'getNumberFormat',
        'date_format' => 'getDateFormat',
        'time_format' => 'getTimeFormat',
        'auto_complete_results' => 'getAutoCompleteResults',
        'hide_users_search_menu' => 'getHideUsersSearchMenu',
        'auth' => 'getAuth',
        'name_of_user' => 'getNameOfUser',
        'mobile_help' => 'getMobileHelp',
        'pos_help' => 'getPosHelp',
        'home_page' => 'getHomePage',
        'update_home_on_events' => 'getUpdateHomeOnEvents',
        'pages' => 'getPages',
        'operations' => 'getOperations',
        'can_receive_from_nfc_tag' => 'getCanReceiveFromNfcTag',
        'device_activation_mode' => 'getDeviceActivationMode',
        'personalize_other_users' => 'getPersonalizeOtherUsers',
        'mobile_camera_on_payment' => 'getMobileCameraOnPayment',
        'principals_allowing_qr_code' => 'getPrincipalsAllowingQrCode',
        'scan_qr' => 'getScanQr',
        'enable_bluetooth_printer' => 'getEnableBluetoothPrinter',
        'top_up_enabled' => 'getTopUpEnabled',
        'shopping_cart_web_shop_count' => 'getShoppingCartWebShopCount',
        'messages_status' => 'getMessagesStatus',
        'notifications_status' => 'getNotificationsStatus',
        'allowed_operations' => 'getAllowedOperations',
        'wizards' => 'getWizards',
        'map_preference' => 'getMapPreference',
        'pin_prompt' => 'getPinPrompt',
        'trusted_device_prompt' => 'getTrustedDevicePrompt',
        'home_page_enabled' => 'getHomePageEnabled',
        'hide_quick_actions' => 'getHideQuickActions',
        'reload_home_page' => 'getReloadHomePage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('cyclos_version', $data ?? [], null);
        $this->setIfExists('current_client_time', $data ?? [], null);
        $this->setIfExists('locale', $data ?? [], null);
        $this->setIfExists('allowed_locales', $data ?? [], null);
        $this->setIfExists('root_url', $data ?? [], null);
        $this->setIfExists('theme', $data ?? [], null);
        $this->setIfExists('translations', $data ?? [], null);
        $this->setIfExists('max_image_width', $data ?? [], null);
        $this->setIfExists('max_image_height', $data ?? [], null);
        $this->setIfExists('max_upload_size', $data ?? [], null);
        $this->setIfExists('jpeg_quality', $data ?? [], null);
        $this->setIfExists('map_browser_api_key', $data ?? [], null);
        $this->setIfExists('application_username', $data ?? [], null);
        $this->setIfExists('number_format', $data ?? [], null);
        $this->setIfExists('date_format', $data ?? [], null);
        $this->setIfExists('time_format', $data ?? [], null);
        $this->setIfExists('auto_complete_results', $data ?? [], null);
        $this->setIfExists('hide_users_search_menu', $data ?? [], null);
        $this->setIfExists('auth', $data ?? [], null);
        $this->setIfExists('name_of_user', $data ?? [], null);
        $this->setIfExists('mobile_help', $data ?? [], null);
        $this->setIfExists('pos_help', $data ?? [], null);
        $this->setIfExists('home_page', $data ?? [], null);
        $this->setIfExists('update_home_on_events', $data ?? [], null);
        $this->setIfExists('pages', $data ?? [], null);
        $this->setIfExists('operations', $data ?? [], null);
        $this->setIfExists('can_receive_from_nfc_tag', $data ?? [], null);
        $this->setIfExists('device_activation_mode', $data ?? [], null);
        $this->setIfExists('personalize_other_users', $data ?? [], null);
        $this->setIfExists('mobile_camera_on_payment', $data ?? [], null);
        $this->setIfExists('principals_allowing_qr_code', $data ?? [], null);
        $this->setIfExists('scan_qr', $data ?? [], null);
        $this->setIfExists('enable_bluetooth_printer', $data ?? [], null);
        $this->setIfExists('top_up_enabled', $data ?? [], null);
        $this->setIfExists('shopping_cart_web_shop_count', $data ?? [], null);
        $this->setIfExists('messages_status', $data ?? [], null);
        $this->setIfExists('notifications_status', $data ?? [], null);
        $this->setIfExists('allowed_operations', $data ?? [], null);
        $this->setIfExists('wizards', $data ?? [], null);
        $this->setIfExists('map_preference', $data ?? [], null);
        $this->setIfExists('pin_prompt', $data ?? [], null);
        $this->setIfExists('trusted_device_prompt', $data ?? [], null);
        $this->setIfExists('home_page_enabled', $data ?? [], null);
        $this->setIfExists('hide_quick_actions', $data ?? [], null);
        $this->setIfExists('reload_home_page', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets cyclos_version
     *
     * @return string|null
     */
    public function getCyclosVersion()
    {
        return $this->container['cyclos_version'];
    }

    /**
     * Sets cyclos_version
     *
     * @param string|null $cyclos_version The version of the Cyclos server
     *
     * @return self
     */
    public function setCyclosVersion($cyclos_version)
    {
        if (is_null($cyclos_version)) {
            throw new \InvalidArgumentException('non-nullable cyclos_version cannot be null');
        }
        $this->container['cyclos_version'] = $cyclos_version;

        return $this;
    }

    /**
     * Gets current_client_time
     *
     * @return \DateTime|null
     */
    public function getCurrentClientTime()
    {
        return $this->container['current_client_time'];
    }

    /**
     * Sets current_client_time
     *
     * @param \DateTime|null $current_client_time The current client time according to the server
     *
     * @return self
     */
    public function setCurrentClientTime($current_client_time)
    {
        if (is_null($current_client_time)) {
            throw new \InvalidArgumentException('non-nullable current_client_time cannot be null');
        }
        $this->container['current_client_time'] = $current_client_time;

        return $this;
    }

    /**
     * Gets locale
     *
     * @return string|null
     */
    public function getLocale()
    {
        return $this->container['locale'];
    }

    /**
     * Sets locale
     *
     * @param string|null $locale The current locale
     *
     * @return self
     */
    public function setLocale($locale)
    {
        if (is_null($locale)) {
            throw new \InvalidArgumentException('non-nullable locale cannot be null');
        }
        $this->container['locale'] = $locale;

        return $this;
    }

    /**
     * Gets allowed_locales
     *
     * @return \OpenAPI\Client\Model\UserLocale[]|null
     */
    public function getAllowedLocales()
    {
        return $this->container['allowed_locales'];
    }

    /**
     * Sets allowed_locales
     *
     * @param \OpenAPI\Client\Model\UserLocale[]|null $allowed_locales The locales the user can select for example to change the language.
     *
     * @return self
     */
    public function setAllowedLocales($allowed_locales)
    {
        if (is_null($allowed_locales)) {
            throw new \InvalidArgumentException('non-nullable allowed_locales cannot be null');
        }
        $this->container['allowed_locales'] = $allowed_locales;

        return $this;
    }

    /**
     * Gets root_url
     *
     * @return string|null
     */
    public function getRootUrl()
    {
        return $this->container['root_url'];
    }

    /**
     * Sets root_url
     *
     * @param string|null $root_url The main URL set in the configuration
     *
     * @return self
     */
    public function setRootUrl($root_url)
    {
        if (is_null($root_url)) {
            throw new \InvalidArgumentException('non-nullable root_url cannot be null');
        }
        $this->container['root_url'] = $root_url;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return \OpenAPI\Client\Model\ThemeUIElement|null
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param \OpenAPI\Client\Model\ThemeUIElement|null $theme theme
     *
     * @return self
     */
    public function setTheme($theme)
    {
        if (is_null($theme)) {
            throw new \InvalidArgumentException('non-nullable theme cannot be null');
        }
        $this->container['theme'] = $theme;

        return $this;
    }

    /**
     * Gets translations
     *
     * @return \OpenAPI\Client\Model\MobileTranslations|null
     */
    public function getTranslations()
    {
        return $this->container['translations'];
    }

    /**
     * Sets translations
     *
     * @param \OpenAPI\Client\Model\MobileTranslations|null $translations translations
     *
     * @return self
     */
    public function setTranslations($translations)
    {
        if (is_null($translations)) {
            throw new \InvalidArgumentException('non-nullable translations cannot be null');
        }
        $this->container['translations'] = $translations;

        return $this;
    }

    /**
     * Gets max_image_width
     *
     * @return int|null
     */
    public function getMaxImageWidth()
    {
        return $this->container['max_image_width'];
    }

    /**
     * Sets max_image_width
     *
     * @param int|null $max_image_width Maximum width (in pixels) for uploaded images
     *
     * @return self
     */
    public function setMaxImageWidth($max_image_width)
    {
        if (is_null($max_image_width)) {
            throw new \InvalidArgumentException('non-nullable max_image_width cannot be null');
        }
        $this->container['max_image_width'] = $max_image_width;

        return $this;
    }

    /**
     * Gets max_image_height
     *
     * @return int|null
     */
    public function getMaxImageHeight()
    {
        return $this->container['max_image_height'];
    }

    /**
     * Sets max_image_height
     *
     * @param int|null $max_image_height Maximum height (in pixels) for uploaded images
     *
     * @return self
     */
    public function setMaxImageHeight($max_image_height)
    {
        if (is_null($max_image_height)) {
            throw new \InvalidArgumentException('non-nullable max_image_height cannot be null');
        }
        $this->container['max_image_height'] = $max_image_height;

        return $this;
    }

    /**
     * Gets max_upload_size
     *
     * @return int|null
     */
    public function getMaxUploadSize()
    {
        return $this->container['max_upload_size'];
    }

    /**
     * Sets max_upload_size
     *
     * @param int|null $max_upload_size Maximum size (in bytes) for uploaded files
     *
     * @return self
     */
    public function setMaxUploadSize($max_upload_size)
    {
        if (is_null($max_upload_size)) {
            throw new \InvalidArgumentException('non-nullable max_upload_size cannot be null');
        }
        $this->container['max_upload_size'] = $max_upload_size;

        return $this;
    }

    /**
     * Gets jpeg_quality
     *
     * @return int|null
     */
    public function getJpegQuality()
    {
        return $this->container['jpeg_quality'];
    }

    /**
     * Sets jpeg_quality
     *
     * @param int|null $jpeg_quality Quality for JPEG image types (higher means better quality)
     *
     * @return self
     */
    public function setJpegQuality($jpeg_quality)
    {
        if (is_null($jpeg_quality)) {
            throw new \InvalidArgumentException('non-nullable jpeg_quality cannot be null');
        }
        $this->container['jpeg_quality'] = $jpeg_quality;

        return $this;
    }

    /**
     * Gets map_browser_api_key
     *
     * @return string|null
     */
    public function getMapBrowserApiKey()
    {
        return $this->container['map_browser_api_key'];
    }

    /**
     * Sets map_browser_api_key
     *
     * @param string|null $map_browser_api_key The Google Maps browser API key
     *
     * @return self
     */
    public function setMapBrowserApiKey($map_browser_api_key)
    {
        if (is_null($map_browser_api_key)) {
            throw new \InvalidArgumentException('non-nullable map_browser_api_key cannot be null');
        }
        $this->container['map_browser_api_key'] = $map_browser_api_key;

        return $this;
    }

    /**
     * Gets application_username
     *
     * @return string|null
     */
    public function getApplicationUsername()
    {
        return $this->container['application_username'];
    }

    /**
     * Sets application_username
     *
     * @param string|null $application_username An username used by the application to be displayed for example in system messages
     *
     * @return self
     */
    public function setApplicationUsername($application_username)
    {
        if (is_null($application_username)) {
            throw new \InvalidArgumentException('non-nullable application_username cannot be null');
        }
        $this->container['application_username'] = $application_username;

        return $this;
    }

    /**
     * Gets number_format
     *
     * @return \OpenAPI\Client\Model\NumberFormatEnum|null
     */
    public function getNumberFormat()
    {
        return $this->container['number_format'];
    }

    /**
     * Sets number_format
     *
     * @param \OpenAPI\Client\Model\NumberFormatEnum|null $number_format number_format
     *
     * @return self
     */
    public function setNumberFormat($number_format)
    {
        if (is_null($number_format)) {
            throw new \InvalidArgumentException('non-nullable number_format cannot be null');
        }
        $this->container['number_format'] = $number_format;

        return $this;
    }

    /**
     * Gets date_format
     *
     * @return \OpenAPI\Client\Model\DateFormatEnum|null
     */
    public function getDateFormat()
    {
        return $this->container['date_format'];
    }

    /**
     * Sets date_format
     *
     * @param \OpenAPI\Client\Model\DateFormatEnum|null $date_format date_format
     *
     * @return self
     */
    public function setDateFormat($date_format)
    {
        if (is_null($date_format)) {
            throw new \InvalidArgumentException('non-nullable date_format cannot be null');
        }
        $this->container['date_format'] = $date_format;

        return $this;
    }

    /**
     * Gets time_format
     *
     * @return \OpenAPI\Client\Model\TimeFormatEnum|null
     */
    public function getTimeFormat()
    {
        return $this->container['time_format'];
    }

    /**
     * Sets time_format
     *
     * @param \OpenAPI\Client\Model\TimeFormatEnum|null $time_format time_format
     *
     * @return self
     */
    public function setTimeFormat($time_format)
    {
        if (is_null($time_format)) {
            throw new \InvalidArgumentException('non-nullable time_format cannot be null');
        }
        $this->container['time_format'] = $time_format;

        return $this;
    }

    /**
     * Gets auto_complete_results
     *
     * @return int|null
     */
    public function getAutoCompleteResults()
    {
        return $this->container['auto_complete_results'];
    }

    /**
     * Sets auto_complete_results
     *
     * @param int|null $auto_complete_results Number of search results for user autocomplete component
     *
     * @return self
     */
    public function setAutoCompleteResults($auto_complete_results)
    {
        if (is_null($auto_complete_results)) {
            throw new \InvalidArgumentException('non-nullable auto_complete_results cannot be null');
        }
        $this->container['auto_complete_results'] = $auto_complete_results;

        return $this;
    }

    /**
     * Gets hide_users_search_menu
     *
     * @return bool|null
     */
    public function getHideUsersSearchMenu()
    {
        return $this->container['hide_users_search_menu'];
    }

    /**
     * Sets hide_users_search_menu
     *
     * @param bool|null $hide_users_search_menu Indicates if the user search menu should be hidden.
     *
     * @return self
     */
    public function setHideUsersSearchMenu($hide_users_search_menu)
    {
        if (is_null($hide_users_search_menu)) {
            throw new \InvalidArgumentException('non-nullable hide_users_search_menu cannot be null');
        }
        $this->container['hide_users_search_menu'] = $hide_users_search_menu;

        return $this;
    }

    /**
     * Gets auth
     *
     * @return \OpenAPI\Client\Model\Auth|null
     */
    public function getAuth()
    {
        return $this->container['auth'];
    }

    /**
     * Sets auth
     *
     * @param \OpenAPI\Client\Model\Auth|null $auth auth
     *
     * @return self
     */
    public function setAuth($auth)
    {
        if (is_null($auth)) {
            throw new \InvalidArgumentException('non-nullable auth cannot be null');
        }
        $this->container['auth'] = $auth;

        return $this;
    }

    /**
     * Gets name_of_user
     *
     * @return string|null
     */
    public function getNameOfUser()
    {
        return $this->container['name_of_user'];
    }

    /**
     * Sets name_of_user
     *
     * @param string|null $name_of_user The name of the current user (if any)
     *
     * @return self
     */
    public function setNameOfUser($name_of_user)
    {
        if (is_null($name_of_user)) {
            throw new \InvalidArgumentException('non-nullable name_of_user cannot be null');
        }
        $this->container['name_of_user'] = $name_of_user;

        return $this;
    }

    /**
     * Gets mobile_help
     *
     * @return \OpenAPI\Client\Model\DataForMobileUserAllOfMobileHelp|null
     */
    public function getMobileHelp()
    {
        return $this->container['mobile_help'];
    }

    /**
     * Sets mobile_help
     *
     * @param \OpenAPI\Client\Model\DataForMobileUserAllOfMobileHelp|null $mobile_help mobile_help
     *
     * @return self
     */
    public function setMobileHelp($mobile_help)
    {
        if (is_null($mobile_help)) {
            throw new \InvalidArgumentException('non-nullable mobile_help cannot be null');
        }
        $this->container['mobile_help'] = $mobile_help;

        return $this;
    }

    /**
     * Gets pos_help
     *
     * @return \OpenAPI\Client\Model\DataForMobileUserAllOfPosHelp|null
     */
    public function getPosHelp()
    {
        return $this->container['pos_help'];
    }

    /**
     * Sets pos_help
     *
     * @param \OpenAPI\Client\Model\DataForMobileUserAllOfPosHelp|null $pos_help pos_help
     *
     * @return self
     */
    public function setPosHelp($pos_help)
    {
        if (is_null($pos_help)) {
            throw new \InvalidArgumentException('non-nullable pos_help cannot be null');
        }
        $this->container['pos_help'] = $pos_help;

        return $this;
    }

    /**
     * Gets home_page
     *
     * @return \OpenAPI\Client\Model\DataForMobileUserAllOfHomePage|null
     */
    public function getHomePage()
    {
        return $this->container['home_page'];
    }

    /**
     * Sets home_page
     *
     * @param \OpenAPI\Client\Model\DataForMobileUserAllOfHomePage|null $home_page home_page
     *
     * @return self
     */
    public function setHomePage($home_page)
    {
        if (is_null($home_page)) {
            throw new \InvalidArgumentException('non-nullable home_page cannot be null');
        }
        $this->container['home_page'] = $home_page;

        return $this;
    }

    /**
     * Gets update_home_on_events
     *
     * @return \OpenAPI\Client\Model\PushNotificationEventKind[]|null
     */
    public function getUpdateHomeOnEvents()
    {
        return $this->container['update_home_on_events'];
    }

    /**
     * Sets update_home_on_events
     *
     * @param \OpenAPI\Client\Model\PushNotificationEventKind[]|null $update_home_on_events The push event types that should update the home page
     *
     * @return self
     */
    public function setUpdateHomeOnEvents($update_home_on_events)
    {
        if (is_null($update_home_on_events)) {
            throw new \InvalidArgumentException('non-nullable update_home_on_events cannot be null');
        }
        $this->container['update_home_on_events'] = $update_home_on_events;

        return $this;
    }

    /**
     * Gets pages
     *
     * @return \OpenAPI\Client\Model\MobilePage[]|null
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     *
     * @param \OpenAPI\Client\Model\MobilePage[]|null $pages The visible mobile pages
     *
     * @return self
     */
    public function setPages($pages)
    {
        if (is_null($pages)) {
            throw new \InvalidArgumentException('non-nullable pages cannot be null');
        }
        $this->container['pages'] = $pages;

        return $this;
    }

    /**
     * Gets operations
     *
     * @return \OpenAPI\Client\Model\Operation[]|null
     */
    public function getOperations()
    {
        return $this->container['operations'];
    }

    /**
     * Sets operations
     *
     * @param \OpenAPI\Client\Model\Operation[]|null $operations The custom operations the user can run
     *
     * @return self
     */
    public function setOperations($operations)
    {
        if (is_null($operations)) {
            throw new \InvalidArgumentException('non-nullable operations cannot be null');
        }
        $this->container['operations'] = $operations;

        return $this;
    }

    /**
     * Gets can_receive_from_nfc_tag
     *
     * @return bool|null
     */
    public function getCanReceiveFromNfcTag()
    {
        return $this->container['can_receive_from_nfc_tag'];
    }

    /**
     * Sets can_receive_from_nfc_tag
     *
     * @param bool|null $can_receive_from_nfc_tag Indicates whether there is at least one NFC tag the user can use to receive payments
     *
     * @return self
     */
    public function setCanReceiveFromNfcTag($can_receive_from_nfc_tag)
    {
        if (is_null($can_receive_from_nfc_tag)) {
            throw new \InvalidArgumentException('non-nullable can_receive_from_nfc_tag cannot be null');
        }
        $this->container['can_receive_from_nfc_tag'] = $can_receive_from_nfc_tag;

        return $this;
    }

    /**
     * Gets device_activation_mode
     *
     * @return \OpenAPI\Client\Model\DataForMobileUserAllOfDeviceActivationMode|null
     */
    public function getDeviceActivationMode()
    {
        return $this->container['device_activation_mode'];
    }

    /**
     * Sets device_activation_mode
     *
     * @param \OpenAPI\Client\Model\DataForMobileUserAllOfDeviceActivationMode|null $device_activation_mode device_activation_mode
     *
     * @return self
     */
    public function setDeviceActivationMode($device_activation_mode)
    {
        if (is_null($device_activation_mode)) {
            throw new \InvalidArgumentException('non-nullable device_activation_mode cannot be null');
        }
        $this->container['device_activation_mode'] = $device_activation_mode;

        return $this;
    }

    /**
     * Gets personalize_other_users
     *
     * @return bool|null
     */
    public function getPersonalizeOtherUsers()
    {
        return $this->container['personalize_other_users'];
    }

    /**
     * Sets personalize_other_users
     *
     * @param bool|null $personalize_other_users Indicates if the current user can personalize NFC tags for other users (as member)
     *
     * @return self
     */
    public function setPersonalizeOtherUsers($personalize_other_users)
    {
        if (is_null($personalize_other_users)) {
            throw new \InvalidArgumentException('non-nullable personalize_other_users cannot be null');
        }
        $this->container['personalize_other_users'] = $personalize_other_users;

        return $this;
    }

    /**
     * Gets mobile_camera_on_payment
     *
     * @return bool|null
     */
    public function getMobileCameraOnPayment()
    {
        return $this->container['mobile_camera_on_payment'];
    }

    /**
     * Sets mobile_camera_on_payment
     *
     * @param bool|null $mobile_camera_on_payment Indicates whether the scan QR code option should be displayed for payments
     *
     * @return self
     */
    public function setMobileCameraOnPayment($mobile_camera_on_payment)
    {
        if (is_null($mobile_camera_on_payment)) {
            throw new \InvalidArgumentException('non-nullable mobile_camera_on_payment cannot be null');
        }
        $this->container['mobile_camera_on_payment'] = $mobile_camera_on_payment;

        return $this;
    }

    /**
     * Gets principals_allowing_qr_code
     *
     * @return \OpenAPI\Client\Model\Principal[]|null
     */
    public function getPrincipalsAllowingQrCode()
    {
        return $this->container['principals_allowing_qr_code'];
    }

    /**
     * Sets principals_allowing_qr_code
     *
     * @param \OpenAPI\Client\Model\Principal[]|null $principals_allowing_qr_code Indicates the possible principals which are allowed to be used in QR code generation
     *
     * @return self
     */
    public function setPrincipalsAllowingQrCode($principals_allowing_qr_code)
    {
        if (is_null($principals_allowing_qr_code)) {
            throw new \InvalidArgumentException('non-nullable principals_allowing_qr_code cannot be null');
        }
        $this->container['principals_allowing_qr_code'] = $principals_allowing_qr_code;

        return $this;
    }

    /**
     * Gets scan_qr
     *
     * @return bool|null
     */
    public function getScanQr()
    {
        return $this->container['scan_qr'];
    }

    /**
     * Sets scan_qr
     *
     * @param bool|null $scan_qr Indicates whether the scan QR code option (global) should be displayed by checking if the user can approve a ticket, or has a QR/Barcode for make payments, or has an easy invoice channel enabled
     *
     * @return self
     */
    public function setScanQr($scan_qr)
    {
        if (is_null($scan_qr)) {
            throw new \InvalidArgumentException('non-nullable scan_qr cannot be null');
        }
        $this->container['scan_qr'] = $scan_qr;

        return $this;
    }

    /**
     * Gets enable_bluetooth_printer
     *
     * @return bool|null
     */
    public function getEnableBluetoothPrinter()
    {
        return $this->container['enable_bluetooth_printer'];
    }

    /**
     * Sets enable_bluetooth_printer
     *
     * @param bool|null $enable_bluetooth_printer Whether the bluetooth printer is enabled or not
     *
     * @return self
     */
    public function setEnableBluetoothPrinter($enable_bluetooth_printer)
    {
        if (is_null($enable_bluetooth_printer)) {
            throw new \InvalidArgumentException('non-nullable enable_bluetooth_printer cannot be null');
        }
        $this->container['enable_bluetooth_printer'] = $enable_bluetooth_printer;

        return $this;
    }

    /**
     * Gets top_up_enabled
     *
     * @return bool|null
     */
    public function getTopUpEnabled()
    {
        return $this->container['top_up_enabled'];
    }

    /**
     * Sets top_up_enabled
     *
     * @param bool|null $top_up_enabled Indicates whether there is a voucher configuration supporting top-up which is visible for the authenticated user, this means the top-up feature was configured in the system.
     *
     * @return self
     */
    public function setTopUpEnabled($top_up_enabled)
    {
        if (is_null($top_up_enabled)) {
            throw new \InvalidArgumentException('non-nullable top_up_enabled cannot be null');
        }
        $this->container['top_up_enabled'] = $top_up_enabled;

        return $this;
    }

    /**
     * Gets shopping_cart_web_shop_count
     *
     * @return int|null
     */
    public function getShoppingCartWebShopCount()
    {
        return $this->container['shopping_cart_web_shop_count'];
    }

    /**
     * Sets shopping_cart_web_shop_count
     *
     * @param int|null $shopping_cart_web_shop_count The total number of webshop ads present in the shopping cart
     *
     * @return self
     */
    public function setShoppingCartWebShopCount($shopping_cart_web_shop_count)
    {
        if (is_null($shopping_cart_web_shop_count)) {
            throw new \InvalidArgumentException('non-nullable shopping_cart_web_shop_count cannot be null');
        }
        $this->container['shopping_cart_web_shop_count'] = $shopping_cart_web_shop_count;

        return $this;
    }

    /**
     * Gets messages_status
     *
     * @return \OpenAPI\Client\Model\DataForMobileUserAllOfMessagesStatus|null
     */
    public function getMessagesStatus()
    {
        return $this->container['messages_status'];
    }

    /**
     * Sets messages_status
     *
     * @param \OpenAPI\Client\Model\DataForMobileUserAllOfMessagesStatus|null $messages_status messages_status
     *
     * @return self
     */
    public function setMessagesStatus($messages_status)
    {
        if (is_null($messages_status)) {
            throw new \InvalidArgumentException('non-nullable messages_status cannot be null');
        }
        $this->container['messages_status'] = $messages_status;

        return $this;
    }

    /**
     * Gets notifications_status
     *
     * @return \OpenAPI\Client\Model\DataForMobileUserAllOfNotificationsStatus|null
     */
    public function getNotificationsStatus()
    {
        return $this->container['notifications_status'];
    }

    /**
     * Sets notifications_status
     *
     * @param \OpenAPI\Client\Model\DataForMobileUserAllOfNotificationsStatus|null $notifications_status notifications_status
     *
     * @return self
     */
    public function setNotificationsStatus($notifications_status)
    {
        if (is_null($notifications_status)) {
            throw new \InvalidArgumentException('non-nullable notifications_status cannot be null');
        }
        $this->container['notifications_status'] = $notifications_status;

        return $this;
    }

    /**
     * Gets allowed_operations
     *
     * @return \OpenAPI\Client\Model\MobileOperationEnum[]|null
     */
    public function getAllowedOperations()
    {
        return $this->container['allowed_operations'];
    }

    /**
     * Sets allowed_operations
     *
     * @param \OpenAPI\Client\Model\MobileOperationEnum[]|null $allowed_operations allowed_operations
     *
     * @return self
     */
    public function setAllowedOperations($allowed_operations)
    {
        if (is_null($allowed_operations)) {
            throw new \InvalidArgumentException('non-nullable allowed_operations cannot be null');
        }
        $this->container['allowed_operations'] = $allowed_operations;

        return $this;
    }

    /**
     * Gets wizards
     *
     * @return \OpenAPI\Client\Model\Wizard[]|null
     */
    public function getWizards()
    {
        return $this->container['wizards'];
    }

    /**
     * Sets wizards
     *
     * @param \OpenAPI\Client\Model\Wizard[]|null $wizards The wizard operations the user can run
     *
     * @return self
     */
    public function setWizards($wizards)
    {
        if (is_null($wizards)) {
            throw new \InvalidArgumentException('non-nullable wizards cannot be null');
        }
        $this->container['wizards'] = $wizards;

        return $this;
    }

    /**
     * Gets map_preference
     *
     * @return \OpenAPI\Client\Model\MapPreferenceEnum|null
     */
    public function getMapPreference()
    {
        return $this->container['map_preference'];
    }

    /**
     * Sets map_preference
     *
     * @param \OpenAPI\Client\Model\MapPreferenceEnum|null $map_preference map_preference
     *
     * @return self
     */
    public function setMapPreference($map_preference)
    {
        if (is_null($map_preference)) {
            throw new \InvalidArgumentException('non-nullable map_preference cannot be null');
        }
        $this->container['map_preference'] = $map_preference;

        return $this;
    }

    /**
     * Gets pin_prompt
     *
     * @return int|null
     */
    public function getPinPrompt()
    {
        return $this->container['pin_prompt'];
    }

    /**
     * Sets pin_prompt
     *
     * @param int|null $pin_prompt How many times the user is prompted to set a PIN after login
     *
     * @return self
     */
    public function setPinPrompt($pin_prompt)
    {
        if (is_null($pin_prompt)) {
            throw new \InvalidArgumentException('non-nullable pin_prompt cannot be null');
        }
        $this->container['pin_prompt'] = $pin_prompt;

        return $this;
    }

    /**
     * Gets trusted_device_prompt
     *
     * @return int|null
     */
    public function getTrustedDevicePrompt()
    {
        return $this->container['trusted_device_prompt'];
    }

    /**
     * Sets trusted_device_prompt
     *
     * @param int|null $trusted_device_prompt How many times the user is prompted to set as Trusted Device after login
     *
     * @return self
     */
    public function setTrustedDevicePrompt($trusted_device_prompt)
    {
        if (is_null($trusted_device_prompt)) {
            throw new \InvalidArgumentException('non-nullable trusted_device_prompt cannot be null');
        }
        $this->container['trusted_device_prompt'] = $trusted_device_prompt;

        return $this;
    }

    /**
     * Gets home_page_enabled
     *
     * @return bool|null
     */
    public function getHomePageEnabled()
    {
        return $this->container['home_page_enabled'];
    }

    /**
     * Sets home_page_enabled
     *
     * @param bool|null $home_page_enabled Indicates whether there is a custom home page available and it's configured for the current mode (App / POS).
     *
     * @return self
     */
    public function setHomePageEnabled($home_page_enabled)
    {
        if (is_null($home_page_enabled)) {
            throw new \InvalidArgumentException('non-nullable home_page_enabled cannot be null');
        }
        $this->container['home_page_enabled'] = $home_page_enabled;

        return $this;
    }

    /**
     * Gets hide_quick_actions
     *
     * @return bool|null
     */
    public function getHideQuickActions()
    {
        return $this->container['hide_quick_actions'];
    }

    /**
     * Sets hide_quick_actions
     *
     * @param bool|null $hide_quick_actions Indicates whether the quick actions (e.g: Scan QR - Notifications - Messages - Shopping Cart) are hidden in the top bar and displayed in the side navigation bar.
     *
     * @return self
     */
    public function setHideQuickActions($hide_quick_actions)
    {
        if (is_null($hide_quick_actions)) {
            throw new \InvalidArgumentException('non-nullable hide_quick_actions cannot be null');
        }
        $this->container['hide_quick_actions'] = $hide_quick_actions;

        return $this;
    }

    /**
     * Gets reload_home_page
     *
     * @return bool|null
     */
    public function getReloadHomePage()
    {
        return $this->container['reload_home_page'];
    }

    /**
     * Sets reload_home_page
     *
     * @param bool|null $reload_home_page Indicates whether the custom home page must be reloaded each time before render it.
     *
     * @return self
     */
    public function setReloadHomePage($reload_home_page)
    {
        if (is_null($reload_home_page)) {
            throw new \InvalidArgumentException('non-nullable reload_home_page cannot be null');
        }
        $this->container['reload_home_page'] = $reload_home_page;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


