<?php
/**
 * UserProfilePermissions
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserProfilePermissions Class Doc Comment
 *
 * @category Class
 * @description Permissions over a user profile
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserProfilePermissions implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserProfilePermissions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'edit_profile' => 'bool',
        'manage_addresses' => 'bool',
        'manage_addresses_privacy' => 'bool',
        'manage_phones' => 'bool',
        'manage_phones_privacy' => 'bool',
        'manage_images' => 'bool',
        'manage_contact_infos' => 'bool',
        'can_create_address' => 'bool',
        'can_create_land_line' => 'bool',
        'can_create_mobile' => 'bool',
        'can_create_image' => 'bool',
        'can_create_contact_info' => 'bool',
        'max_addresses' => 'int',
        'max_mobiles' => 'int',
        'max_land_lines' => 'int',
        'max_images' => 'int',
        'max_contact_infos' => 'int',
        'address_availability' => '\OpenAPI\Client\Model\AvailabilityEnum',
        'mobile_availability' => '\OpenAPI\Client\Model\AvailabilityEnum',
        'land_line_availability' => '\OpenAPI\Client\Model\AvailabilityEnum',
        'profile_image_availability' => '\OpenAPI\Client\Model\AvailabilityEnum',
        'contact_info_availability' => '\OpenAPI\Client\Model\AvailabilityEnum',
        'physically_remove' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'edit_profile' => null,
        'manage_addresses' => null,
        'manage_addresses_privacy' => null,
        'manage_phones' => null,
        'manage_phones_privacy' => null,
        'manage_images' => null,
        'manage_contact_infos' => null,
        'can_create_address' => null,
        'can_create_land_line' => null,
        'can_create_mobile' => null,
        'can_create_image' => null,
        'can_create_contact_info' => null,
        'max_addresses' => null,
        'max_mobiles' => null,
        'max_land_lines' => null,
        'max_images' => null,
        'max_contact_infos' => null,
        'address_availability' => null,
        'mobile_availability' => null,
        'land_line_availability' => null,
        'profile_image_availability' => null,
        'contact_info_availability' => null,
        'physically_remove' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'edit_profile' => false,
        'manage_addresses' => false,
        'manage_addresses_privacy' => false,
        'manage_phones' => false,
        'manage_phones_privacy' => false,
        'manage_images' => false,
        'manage_contact_infos' => false,
        'can_create_address' => false,
        'can_create_land_line' => false,
        'can_create_mobile' => false,
        'can_create_image' => false,
        'can_create_contact_info' => false,
        'max_addresses' => false,
        'max_mobiles' => false,
        'max_land_lines' => false,
        'max_images' => false,
        'max_contact_infos' => false,
        'address_availability' => false,
        'mobile_availability' => false,
        'land_line_availability' => false,
        'profile_image_availability' => false,
        'contact_info_availability' => false,
        'physically_remove' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'edit_profile' => 'editProfile',
        'manage_addresses' => 'manageAddresses',
        'manage_addresses_privacy' => 'manageAddressesPrivacy',
        'manage_phones' => 'managePhones',
        'manage_phones_privacy' => 'managePhonesPrivacy',
        'manage_images' => 'manageImages',
        'manage_contact_infos' => 'manageContactInfos',
        'can_create_address' => 'canCreateAddress',
        'can_create_land_line' => 'canCreateLandLine',
        'can_create_mobile' => 'canCreateMobile',
        'can_create_image' => 'canCreateImage',
        'can_create_contact_info' => 'canCreateContactInfo',
        'max_addresses' => 'maxAddresses',
        'max_mobiles' => 'maxMobiles',
        'max_land_lines' => 'maxLandLines',
        'max_images' => 'maxImages',
        'max_contact_infos' => 'maxContactInfos',
        'address_availability' => 'addressAvailability',
        'mobile_availability' => 'mobileAvailability',
        'land_line_availability' => 'landLineAvailability',
        'profile_image_availability' => 'profileImageAvailability',
        'contact_info_availability' => 'contactInfoAvailability',
        'physically_remove' => 'physicallyRemove'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'edit_profile' => 'setEditProfile',
        'manage_addresses' => 'setManageAddresses',
        'manage_addresses_privacy' => 'setManageAddressesPrivacy',
        'manage_phones' => 'setManagePhones',
        'manage_phones_privacy' => 'setManagePhonesPrivacy',
        'manage_images' => 'setManageImages',
        'manage_contact_infos' => 'setManageContactInfos',
        'can_create_address' => 'setCanCreateAddress',
        'can_create_land_line' => 'setCanCreateLandLine',
        'can_create_mobile' => 'setCanCreateMobile',
        'can_create_image' => 'setCanCreateImage',
        'can_create_contact_info' => 'setCanCreateContactInfo',
        'max_addresses' => 'setMaxAddresses',
        'max_mobiles' => 'setMaxMobiles',
        'max_land_lines' => 'setMaxLandLines',
        'max_images' => 'setMaxImages',
        'max_contact_infos' => 'setMaxContactInfos',
        'address_availability' => 'setAddressAvailability',
        'mobile_availability' => 'setMobileAvailability',
        'land_line_availability' => 'setLandLineAvailability',
        'profile_image_availability' => 'setProfileImageAvailability',
        'contact_info_availability' => 'setContactInfoAvailability',
        'physically_remove' => 'setPhysicallyRemove'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'edit_profile' => 'getEditProfile',
        'manage_addresses' => 'getManageAddresses',
        'manage_addresses_privacy' => 'getManageAddressesPrivacy',
        'manage_phones' => 'getManagePhones',
        'manage_phones_privacy' => 'getManagePhonesPrivacy',
        'manage_images' => 'getManageImages',
        'manage_contact_infos' => 'getManageContactInfos',
        'can_create_address' => 'getCanCreateAddress',
        'can_create_land_line' => 'getCanCreateLandLine',
        'can_create_mobile' => 'getCanCreateMobile',
        'can_create_image' => 'getCanCreateImage',
        'can_create_contact_info' => 'getCanCreateContactInfo',
        'max_addresses' => 'getMaxAddresses',
        'max_mobiles' => 'getMaxMobiles',
        'max_land_lines' => 'getMaxLandLines',
        'max_images' => 'getMaxImages',
        'max_contact_infos' => 'getMaxContactInfos',
        'address_availability' => 'getAddressAvailability',
        'mobile_availability' => 'getMobileAvailability',
        'land_line_availability' => 'getLandLineAvailability',
        'profile_image_availability' => 'getProfileImageAvailability',
        'contact_info_availability' => 'getContactInfoAvailability',
        'physically_remove' => 'getPhysicallyRemove'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('edit_profile', $data ?? [], null);
        $this->setIfExists('manage_addresses', $data ?? [], null);
        $this->setIfExists('manage_addresses_privacy', $data ?? [], null);
        $this->setIfExists('manage_phones', $data ?? [], null);
        $this->setIfExists('manage_phones_privacy', $data ?? [], null);
        $this->setIfExists('manage_images', $data ?? [], null);
        $this->setIfExists('manage_contact_infos', $data ?? [], null);
        $this->setIfExists('can_create_address', $data ?? [], null);
        $this->setIfExists('can_create_land_line', $data ?? [], null);
        $this->setIfExists('can_create_mobile', $data ?? [], null);
        $this->setIfExists('can_create_image', $data ?? [], null);
        $this->setIfExists('can_create_contact_info', $data ?? [], null);
        $this->setIfExists('max_addresses', $data ?? [], null);
        $this->setIfExists('max_mobiles', $data ?? [], null);
        $this->setIfExists('max_land_lines', $data ?? [], null);
        $this->setIfExists('max_images', $data ?? [], null);
        $this->setIfExists('max_contact_infos', $data ?? [], null);
        $this->setIfExists('address_availability', $data ?? [], null);
        $this->setIfExists('mobile_availability', $data ?? [], null);
        $this->setIfExists('land_line_availability', $data ?? [], null);
        $this->setIfExists('profile_image_availability', $data ?? [], null);
        $this->setIfExists('contact_info_availability', $data ?? [], null);
        $this->setIfExists('physically_remove', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets edit_profile
     *
     * @return bool|null
     */
    public function getEditProfile()
    {
        return $this->container['edit_profile'];
    }

    /**
     * Sets edit_profile
     *
     * @param bool|null $edit_profile Can edit the user profile?
     *
     * @return self
     */
    public function setEditProfile($edit_profile)
    {
        if (is_null($edit_profile)) {
            throw new \InvalidArgumentException('non-nullable edit_profile cannot be null');
        }
        $this->container['edit_profile'] = $edit_profile;

        return $this;
    }

    /**
     * Gets manage_addresses
     *
     * @return bool|null
     */
    public function getManageAddresses()
    {
        return $this->container['manage_addresses'];
    }

    /**
     * Sets manage_addresses
     *
     * @param bool|null $manage_addresses Can manage addresses?
     *
     * @return self
     */
    public function setManageAddresses($manage_addresses)
    {
        if (is_null($manage_addresses)) {
            throw new \InvalidArgumentException('non-nullable manage_addresses cannot be null');
        }
        $this->container['manage_addresses'] = $manage_addresses;

        return $this;
    }

    /**
     * Gets manage_addresses_privacy
     *
     * @return bool|null
     */
    public function getManageAddressesPrivacy()
    {
        return $this->container['manage_addresses_privacy'];
    }

    /**
     * Sets manage_addresses_privacy
     *
     * @param bool|null $manage_addresses_privacy Can manage the addresses privacy?
     *
     * @return self
     */
    public function setManageAddressesPrivacy($manage_addresses_privacy)
    {
        if (is_null($manage_addresses_privacy)) {
            throw new \InvalidArgumentException('non-nullable manage_addresses_privacy cannot be null');
        }
        $this->container['manage_addresses_privacy'] = $manage_addresses_privacy;

        return $this;
    }

    /**
     * Gets manage_phones
     *
     * @return bool|null
     */
    public function getManagePhones()
    {
        return $this->container['manage_phones'];
    }

    /**
     * Sets manage_phones
     *
     * @param bool|null $manage_phones Can manage phones?
     *
     * @return self
     */
    public function setManagePhones($manage_phones)
    {
        if (is_null($manage_phones)) {
            throw new \InvalidArgumentException('non-nullable manage_phones cannot be null');
        }
        $this->container['manage_phones'] = $manage_phones;

        return $this;
    }

    /**
     * Gets manage_phones_privacy
     *
     * @return bool|null
     */
    public function getManagePhonesPrivacy()
    {
        return $this->container['manage_phones_privacy'];
    }

    /**
     * Sets manage_phones_privacy
     *
     * @param bool|null $manage_phones_privacy Can manage the phones privacy?
     *
     * @return self
     */
    public function setManagePhonesPrivacy($manage_phones_privacy)
    {
        if (is_null($manage_phones_privacy)) {
            throw new \InvalidArgumentException('non-nullable manage_phones_privacy cannot be null');
        }
        $this->container['manage_phones_privacy'] = $manage_phones_privacy;

        return $this;
    }

    /**
     * Gets manage_images
     *
     * @return bool|null
     */
    public function getManageImages()
    {
        return $this->container['manage_images'];
    }

    /**
     * Sets manage_images
     *
     * @param bool|null $manage_images Can manage profile images?
     *
     * @return self
     */
    public function setManageImages($manage_images)
    {
        if (is_null($manage_images)) {
            throw new \InvalidArgumentException('non-nullable manage_images cannot be null');
        }
        $this->container['manage_images'] = $manage_images;

        return $this;
    }

    /**
     * Gets manage_contact_infos
     *
     * @return bool|null
     */
    public function getManageContactInfos()
    {
        return $this->container['manage_contact_infos'];
    }

    /**
     * Sets manage_contact_infos
     *
     * @param bool|null $manage_contact_infos Can manage public contact informations?
     *
     * @return self
     */
    public function setManageContactInfos($manage_contact_infos)
    {
        if (is_null($manage_contact_infos)) {
            throw new \InvalidArgumentException('non-nullable manage_contact_infos cannot be null');
        }
        $this->container['manage_contact_infos'] = $manage_contact_infos;

        return $this;
    }

    /**
     * Gets can_create_address
     *
     * @return bool|null
     */
    public function getCanCreateAddress()
    {
        return $this->container['can_create_address'];
    }

    /**
     * Sets can_create_address
     *
     * @param bool|null $can_create_address Will be true if the authenticated user can manage addresses and the user for which we are viewing its profile has not reached the maximum allowed addresses. Only if `manageAddresses` is true.
     *
     * @return self
     */
    public function setCanCreateAddress($can_create_address)
    {
        if (is_null($can_create_address)) {
            throw new \InvalidArgumentException('non-nullable can_create_address cannot be null');
        }
        $this->container['can_create_address'] = $can_create_address;

        return $this;
    }

    /**
     * Gets can_create_land_line
     *
     * @return bool|null
     */
    public function getCanCreateLandLine()
    {
        return $this->container['can_create_land_line'];
    }

    /**
     * Sets can_create_land_line
     *
     * @param bool|null $can_create_land_line Will be true if the authenticated user can manage phones and the user for whom we are viewing its profile has not reached the maximum allowed landline phones. Only if `managePhones` is true.
     *
     * @return self
     */
    public function setCanCreateLandLine($can_create_land_line)
    {
        if (is_null($can_create_land_line)) {
            throw new \InvalidArgumentException('non-nullable can_create_land_line cannot be null');
        }
        $this->container['can_create_land_line'] = $can_create_land_line;

        return $this;
    }

    /**
     * Gets can_create_mobile
     *
     * @return bool|null
     */
    public function getCanCreateMobile()
    {
        return $this->container['can_create_mobile'];
    }

    /**
     * Sets can_create_mobile
     *
     * @param bool|null $can_create_mobile Will be true if the authenticated user can manage phones and the user for whom we are viewing its profile has not reached the maximum allowed mobile phones. Only if `managePhones` is true.
     *
     * @return self
     */
    public function setCanCreateMobile($can_create_mobile)
    {
        if (is_null($can_create_mobile)) {
            throw new \InvalidArgumentException('non-nullable can_create_mobile cannot be null');
        }
        $this->container['can_create_mobile'] = $can_create_mobile;

        return $this;
    }

    /**
     * Gets can_create_image
     *
     * @return bool|null
     */
    public function getCanCreateImage()
    {
        return $this->container['can_create_image'];
    }

    /**
     * Sets can_create_image
     *
     * @param bool|null $can_create_image Will be true if the authenticated user can manage images and the user for whom we are viewing its profile has not reached the maximum allowed profile images. Only if `manageImages` is true.
     *
     * @return self
     */
    public function setCanCreateImage($can_create_image)
    {
        if (is_null($can_create_image)) {
            throw new \InvalidArgumentException('non-nullable can_create_image cannot be null');
        }
        $this->container['can_create_image'] = $can_create_image;

        return $this;
    }

    /**
     * Gets can_create_contact_info
     *
     * @return bool|null
     */
    public function getCanCreateContactInfo()
    {
        return $this->container['can_create_contact_info'];
    }

    /**
     * Sets can_create_contact_info
     *
     * @param bool|null $can_create_contact_info Will be true if the authenticated user can manage public contact informations and the user for whom we are viewing its profile has not reached the maximum allowed public contact informations. Only if `manageContactInfos` is true.
     *
     * @return self
     */
    public function setCanCreateContactInfo($can_create_contact_info)
    {
        if (is_null($can_create_contact_info)) {
            throw new \InvalidArgumentException('non-nullable can_create_contact_info cannot be null');
        }
        $this->container['can_create_contact_info'] = $can_create_contact_info;

        return $this;
    }

    /**
     * Gets max_addresses
     *
     * @return int|null
     */
    public function getMaxAddresses()
    {
        return $this->container['max_addresses'];
    }

    /**
     * Sets max_addresses
     *
     * @param int|null $max_addresses The maximum number of addresses the user can own. Only if `manageAddresses` is true
     *
     * @return self
     */
    public function setMaxAddresses($max_addresses)
    {
        if (is_null($max_addresses)) {
            throw new \InvalidArgumentException('non-nullable max_addresses cannot be null');
        }
        $this->container['max_addresses'] = $max_addresses;

        return $this;
    }

    /**
     * Gets max_mobiles
     *
     * @return int|null
     */
    public function getMaxMobiles()
    {
        return $this->container['max_mobiles'];
    }

    /**
     * Sets max_mobiles
     *
     * @param int|null $max_mobiles The maximum number of mobile phones the user can own. Only if `managePhones` is true.
     *
     * @return self
     */
    public function setMaxMobiles($max_mobiles)
    {
        if (is_null($max_mobiles)) {
            throw new \InvalidArgumentException('non-nullable max_mobiles cannot be null');
        }
        $this->container['max_mobiles'] = $max_mobiles;

        return $this;
    }

    /**
     * Gets max_land_lines
     *
     * @return int|null
     */
    public function getMaxLandLines()
    {
        return $this->container['max_land_lines'];
    }

    /**
     * Sets max_land_lines
     *
     * @param int|null $max_land_lines The maximum number of land-line phones the user can own. Only if `managePhones` is true.
     *
     * @return self
     */
    public function setMaxLandLines($max_land_lines)
    {
        if (is_null($max_land_lines)) {
            throw new \InvalidArgumentException('non-nullable max_land_lines cannot be null');
        }
        $this->container['max_land_lines'] = $max_land_lines;

        return $this;
    }

    /**
     * Gets max_images
     *
     * @return int|null
     */
    public function getMaxImages()
    {
        return $this->container['max_images'];
    }

    /**
     * Sets max_images
     *
     * @param int|null $max_images The maximum number of profile images  the user can own. Only if `manageImages` is true.
     *
     * @return self
     */
    public function setMaxImages($max_images)
    {
        if (is_null($max_images)) {
            throw new \InvalidArgumentException('non-nullable max_images cannot be null');
        }
        $this->container['max_images'] = $max_images;

        return $this;
    }

    /**
     * Gets max_contact_infos
     *
     * @return int|null
     */
    public function getMaxContactInfos()
    {
        return $this->container['max_contact_infos'];
    }

    /**
     * Sets max_contact_infos
     *
     * @param int|null $max_contact_infos The maximum number of public contacts the user can own.  Only if `manageContactInfos` is true.
     *
     * @return self
     */
    public function setMaxContactInfos($max_contact_infos)
    {
        if (is_null($max_contact_infos)) {
            throw new \InvalidArgumentException('non-nullable max_contact_infos cannot be null');
        }
        $this->container['max_contact_infos'] = $max_contact_infos;

        return $this;
    }

    /**
     * Gets address_availability
     *
     * @return \OpenAPI\Client\Model\AvailabilityEnum|null
     */
    public function getAddressAvailability()
    {
        return $this->container['address_availability'];
    }

    /**
     * Sets address_availability
     *
     * @param \OpenAPI\Client\Model\AvailabilityEnum|null $address_availability address_availability
     *
     * @return self
     */
    public function setAddressAvailability($address_availability)
    {
        if (is_null($address_availability)) {
            throw new \InvalidArgumentException('non-nullable address_availability cannot be null');
        }
        $this->container['address_availability'] = $address_availability;

        return $this;
    }

    /**
     * Gets mobile_availability
     *
     * @return \OpenAPI\Client\Model\AvailabilityEnum|null
     */
    public function getMobileAvailability()
    {
        return $this->container['mobile_availability'];
    }

    /**
     * Sets mobile_availability
     *
     * @param \OpenAPI\Client\Model\AvailabilityEnum|null $mobile_availability mobile_availability
     *
     * @return self
     */
    public function setMobileAvailability($mobile_availability)
    {
        if (is_null($mobile_availability)) {
            throw new \InvalidArgumentException('non-nullable mobile_availability cannot be null');
        }
        $this->container['mobile_availability'] = $mobile_availability;

        return $this;
    }

    /**
     * Gets land_line_availability
     *
     * @return \OpenAPI\Client\Model\AvailabilityEnum|null
     */
    public function getLandLineAvailability()
    {
        return $this->container['land_line_availability'];
    }

    /**
     * Sets land_line_availability
     *
     * @param \OpenAPI\Client\Model\AvailabilityEnum|null $land_line_availability land_line_availability
     *
     * @return self
     */
    public function setLandLineAvailability($land_line_availability)
    {
        if (is_null($land_line_availability)) {
            throw new \InvalidArgumentException('non-nullable land_line_availability cannot be null');
        }
        $this->container['land_line_availability'] = $land_line_availability;

        return $this;
    }

    /**
     * Gets profile_image_availability
     *
     * @return \OpenAPI\Client\Model\AvailabilityEnum|null
     */
    public function getProfileImageAvailability()
    {
        return $this->container['profile_image_availability'];
    }

    /**
     * Sets profile_image_availability
     *
     * @param \OpenAPI\Client\Model\AvailabilityEnum|null $profile_image_availability profile_image_availability
     *
     * @return self
     */
    public function setProfileImageAvailability($profile_image_availability)
    {
        if (is_null($profile_image_availability)) {
            throw new \InvalidArgumentException('non-nullable profile_image_availability cannot be null');
        }
        $this->container['profile_image_availability'] = $profile_image_availability;

        return $this;
    }

    /**
     * Gets contact_info_availability
     *
     * @return \OpenAPI\Client\Model\AvailabilityEnum|null
     */
    public function getContactInfoAvailability()
    {
        return $this->container['contact_info_availability'];
    }

    /**
     * Sets contact_info_availability
     *
     * @param \OpenAPI\Client\Model\AvailabilityEnum|null $contact_info_availability contact_info_availability
     *
     * @return self
     */
    public function setContactInfoAvailability($contact_info_availability)
    {
        if (is_null($contact_info_availability)) {
            throw new \InvalidArgumentException('non-nullable contact_info_availability cannot be null');
        }
        $this->container['contact_info_availability'] = $contact_info_availability;

        return $this;
    }

    /**
     * Gets physically_remove
     *
     * @return bool|null
     */
    public function getPhysicallyRemove()
    {
        return $this->container['physically_remove'];
    }

    /**
     * Sets physically_remove
     *
     * @param bool|null $physically_remove Indicates whether this user is in status `pending` and can be removed.
     *
     * @return self
     */
    public function setPhysicallyRemove($physically_remove)
    {
        if (is_null($physically_remove)) {
            throw new \InvalidArgumentException('non-nullable physically_remove cannot be null');
        }
        $this->container['physically_remove'] = $physically_remove;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


