<?php
/**
 * TransactionTypeData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * TransactionTypeData Class Doc Comment
 *
 * @category Class
 * @description Contains definitions regarding a given payment type when performing a transaction (payment or payment request).
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class TransactionTypeData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'TransactionTypeData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'internal_name' => 'string',
        'currency' => '\OpenAPI\Client\Model\Currency',
        'fixed_amount' => 'float',
        'allows_recurring_payments' => 'bool',
        'max_installments' => 'int',
        'default_expiration_date' => '\DateTime',
        'hide_expiration_date' => 'bool',
        'custom_fields' => '\OpenAPI\Client\Model\CustomFieldDetailed[]',
        'a_rate' => 'float',
        'd_rate' => 'float',
        'd_rate_creation_value' => 'float',
        'limited_awaiting_authorization' => 'bool',
        'no_negatives_maturity_policy' => 'bool',
        'max_amount_by_maturity_policy' => 'float',
        'maturity_table_winner_id' => 'string',
        'description_availability' => '\OpenAPI\Client\Model\AvailabilityEnum',
        'maturity_policy' => '\OpenAPI\Client\Model\TransactionTypeDataAllOfMaturityPolicy'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'internal_name' => null,
        'currency' => null,
        'fixed_amount' => 'number',
        'allows_recurring_payments' => null,
        'max_installments' => null,
        'default_expiration_date' => 'date-time',
        'hide_expiration_date' => null,
        'custom_fields' => null,
        'a_rate' => 'number',
        'd_rate' => 'number',
        'd_rate_creation_value' => 'number',
        'limited_awaiting_authorization' => null,
        'no_negatives_maturity_policy' => null,
        'max_amount_by_maturity_policy' => 'number',
        'maturity_table_winner_id' => null,
        'description_availability' => null,
        'maturity_policy' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'internal_name' => false,
        'currency' => false,
        'fixed_amount' => false,
        'allows_recurring_payments' => false,
        'max_installments' => false,
        'default_expiration_date' => false,
        'hide_expiration_date' => false,
        'custom_fields' => false,
        'a_rate' => false,
        'd_rate' => false,
        'd_rate_creation_value' => false,
        'limited_awaiting_authorization' => false,
        'no_negatives_maturity_policy' => false,
        'max_amount_by_maturity_policy' => false,
        'maturity_table_winner_id' => false,
        'description_availability' => false,
        'maturity_policy' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'internal_name' => 'internalName',
        'currency' => 'currency',
        'fixed_amount' => 'fixedAmount',
        'allows_recurring_payments' => 'allowsRecurringPayments',
        'max_installments' => 'maxInstallments',
        'default_expiration_date' => 'defaultExpirationDate',
        'hide_expiration_date' => 'hideExpirationDate',
        'custom_fields' => 'customFields',
        'a_rate' => 'ARate',
        'd_rate' => 'DRate',
        'd_rate_creation_value' => 'DRateCreationValue',
        'limited_awaiting_authorization' => 'limitedAwaitingAuthorization',
        'no_negatives_maturity_policy' => 'noNegativesMaturityPolicy',
        'max_amount_by_maturity_policy' => 'maxAmountByMaturityPolicy',
        'maturity_table_winner_id' => 'maturityTableWinnerId',
        'description_availability' => 'descriptionAvailability',
        'maturity_policy' => 'maturityPolicy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'internal_name' => 'setInternalName',
        'currency' => 'setCurrency',
        'fixed_amount' => 'setFixedAmount',
        'allows_recurring_payments' => 'setAllowsRecurringPayments',
        'max_installments' => 'setMaxInstallments',
        'default_expiration_date' => 'setDefaultExpirationDate',
        'hide_expiration_date' => 'setHideExpirationDate',
        'custom_fields' => 'setCustomFields',
        'a_rate' => 'setARate',
        'd_rate' => 'setDRate',
        'd_rate_creation_value' => 'setDRateCreationValue',
        'limited_awaiting_authorization' => 'setLimitedAwaitingAuthorization',
        'no_negatives_maturity_policy' => 'setNoNegativesMaturityPolicy',
        'max_amount_by_maturity_policy' => 'setMaxAmountByMaturityPolicy',
        'maturity_table_winner_id' => 'setMaturityTableWinnerId',
        'description_availability' => 'setDescriptionAvailability',
        'maturity_policy' => 'setMaturityPolicy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'internal_name' => 'getInternalName',
        'currency' => 'getCurrency',
        'fixed_amount' => 'getFixedAmount',
        'allows_recurring_payments' => 'getAllowsRecurringPayments',
        'max_installments' => 'getMaxInstallments',
        'default_expiration_date' => 'getDefaultExpirationDate',
        'hide_expiration_date' => 'getHideExpirationDate',
        'custom_fields' => 'getCustomFields',
        'a_rate' => 'getARate',
        'd_rate' => 'getDRate',
        'd_rate_creation_value' => 'getDRateCreationValue',
        'limited_awaiting_authorization' => 'getLimitedAwaitingAuthorization',
        'no_negatives_maturity_policy' => 'getNoNegativesMaturityPolicy',
        'max_amount_by_maturity_policy' => 'getMaxAmountByMaturityPolicy',
        'maturity_table_winner_id' => 'getMaturityTableWinnerId',
        'description_availability' => 'getDescriptionAvailability',
        'maturity_policy' => 'getMaturityPolicy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('internal_name', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('fixed_amount', $data ?? [], null);
        $this->setIfExists('allows_recurring_payments', $data ?? [], null);
        $this->setIfExists('max_installments', $data ?? [], null);
        $this->setIfExists('default_expiration_date', $data ?? [], null);
        $this->setIfExists('hide_expiration_date', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('a_rate', $data ?? [], null);
        $this->setIfExists('d_rate', $data ?? [], null);
        $this->setIfExists('d_rate_creation_value', $data ?? [], null);
        $this->setIfExists('limited_awaiting_authorization', $data ?? [], null);
        $this->setIfExists('no_negatives_maturity_policy', $data ?? [], null);
        $this->setIfExists('max_amount_by_maturity_policy', $data ?? [], null);
        $this->setIfExists('maturity_table_winner_id', $data ?? [], null);
        $this->setIfExists('description_availability', $data ?? [], null);
        $this->setIfExists('maturity_policy', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The internal entity identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The entity name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets internal_name
     *
     * @return string|null
     */
    public function getInternalName()
    {
        return $this->container['internal_name'];
    }

    /**
     * Sets internal_name
     *
     * @param string|null $internal_name The entity internal name, which can be seen as an extra identifier
     *
     * @return self
     */
    public function setInternalName($internal_name)
    {
        if (is_null($internal_name)) {
            throw new \InvalidArgumentException('non-nullable internal_name cannot be null');
        }
        $this->container['internal_name'] = $internal_name;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\Currency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\Currency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets fixed_amount
     *
     * @return float|null
     */
    public function getFixedAmount()
    {
        return $this->container['fixed_amount'];
    }

    /**
     * Sets fixed_amount
     *
     * @param float|null $fixed_amount The only allowed amount if the payment type uses a fixed amount
     *
     * @return self
     */
    public function setFixedAmount($fixed_amount)
    {
        if (is_null($fixed_amount)) {
            throw new \InvalidArgumentException('non-nullable fixed_amount cannot be null');
        }
        $this->container['fixed_amount'] = $fixed_amount;

        return $this;
    }

    /**
     * Gets allows_recurring_payments
     *
     * @return bool|null
     */
    public function getAllowsRecurringPayments()
    {
        return $this->container['allows_recurring_payments'];
    }

    /**
     * Sets allows_recurring_payments
     *
     * @param bool|null $allows_recurring_payments Can payments of this type be made recurring?
     *
     * @return self
     */
    public function setAllowsRecurringPayments($allows_recurring_payments)
    {
        if (is_null($allows_recurring_payments)) {
            throw new \InvalidArgumentException('non-nullable allows_recurring_payments cannot be null');
        }
        $this->container['allows_recurring_payments'] = $allows_recurring_payments;

        return $this;
    }

    /**
     * Gets max_installments
     *
     * @return int|null
     */
    public function getMaxInstallments()
    {
        return $this->container['max_installments'];
    }

    /**
     * Sets max_installments
     *
     * @param int|null $max_installments The maximum allowed installments. If it is zero, no kind of scheduled payments is allowed. If it is 1, a single future date can be used.
     *
     * @return self
     */
    public function setMaxInstallments($max_installments)
    {
        if (is_null($max_installments)) {
            throw new \InvalidArgumentException('non-nullable max_installments cannot be null');
        }
        $this->container['max_installments'] = $max_installments;

        return $this;
    }

    /**
     * Gets default_expiration_date
     *
     * @return \DateTime|null
     */
    public function getDefaultExpirationDate()
    {
        return $this->container['default_expiration_date'];
    }

    /**
     * Sets default_expiration_date
     *
     * @param \DateTime|null $default_expiration_date The default expiration date, according to the configuration. Only for payment requests.
     *
     * @return self
     */
    public function setDefaultExpirationDate($default_expiration_date)
    {
        if (is_null($default_expiration_date)) {
            throw new \InvalidArgumentException('non-nullable default_expiration_date cannot be null');
        }
        $this->container['default_expiration_date'] = $default_expiration_date;

        return $this;
    }

    /**
     * Gets hide_expiration_date
     *
     * @return bool|null
     */
    public function getHideExpirationDate()
    {
        return $this->container['hide_expiration_date'];
    }

    /**
     * Sets hide_expiration_date
     *
     * @param bool|null $hide_expiration_date Whether the expiration date should be hidden from users, Only for payment requests.
     *
     * @return self
     */
    public function setHideExpirationDate($hide_expiration_date)
    {
        if (is_null($hide_expiration_date)) {
            throw new \InvalidArgumentException('non-nullable hide_expiration_date cannot be null');
        }
        $this->container['hide_expiration_date'] = $hide_expiration_date;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \OpenAPI\Client\Model\CustomFieldDetailed[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \OpenAPI\Client\Model\CustomFieldDetailed[]|null $custom_fields The custom fields related to this payment type
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets a_rate
     *
     * @return float|null
     */
    public function getARate()
    {
        return $this->container['a_rate'];
    }

    /**
     * Sets a_rate
     *
     * @param float|null $a_rate The balance aging counter used for this payment. Only for payments.
     *
     * @return self
     */
    public function setARate($a_rate)
    {
        if (is_null($a_rate)) {
            throw new \InvalidArgumentException('non-nullable a_rate cannot be null');
        }
        $this->container['a_rate'] = $a_rate;

        return $this;
    }

    /**
     * Gets d_rate
     *
     * @return float|null
     */
    public function getDRate()
    {
        return $this->container['d_rate'];
    }

    /**
     * Sets d_rate
     *
     * @param float|null $d_rate The balance maturity used for this payment. Only for payments.
     *
     * @return self
     */
    public function setDRate($d_rate)
    {
        if (is_null($d_rate)) {
            throw new \InvalidArgumentException('non-nullable d_rate cannot be null');
        }
        $this->container['d_rate'] = $d_rate;

        return $this;
    }

    /**
     * Gets d_rate_creation_value
     *
     * @return float|null
     */
    public function getDRateCreationValue()
    {
        return $this->container['d_rate_creation_value'];
    }

    /**
     * Sets d_rate_creation_value
     *
     * @param float|null $d_rate_creation_value The initial value for the balance maturity on this payment type. Only for payments.
     *
     * @return self
     */
    public function setDRateCreationValue($d_rate_creation_value)
    {
        if (is_null($d_rate_creation_value)) {
            throw new \InvalidArgumentException('non-nullable d_rate_creation_value cannot be null');
        }
        $this->container['d_rate_creation_value'] = $d_rate_creation_value;

        return $this;
    }

    /**
     * Gets limited_awaiting_authorization
     *
     * @return bool|null
     */
    public function getLimitedAwaitingAuthorization()
    {
        return $this->container['limited_awaiting_authorization'];
    }

    /**
     * Sets limited_awaiting_authorization
     *
     * @param bool|null $limited_awaiting_authorization Only for payments.
     *
     * @return self
     */
    public function setLimitedAwaitingAuthorization($limited_awaiting_authorization)
    {
        if (is_null($limited_awaiting_authorization)) {
            throw new \InvalidArgumentException('non-nullable limited_awaiting_authorization cannot be null');
        }
        $this->container['limited_awaiting_authorization'] = $limited_awaiting_authorization;

        return $this;
    }

    /**
     * Gets no_negatives_maturity_policy
     *
     * @return bool|null
     */
    public function getNoNegativesMaturityPolicy()
    {
        return $this->container['no_negatives_maturity_policy'];
    }

    /**
     * Sets no_negatives_maturity_policy
     *
     * @param bool|null $no_negatives_maturity_policy Only for payments.
     *
     * @return self
     */
    public function setNoNegativesMaturityPolicy($no_negatives_maturity_policy)
    {
        if (is_null($no_negatives_maturity_policy)) {
            throw new \InvalidArgumentException('non-nullable no_negatives_maturity_policy cannot be null');
        }
        $this->container['no_negatives_maturity_policy'] = $no_negatives_maturity_policy;

        return $this;
    }

    /**
     * Gets max_amount_by_maturity_policy
     *
     * @return float|null
     */
    public function getMaxAmountByMaturityPolicy()
    {
        return $this->container['max_amount_by_maturity_policy'];
    }

    /**
     * Sets max_amount_by_maturity_policy
     *
     * @param float|null $max_amount_by_maturity_policy The maximum amount that can be performed when `maturityPolicy` is `history`. It corresponds to the maturity table entry indicated by `maturityTableWinnerId`. Only for payments.
     *
     * @return self
     */
    public function setMaxAmountByMaturityPolicy($max_amount_by_maturity_policy)
    {
        if (is_null($max_amount_by_maturity_policy)) {
            throw new \InvalidArgumentException('non-nullable max_amount_by_maturity_policy cannot be null');
        }
        $this->container['max_amount_by_maturity_policy'] = $max_amount_by_maturity_policy;

        return $this;
    }

    /**
     * Gets maturity_table_winner_id
     *
     * @return string|null
     */
    public function getMaturityTableWinnerId()
    {
        return $this->container['maturity_table_winner_id'];
    }

    /**
     * Sets maturity_table_winner_id
     *
     * @param string|null $maturity_table_winner_id When `maturityPolicy` is `history`, contains the id of the maturity table entry that granted. Only for payments.
     *
     * @return self
     */
    public function setMaturityTableWinnerId($maturity_table_winner_id)
    {
        if (is_null($maturity_table_winner_id)) {
            throw new \InvalidArgumentException('non-nullable maturity_table_winner_id cannot be null');
        }
        $this->container['maturity_table_winner_id'] = $maturity_table_winner_id;

        return $this;
    }

    /**
     * Gets description_availability
     *
     * @return \OpenAPI\Client\Model\AvailabilityEnum|null
     */
    public function getDescriptionAvailability()
    {
        return $this->container['description_availability'];
    }

    /**
     * Sets description_availability
     *
     * @param \OpenAPI\Client\Model\AvailabilityEnum|null $description_availability description_availability
     *
     * @return self
     */
    public function setDescriptionAvailability($description_availability)
    {
        if (is_null($description_availability)) {
            throw new \InvalidArgumentException('non-nullable description_availability cannot be null');
        }
        $this->container['description_availability'] = $description_availability;

        return $this;
    }

    /**
     * Gets maturity_policy
     *
     * @return \OpenAPI\Client\Model\TransactionTypeDataAllOfMaturityPolicy|null
     */
    public function getMaturityPolicy()
    {
        return $this->container['maturity_policy'];
    }

    /**
     * Sets maturity_policy
     *
     * @param \OpenAPI\Client\Model\TransactionTypeDataAllOfMaturityPolicy|null $maturity_policy maturity_policy
     *
     * @return self
     */
    public function setMaturityPolicy($maturity_policy)
    {
        if (is_null($maturity_policy)) {
            throw new \InvalidArgumentException('non-nullable maturity_policy cannot be null');
        }
        $this->container['maturity_policy'] = $maturity_policy;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


