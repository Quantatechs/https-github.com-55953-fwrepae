<?php
/**
 * AccountActivityStatus
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AccountActivityStatus Class Doc Comment
 *
 * @category Class
 * @description Contains transactions activity information like received, paid and total
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class AccountActivityStatus implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AccountActivityStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'balance' => 'float',
        'credit_limit' => 'float',
        'upper_credit_limit' => 'float',
        'reserved_amount' => 'float',
        'available_balance' => 'float',
        'negative_since' => '\DateTime',
        'a_rate' => 'float',
        'd_rate' => 'float',
        'rate_balance_correction' => 'float',
        'virtual_rated_balance' => 'float',
        'transactions_in_period' => 'int',
        'transactions_all_time' => 'int',
        'received_in_period' => 'float',
        'received_all_time' => 'float',
        'paid_in_period' => 'float',
        'paid_all_time' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'balance' => 'number',
        'credit_limit' => 'number',
        'upper_credit_limit' => 'number',
        'reserved_amount' => 'number',
        'available_balance' => 'number',
        'negative_since' => 'date-time',
        'a_rate' => 'number',
        'd_rate' => 'number',
        'rate_balance_correction' => 'number',
        'virtual_rated_balance' => 'number',
        'transactions_in_period' => null,
        'transactions_all_time' => null,
        'received_in_period' => 'number',
        'received_all_time' => 'number',
        'paid_in_period' => 'number',
        'paid_all_time' => 'number'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'balance' => false,
        'credit_limit' => false,
        'upper_credit_limit' => false,
        'reserved_amount' => false,
        'available_balance' => false,
        'negative_since' => false,
        'a_rate' => false,
        'd_rate' => false,
        'rate_balance_correction' => false,
        'virtual_rated_balance' => false,
        'transactions_in_period' => false,
        'transactions_all_time' => false,
        'received_in_period' => false,
        'received_all_time' => false,
        'paid_in_period' => false,
        'paid_all_time' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'balance' => 'balance',
        'credit_limit' => 'creditLimit',
        'upper_credit_limit' => 'upperCreditLimit',
        'reserved_amount' => 'reservedAmount',
        'available_balance' => 'availableBalance',
        'negative_since' => 'negativeSince',
        'a_rate' => 'aRate',
        'd_rate' => 'dRate',
        'rate_balance_correction' => 'rateBalanceCorrection',
        'virtual_rated_balance' => 'virtualRatedBalance',
        'transactions_in_period' => 'transactionsInPeriod',
        'transactions_all_time' => 'transactionsAllTime',
        'received_in_period' => 'receivedInPeriod',
        'received_all_time' => 'receivedAllTime',
        'paid_in_period' => 'paidInPeriod',
        'paid_all_time' => 'paidAllTime'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'balance' => 'setBalance',
        'credit_limit' => 'setCreditLimit',
        'upper_credit_limit' => 'setUpperCreditLimit',
        'reserved_amount' => 'setReservedAmount',
        'available_balance' => 'setAvailableBalance',
        'negative_since' => 'setNegativeSince',
        'a_rate' => 'setARate',
        'd_rate' => 'setDRate',
        'rate_balance_correction' => 'setRateBalanceCorrection',
        'virtual_rated_balance' => 'setVirtualRatedBalance',
        'transactions_in_period' => 'setTransactionsInPeriod',
        'transactions_all_time' => 'setTransactionsAllTime',
        'received_in_period' => 'setReceivedInPeriod',
        'received_all_time' => 'setReceivedAllTime',
        'paid_in_period' => 'setPaidInPeriod',
        'paid_all_time' => 'setPaidAllTime'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'balance' => 'getBalance',
        'credit_limit' => 'getCreditLimit',
        'upper_credit_limit' => 'getUpperCreditLimit',
        'reserved_amount' => 'getReservedAmount',
        'available_balance' => 'getAvailableBalance',
        'negative_since' => 'getNegativeSince',
        'a_rate' => 'getARate',
        'd_rate' => 'getDRate',
        'rate_balance_correction' => 'getRateBalanceCorrection',
        'virtual_rated_balance' => 'getVirtualRatedBalance',
        'transactions_in_period' => 'getTransactionsInPeriod',
        'transactions_all_time' => 'getTransactionsAllTime',
        'received_in_period' => 'getReceivedInPeriod',
        'received_all_time' => 'getReceivedAllTime',
        'paid_in_period' => 'getPaidInPeriod',
        'paid_all_time' => 'getPaidAllTime'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('balance', $data ?? [], null);
        $this->setIfExists('credit_limit', $data ?? [], null);
        $this->setIfExists('upper_credit_limit', $data ?? [], null);
        $this->setIfExists('reserved_amount', $data ?? [], null);
        $this->setIfExists('available_balance', $data ?? [], null);
        $this->setIfExists('negative_since', $data ?? [], null);
        $this->setIfExists('a_rate', $data ?? [], null);
        $this->setIfExists('d_rate', $data ?? [], null);
        $this->setIfExists('rate_balance_correction', $data ?? [], null);
        $this->setIfExists('virtual_rated_balance', $data ?? [], null);
        $this->setIfExists('transactions_in_period', $data ?? [], null);
        $this->setIfExists('transactions_all_time', $data ?? [], null);
        $this->setIfExists('received_in_period', $data ?? [], null);
        $this->setIfExists('received_all_time', $data ?? [], null);
        $this->setIfExists('paid_in_period', $data ?? [], null);
        $this->setIfExists('paid_all_time', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets balance
     *
     * @return float|null
     */
    public function getBalance()
    {
        return $this->container['balance'];
    }

    /**
     * Sets balance
     *
     * @param float|null $balance The raw account balance
     *
     * @return self
     */
    public function setBalance($balance)
    {
        if (is_null($balance)) {
            throw new \InvalidArgumentException('non-nullable balance cannot be null');
        }
        $this->container['balance'] = $balance;

        return $this;
    }

    /**
     * Gets credit_limit
     *
     * @return float|null
     */
    public function getCreditLimit()
    {
        return $this->container['credit_limit'];
    }

    /**
     * Sets credit_limit
     *
     * @param float|null $credit_limit The maximum negative balance an account may get
     *
     * @return self
     */
    public function setCreditLimit($credit_limit)
    {
        if (is_null($credit_limit)) {
            throw new \InvalidArgumentException('non-nullable credit_limit cannot be null');
        }
        $this->container['credit_limit'] = $credit_limit;

        return $this;
    }

    /**
     * Gets upper_credit_limit
     *
     * @return float|null
     */
    public function getUpperCreditLimit()
    {
        return $this->container['upper_credit_limit'];
    }

    /**
     * Sets upper_credit_limit
     *
     * @param float|null $upper_credit_limit The maximum positive balance an account may get
     *
     * @return self
     */
    public function setUpperCreditLimit($upper_credit_limit)
    {
        if (is_null($upper_credit_limit)) {
            throw new \InvalidArgumentException('non-nullable upper_credit_limit cannot be null');
        }
        $this->container['upper_credit_limit'] = $upper_credit_limit;

        return $this;
    }

    /**
     * Gets reserved_amount
     *
     * @return float|null
     */
    public function getReservedAmount()
    {
        return $this->container['reserved_amount'];
    }

    /**
     * Sets reserved_amount
     *
     * @param float|null $reserved_amount The reserved amount is part of the raw balance, but cannot be used for payments because of some other events, like payments pending authorization, confirmed webshop orders, scheduled payments (when configured to reserve the total amount) and so on.
     *
     * @return self
     */
    public function setReservedAmount($reserved_amount)
    {
        if (is_null($reserved_amount)) {
            throw new \InvalidArgumentException('non-nullable reserved_amount cannot be null');
        }
        $this->container['reserved_amount'] = $reserved_amount;

        return $this;
    }

    /**
     * Gets available_balance
     *
     * @return float|null
     */
    public function getAvailableBalance()
    {
        return $this->container['available_balance'];
    }

    /**
     * Sets available_balance
     *
     * @param float|null $available_balance The available balance to be used, taking into account the raw balance, credit limit and reserved amount
     *
     * @return self
     */
    public function setAvailableBalance($available_balance)
    {
        if (is_null($available_balance)) {
            throw new \InvalidArgumentException('non-nullable available_balance cannot be null');
        }
        $this->container['available_balance'] = $available_balance;

        return $this;
    }

    /**
     * Gets negative_since
     *
     * @return \DateTime|null
     */
    public function getNegativeSince()
    {
        return $this->container['negative_since'];
    }

    /**
     * Sets negative_since
     *
     * @param \DateTime|null $negative_since If the account is negative, contains the date since it became so
     *
     * @return self
     */
    public function setNegativeSince($negative_since)
    {
        if (is_null($negative_since)) {
            throw new \InvalidArgumentException('non-nullable negative_since cannot be null');
        }
        $this->container['negative_since'] = $negative_since;

        return $this;
    }

    /**
     * Gets a_rate
     *
     * @return float|null
     */
    public function getARate()
    {
        return $this->container['a_rate'];
    }

    /**
     * Sets a_rate
     *
     * @param float|null $a_rate The balance aging counter
     *
     * @return self
     */
    public function setARate($a_rate)
    {
        if (is_null($a_rate)) {
            throw new \InvalidArgumentException('non-nullable a_rate cannot be null');
        }
        $this->container['a_rate'] = $a_rate;

        return $this;
    }

    /**
     * Gets d_rate
     *
     * @return float|null
     */
    public function getDRate()
    {
        return $this->container['d_rate'];
    }

    /**
     * Sets d_rate
     *
     * @param float|null $d_rate The balance maturity
     *
     * @return self
     */
    public function setDRate($d_rate)
    {
        if (is_null($d_rate)) {
            throw new \InvalidArgumentException('non-nullable d_rate cannot be null');
        }
        $this->container['d_rate'] = $d_rate;

        return $this;
    }

    /**
     * Gets rate_balance_correction
     *
     * @return float|null
     */
    public function getRateBalanceCorrection()
    {
        return $this->container['rate_balance_correction'];
    }

    /**
     * Sets rate_balance_correction
     *
     * @param float|null $rate_balance_correction rate_balance_correction
     *
     * @return self
     */
    public function setRateBalanceCorrection($rate_balance_correction)
    {
        if (is_null($rate_balance_correction)) {
            throw new \InvalidArgumentException('non-nullable rate_balance_correction cannot be null');
        }
        $this->container['rate_balance_correction'] = $rate_balance_correction;

        return $this;
    }

    /**
     * Gets virtual_rated_balance
     *
     * @return float|null
     */
    public function getVirtualRatedBalance()
    {
        return $this->container['virtual_rated_balance'];
    }

    /**
     * Sets virtual_rated_balance
     *
     * @param float|null $virtual_rated_balance virtual_rated_balance
     *
     * @return self
     */
    public function setVirtualRatedBalance($virtual_rated_balance)
    {
        if (is_null($virtual_rated_balance)) {
            throw new \InvalidArgumentException('non-nullable virtual_rated_balance cannot be null');
        }
        $this->container['virtual_rated_balance'] = $virtual_rated_balance;

        return $this;
    }

    /**
     * Gets transactions_in_period
     *
     * @return int|null
     */
    public function getTransactionsInPeriod()
    {
        return $this->container['transactions_in_period'];
    }

    /**
     * Sets transactions_in_period
     *
     * @param int|null $transactions_in_period Indicates the transactions activity in the last 30 days
     *
     * @return self
     */
    public function setTransactionsInPeriod($transactions_in_period)
    {
        if (is_null($transactions_in_period)) {
            throw new \InvalidArgumentException('non-nullable transactions_in_period cannot be null');
        }
        $this->container['transactions_in_period'] = $transactions_in_period;

        return $this;
    }

    /**
     * Gets transactions_all_time
     *
     * @return int|null
     */
    public function getTransactionsAllTime()
    {
        return $this->container['transactions_all_time'];
    }

    /**
     * Sets transactions_all_time
     *
     * @param int|null $transactions_all_time Indicates the transactions activity all time
     *
     * @return self
     */
    public function setTransactionsAllTime($transactions_all_time)
    {
        if (is_null($transactions_all_time)) {
            throw new \InvalidArgumentException('non-nullable transactions_all_time cannot be null');
        }
        $this->container['transactions_all_time'] = $transactions_all_time;

        return $this;
    }

    /**
     * Gets received_in_period
     *
     * @return float|null
     */
    public function getReceivedInPeriod()
    {
        return $this->container['received_in_period'];
    }

    /**
     * Sets received_in_period
     *
     * @param float|null $received_in_period Indicates the total received in last the last 30 days
     *
     * @return self
     */
    public function setReceivedInPeriod($received_in_period)
    {
        if (is_null($received_in_period)) {
            throw new \InvalidArgumentException('non-nullable received_in_period cannot be null');
        }
        $this->container['received_in_period'] = $received_in_period;

        return $this;
    }

    /**
     * Gets received_all_time
     *
     * @return float|null
     */
    public function getReceivedAllTime()
    {
        return $this->container['received_all_time'];
    }

    /**
     * Sets received_all_time
     *
     * @param float|null $received_all_time Indicates the total received all time
     *
     * @return self
     */
    public function setReceivedAllTime($received_all_time)
    {
        if (is_null($received_all_time)) {
            throw new \InvalidArgumentException('non-nullable received_all_time cannot be null');
        }
        $this->container['received_all_time'] = $received_all_time;

        return $this;
    }

    /**
     * Gets paid_in_period
     *
     * @return float|null
     */
    public function getPaidInPeriod()
    {
        return $this->container['paid_in_period'];
    }

    /**
     * Sets paid_in_period
     *
     * @param float|null $paid_in_period Indicates the total paid in last the last 30 days
     *
     * @return self
     */
    public function setPaidInPeriod($paid_in_period)
    {
        if (is_null($paid_in_period)) {
            throw new \InvalidArgumentException('non-nullable paid_in_period cannot be null');
        }
        $this->container['paid_in_period'] = $paid_in_period;

        return $this;
    }

    /**
     * Gets paid_all_time
     *
     * @return float|null
     */
    public function getPaidAllTime()
    {
        return $this->container['paid_all_time'];
    }

    /**
     * Sets paid_all_time
     *
     * @param float|null $paid_all_time Indicates the total paid all time
     *
     * @return self
     */
    public function setPaidAllTime($paid_all_time)
    {
        if (is_null($paid_all_time)) {
            throw new \InvalidArgumentException('non-nullable paid_all_time cannot be null');
        }
        $this->container['paid_all_time'] = $paid_all_time;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


