<?php
/**
 * DataForFrontend
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DataForFrontend Class Doc Comment
 *
 * @category Class
 * @description Contains data used by the new frontend
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DataForFrontend implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataForFrontend';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'frontend' => '\OpenAPI\Client\Model\FrontendEnum',
        'has_home_page' => 'bool',
        'has_help' => 'bool',
        'logo_url' => 'string',
        'icons' => '\OpenAPI\Client\Model\FrontendIcon[]',
        'svg_icon_names' => 'string[]',
        'map_marker_url' => 'string',
        'alt_map_marker_url' => 'string',
        'external_login_url' => 'string',
        'after_logout_url' => 'string',
        'locales' => 'string[]',
        'title' => 'string',
        'mobile_title' => 'string',
        'mobile_menu_title' => 'string',
        'menu_bar' => 'bool',
        'mobile_landing_page' => '\OpenAPI\Client\Model\FrontendLandingPageEnum',
        'data_for_ui' => '\OpenAPI\Client\Model\DataForUi',
        'pages' => '\OpenAPI\Client\Model\FrontendPage[]',
        'banners' => '\OpenAPI\Client\Model\FrontendBanner[]',
        'allow_frontend_switching' => 'bool',
        'voucher_buying_menu' => '\OpenAPI\Client\Model\UserMenuEnum',
        'top_up_enabled' => 'bool',
        'can_manage_quick_access' => 'bool',
        'development' => 'bool',
        'footer' => 'string',
        'theme' => '\OpenAPI\Client\Model\FrontendTheme'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'frontend' => null,
        'has_home_page' => null,
        'has_help' => null,
        'logo_url' => null,
        'icons' => null,
        'svg_icon_names' => null,
        'map_marker_url' => null,
        'alt_map_marker_url' => null,
        'external_login_url' => null,
        'after_logout_url' => null,
        'locales' => null,
        'title' => null,
        'mobile_title' => null,
        'mobile_menu_title' => null,
        'menu_bar' => null,
        'mobile_landing_page' => null,
        'data_for_ui' => null,
        'pages' => null,
        'banners' => null,
        'allow_frontend_switching' => null,
        'voucher_buying_menu' => null,
        'top_up_enabled' => null,
        'can_manage_quick_access' => null,
        'development' => null,
        'footer' => null,
        'theme' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'frontend' => false,
        'has_home_page' => false,
        'has_help' => false,
        'logo_url' => false,
        'icons' => false,
        'svg_icon_names' => false,
        'map_marker_url' => false,
        'alt_map_marker_url' => false,
        'external_login_url' => false,
        'after_logout_url' => false,
        'locales' => false,
        'title' => false,
        'mobile_title' => false,
        'mobile_menu_title' => false,
        'menu_bar' => false,
        'mobile_landing_page' => false,
        'data_for_ui' => false,
        'pages' => false,
        'banners' => false,
        'allow_frontend_switching' => false,
        'voucher_buying_menu' => false,
        'top_up_enabled' => false,
        'can_manage_quick_access' => false,
        'development' => false,
        'footer' => false,
        'theme' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'frontend' => 'frontend',
        'has_home_page' => 'hasHomePage',
        'has_help' => 'hasHelp',
        'logo_url' => 'logoUrl',
        'icons' => 'icons',
        'svg_icon_names' => 'svgIconNames',
        'map_marker_url' => 'mapMarkerUrl',
        'alt_map_marker_url' => 'altMapMarkerUrl',
        'external_login_url' => 'externalLoginUrl',
        'after_logout_url' => 'afterLogoutUrl',
        'locales' => 'locales',
        'title' => 'title',
        'mobile_title' => 'mobileTitle',
        'mobile_menu_title' => 'mobileMenuTitle',
        'menu_bar' => 'menuBar',
        'mobile_landing_page' => 'mobileLandingPage',
        'data_for_ui' => 'dataForUi',
        'pages' => 'pages',
        'banners' => 'banners',
        'allow_frontend_switching' => 'allowFrontendSwitching',
        'voucher_buying_menu' => 'voucherBuyingMenu',
        'top_up_enabled' => 'topUpEnabled',
        'can_manage_quick_access' => 'canManageQuickAccess',
        'development' => 'development',
        'footer' => 'footer',
        'theme' => 'theme'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'frontend' => 'setFrontend',
        'has_home_page' => 'setHasHomePage',
        'has_help' => 'setHasHelp',
        'logo_url' => 'setLogoUrl',
        'icons' => 'setIcons',
        'svg_icon_names' => 'setSvgIconNames',
        'map_marker_url' => 'setMapMarkerUrl',
        'alt_map_marker_url' => 'setAltMapMarkerUrl',
        'external_login_url' => 'setExternalLoginUrl',
        'after_logout_url' => 'setAfterLogoutUrl',
        'locales' => 'setLocales',
        'title' => 'setTitle',
        'mobile_title' => 'setMobileTitle',
        'mobile_menu_title' => 'setMobileMenuTitle',
        'menu_bar' => 'setMenuBar',
        'mobile_landing_page' => 'setMobileLandingPage',
        'data_for_ui' => 'setDataForUi',
        'pages' => 'setPages',
        'banners' => 'setBanners',
        'allow_frontend_switching' => 'setAllowFrontendSwitching',
        'voucher_buying_menu' => 'setVoucherBuyingMenu',
        'top_up_enabled' => 'setTopUpEnabled',
        'can_manage_quick_access' => 'setCanManageQuickAccess',
        'development' => 'setDevelopment',
        'footer' => 'setFooter',
        'theme' => 'setTheme'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'frontend' => 'getFrontend',
        'has_home_page' => 'getHasHomePage',
        'has_help' => 'getHasHelp',
        'logo_url' => 'getLogoUrl',
        'icons' => 'getIcons',
        'svg_icon_names' => 'getSvgIconNames',
        'map_marker_url' => 'getMapMarkerUrl',
        'alt_map_marker_url' => 'getAltMapMarkerUrl',
        'external_login_url' => 'getExternalLoginUrl',
        'after_logout_url' => 'getAfterLogoutUrl',
        'locales' => 'getLocales',
        'title' => 'getTitle',
        'mobile_title' => 'getMobileTitle',
        'mobile_menu_title' => 'getMobileMenuTitle',
        'menu_bar' => 'getMenuBar',
        'mobile_landing_page' => 'getMobileLandingPage',
        'data_for_ui' => 'getDataForUi',
        'pages' => 'getPages',
        'banners' => 'getBanners',
        'allow_frontend_switching' => 'getAllowFrontendSwitching',
        'voucher_buying_menu' => 'getVoucherBuyingMenu',
        'top_up_enabled' => 'getTopUpEnabled',
        'can_manage_quick_access' => 'getCanManageQuickAccess',
        'development' => 'getDevelopment',
        'footer' => 'getFooter',
        'theme' => 'getTheme'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('frontend', $data ?? [], null);
        $this->setIfExists('has_home_page', $data ?? [], null);
        $this->setIfExists('has_help', $data ?? [], null);
        $this->setIfExists('logo_url', $data ?? [], null);
        $this->setIfExists('icons', $data ?? [], null);
        $this->setIfExists('svg_icon_names', $data ?? [], null);
        $this->setIfExists('map_marker_url', $data ?? [], null);
        $this->setIfExists('alt_map_marker_url', $data ?? [], null);
        $this->setIfExists('external_login_url', $data ?? [], null);
        $this->setIfExists('after_logout_url', $data ?? [], null);
        $this->setIfExists('locales', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('mobile_title', $data ?? [], null);
        $this->setIfExists('mobile_menu_title', $data ?? [], null);
        $this->setIfExists('menu_bar', $data ?? [], null);
        $this->setIfExists('mobile_landing_page', $data ?? [], null);
        $this->setIfExists('data_for_ui', $data ?? [], null);
        $this->setIfExists('pages', $data ?? [], null);
        $this->setIfExists('banners', $data ?? [], null);
        $this->setIfExists('allow_frontend_switching', $data ?? [], null);
        $this->setIfExists('voucher_buying_menu', $data ?? [], null);
        $this->setIfExists('top_up_enabled', $data ?? [], null);
        $this->setIfExists('can_manage_quick_access', $data ?? [], null);
        $this->setIfExists('development', $data ?? [], null);
        $this->setIfExists('footer', $data ?? [], null);
        $this->setIfExists('theme', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets frontend
     *
     * @return \OpenAPI\Client\Model\FrontendEnum|null
     */
    public function getFrontend()
    {
        return $this->container['frontend'];
    }

    /**
     * Sets frontend
     *
     * @param \OpenAPI\Client\Model\FrontendEnum|null $frontend frontend
     *
     * @return self
     */
    public function setFrontend($frontend)
    {
        if (is_null($frontend)) {
            throw new \InvalidArgumentException('non-nullable frontend cannot be null');
        }
        $this->container['frontend'] = $frontend;

        return $this;
    }

    /**
     * Gets has_home_page
     *
     * @return bool|null
     */
    public function getHasHomePage()
    {
        return $this->container['has_home_page'];
    }

    /**
     * Sets has_home_page
     *
     * @param bool|null $has_home_page Is the guest home page used?
     *
     * @return self
     */
    public function setHasHomePage($has_home_page)
    {
        if (is_null($has_home_page)) {
            throw new \InvalidArgumentException('non-nullable has_home_page cannot be null');
        }
        $this->container['has_home_page'] = $has_home_page;

        return $this;
    }

    /**
     * Gets has_help
     *
     * @return bool|null
     */
    public function getHasHelp()
    {
        return $this->container['has_help'];
    }

    /**
     * Sets has_help
     *
     * @param bool|null $has_help Is a help page used?
     *
     * @return self
     */
    public function setHasHelp($has_help)
    {
        if (is_null($has_help)) {
            throw new \InvalidArgumentException('non-nullable has_help cannot be null');
        }
        $this->container['has_help'] = $has_help;

        return $this;
    }

    /**
     * Gets logo_url
     *
     * @return string|null
     */
    public function getLogoUrl()
    {
        return $this->container['logo_url'];
    }

    /**
     * Sets logo_url
     *
     * @param string|null $logo_url The application logo image URL
     *
     * @return self
     */
    public function setLogoUrl($logo_url)
    {
        if (is_null($logo_url)) {
            throw new \InvalidArgumentException('non-nullable logo_url cannot be null');
        }
        $this->container['logo_url'] = $logo_url;

        return $this;
    }

    /**
     * Gets icons
     *
     * @return \OpenAPI\Client\Model\FrontendIcon[]|null
     */
    public function getIcons()
    {
        return $this->container['icons'];
    }

    /**
     * Sets icons
     *
     * @param \OpenAPI\Client\Model\FrontendIcon[]|null $icons The icons to use as page shortcut icon
     *
     * @return self
     */
    public function setIcons($icons)
    {
        if (is_null($icons)) {
            throw new \InvalidArgumentException('non-nullable icons cannot be null');
        }
        $this->container['icons'] = $icons;

        return $this;
    }

    /**
     * Gets svg_icon_names
     *
     * @return string[]|null
     */
    public function getSvgIconNames()
    {
        return $this->container['svg_icon_names'];
    }

    /**
     * Sets svg_icon_names
     *
     * @param string[]|null $svg_icon_names The names of SVF icons used by entities, such as pages, records, advertisement categories, operations and wizards.
     *
     * @return self
     */
    public function setSvgIconNames($svg_icon_names)
    {
        if (is_null($svg_icon_names)) {
            throw new \InvalidArgumentException('non-nullable svg_icon_names cannot be null');
        }
        $this->container['svg_icon_names'] = $svg_icon_names;

        return $this;
    }

    /**
     * Gets map_marker_url
     *
     * @return string|null
     */
    public function getMapMarkerUrl()
    {
        return $this->container['map_marker_url'];
    }

    /**
     * Sets map_marker_url
     *
     * @param string|null $map_marker_url The maps pin icon URL
     *
     * @return self
     */
    public function setMapMarkerUrl($map_marker_url)
    {
        if (is_null($map_marker_url)) {
            throw new \InvalidArgumentException('non-nullable map_marker_url cannot be null');
        }
        $this->container['map_marker_url'] = $map_marker_url;

        return $this;
    }

    /**
     * Gets alt_map_marker_url
     *
     * @return string|null
     */
    public function getAltMapMarkerUrl()
    {
        return $this->container['alt_map_marker_url'];
    }

    /**
     * Sets alt_map_marker_url
     *
     * @param string|null $alt_map_marker_url The alternative maps pin icon URL
     *
     * @return self
     */
    public function setAltMapMarkerUrl($alt_map_marker_url)
    {
        if (is_null($alt_map_marker_url)) {
            throw new \InvalidArgumentException('non-nullable alt_map_marker_url cannot be null');
        }
        $this->container['alt_map_marker_url'] = $alt_map_marker_url;

        return $this;
    }

    /**
     * Gets external_login_url
     *
     * @return string|null
     */
    public function getExternalLoginUrl()
    {
        return $this->container['external_login_url'];
    }

    /**
     * Sets external_login_url
     *
     * @param string|null $external_login_url The URL to redirect users for logging in
     *
     * @return self
     */
    public function setExternalLoginUrl($external_login_url)
    {
        if (is_null($external_login_url)) {
            throw new \InvalidArgumentException('non-nullable external_login_url cannot be null');
        }
        $this->container['external_login_url'] = $external_login_url;

        return $this;
    }

    /**
     * Gets after_logout_url
     *
     * @return string|null
     */
    public function getAfterLogoutUrl()
    {
        return $this->container['after_logout_url'];
    }

    /**
     * Sets after_logout_url
     *
     * @param string|null $after_logout_url The URL to redirect users after logging out
     *
     * @return self
     */
    public function setAfterLogoutUrl($after_logout_url)
    {
        if (is_null($after_logout_url)) {
            throw new \InvalidArgumentException('non-nullable after_logout_url cannot be null');
        }
        $this->container['after_logout_url'] = $after_logout_url;

        return $this;
    }

    /**
     * Gets locales
     *
     * @return string[]|null
     */
    public function getLocales()
    {
        return $this->container['locales'];
    }

    /**
     * Sets locales
     *
     * @param string[]|null $locales Contains the available translation locales
     *
     * @return self
     */
    public function setLocales($locales)
    {
        if (is_null($locales)) {
            throw new \InvalidArgumentException('non-nullable locales cannot be null');
        }
        $this->container['locales'] = $locales;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title for tablets and desktops
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets mobile_title
     *
     * @return string|null
     */
    public function getMobileTitle()
    {
        return $this->container['mobile_title'];
    }

    /**
     * Sets mobile_title
     *
     * @param string|null $mobile_title The title for mobiles
     *
     * @return self
     */
    public function setMobileTitle($mobile_title)
    {
        if (is_null($mobile_title)) {
            throw new \InvalidArgumentException('non-nullable mobile_title cannot be null');
        }
        $this->container['mobile_title'] = $mobile_title;

        return $this;
    }

    /**
     * Gets mobile_menu_title
     *
     * @return string|null
     */
    public function getMobileMenuTitle()
    {
        return $this->container['mobile_menu_title'];
    }

    /**
     * Sets mobile_menu_title
     *
     * @param string|null $mobile_menu_title The title for the sidenav menu in mobiles / tablets
     *
     * @return self
     */
    public function setMobileMenuTitle($mobile_menu_title)
    {
        if (is_null($mobile_menu_title)) {
            throw new \InvalidArgumentException('non-nullable mobile_menu_title cannot be null');
        }
        $this->container['mobile_menu_title'] = $mobile_menu_title;

        return $this;
    }

    /**
     * Gets menu_bar
     *
     * @return bool|null
     */
    public function getMenuBar()
    {
        return $this->container['menu_bar'];
    }

    /**
     * Sets menu_bar
     *
     * @param bool|null $menu_bar Should the desktop show a separated menu bar?
     *
     * @return self
     */
    public function setMenuBar($menu_bar)
    {
        if (is_null($menu_bar)) {
            throw new \InvalidArgumentException('non-nullable menu_bar cannot be null');
        }
        $this->container['menu_bar'] = $menu_bar;

        return $this;
    }

    /**
     * Gets mobile_landing_page
     *
     * @return \OpenAPI\Client\Model\FrontendLandingPageEnum|null
     */
    public function getMobileLandingPage()
    {
        return $this->container['mobile_landing_page'];
    }

    /**
     * Sets mobile_landing_page
     *
     * @param \OpenAPI\Client\Model\FrontendLandingPageEnum|null $mobile_landing_page mobile_landing_page
     *
     * @return self
     */
    public function setMobileLandingPage($mobile_landing_page)
    {
        if (is_null($mobile_landing_page)) {
            throw new \InvalidArgumentException('non-nullable mobile_landing_page cannot be null');
        }
        $this->container['mobile_landing_page'] = $mobile_landing_page;

        return $this;
    }

    /**
     * Gets data_for_ui
     *
     * @return \OpenAPI\Client\Model\DataForUi|null
     */
    public function getDataForUi()
    {
        return $this->container['data_for_ui'];
    }

    /**
     * Sets data_for_ui
     *
     * @param \OpenAPI\Client\Model\DataForUi|null $data_for_ui data_for_ui
     *
     * @return self
     */
    public function setDataForUi($data_for_ui)
    {
        if (is_null($data_for_ui)) {
            throw new \InvalidArgumentException('non-nullable data_for_ui cannot be null');
        }
        $this->container['data_for_ui'] = $data_for_ui;

        return $this;
    }

    /**
     * Gets pages
     *
     * @return \OpenAPI\Client\Model\FrontendPage[]|null
     */
    public function getPages()
    {
        return $this->container['pages'];
    }

    /**
     * Sets pages
     *
     * @param \OpenAPI\Client\Model\FrontendPage[]|null $pages The content pages to show
     *
     * @return self
     */
    public function setPages($pages)
    {
        if (is_null($pages)) {
            throw new \InvalidArgumentException('non-nullable pages cannot be null');
        }
        $this->container['pages'] = $pages;

        return $this;
    }

    /**
     * Gets banners
     *
     * @return \OpenAPI\Client\Model\FrontendBanner[]|null
     */
    public function getBanners()
    {
        return $this->container['banners'];
    }

    /**
     * Sets banners
     *
     * @param \OpenAPI\Client\Model\FrontendBanner[]|null $banners The banners to show
     *
     * @return self
     */
    public function setBanners($banners)
    {
        if (is_null($banners)) {
            throw new \InvalidArgumentException('non-nullable banners cannot be null');
        }
        $this->container['banners'] = $banners;

        return $this;
    }

    /**
     * Gets allow_frontend_switching
     *
     * @return bool|null
     */
    public function getAllowFrontendSwitching()
    {
        return $this->container['allow_frontend_switching'];
    }

    /**
     * Sets allow_frontend_switching
     *
     * @param bool|null $allow_frontend_switching Is the logged user allowed to switch between frontends?
     *
     * @return self
     */
    public function setAllowFrontendSwitching($allow_frontend_switching)
    {
        if (is_null($allow_frontend_switching)) {
            throw new \InvalidArgumentException('non-nullable allow_frontend_switching cannot be null');
        }
        $this->container['allow_frontend_switching'] = $allow_frontend_switching;

        return $this;
    }

    /**
     * Gets voucher_buying_menu
     *
     * @return \OpenAPI\Client\Model\UserMenuEnum|null
     */
    public function getVoucherBuyingMenu()
    {
        return $this->container['voucher_buying_menu'];
    }

    /**
     * Sets voucher_buying_menu
     *
     * @param \OpenAPI\Client\Model\UserMenuEnum|null $voucher_buying_menu voucher_buying_menu
     *
     * @return self
     */
    public function setVoucherBuyingMenu($voucher_buying_menu)
    {
        if (is_null($voucher_buying_menu)) {
            throw new \InvalidArgumentException('non-nullable voucher_buying_menu cannot be null');
        }
        $this->container['voucher_buying_menu'] = $voucher_buying_menu;

        return $this;
    }

    /**
     * Gets top_up_enabled
     *
     * @return bool|null
     */
    public function getTopUpEnabled()
    {
        return $this->container['top_up_enabled'];
    }

    /**
     * Sets top_up_enabled
     *
     * @param bool|null $top_up_enabled Indicates whether there is a voucher configuration supporting top-up which is visible for the authenticated user, this means the top-up feature was configured in the system.
     *
     * @return self
     */
    public function setTopUpEnabled($top_up_enabled)
    {
        if (is_null($top_up_enabled)) {
            throw new \InvalidArgumentException('non-nullable top_up_enabled cannot be null');
        }
        $this->container['top_up_enabled'] = $top_up_enabled;

        return $this;
    }

    /**
     * Gets can_manage_quick_access
     *
     * @return bool|null
     */
    public function getCanManageQuickAccess()
    {
        return $this->container['can_manage_quick_access'];
    }

    /**
     * Sets can_manage_quick_access
     *
     * @param bool|null $can_manage_quick_access Can the logged user manage their quick access items?
     *
     * @return self
     */
    public function setCanManageQuickAccess($can_manage_quick_access)
    {
        if (is_null($can_manage_quick_access)) {
            throw new \InvalidArgumentException('non-nullable can_manage_quick_access cannot be null');
        }
        $this->container['can_manage_quick_access'] = $can_manage_quick_access;

        return $this;
    }

    /**
     * Gets development
     *
     * @return bool|null
     */
    public function getDevelopment()
    {
        return $this->container['development'];
    }

    /**
     * Sets development
     *
     * @param bool|null $development Is Cyclos running in development mode?
     *
     * @return self
     */
    public function setDevelopment($development)
    {
        if (is_null($development)) {
            throw new \InvalidArgumentException('non-nullable development cannot be null');
        }
        $this->container['development'] = $development;

        return $this;
    }

    /**
     * Gets footer
     *
     * @return string|null
     */
    public function getFooter()
    {
        return $this->container['footer'];
    }

    /**
     * Sets footer
     *
     * @param string|null $footer The content of the footer, if any
     *
     * @return self
     */
    public function setFooter($footer)
    {
        if (is_null($footer)) {
            throw new \InvalidArgumentException('non-nullable footer cannot be null');
        }
        $this->container['footer'] = $footer;

        return $this;
    }

    /**
     * Gets theme
     *
     * @return \OpenAPI\Client\Model\FrontendTheme|null
     */
    public function getTheme()
    {
        return $this->container['theme'];
    }

    /**
     * Sets theme
     *
     * @param \OpenAPI\Client\Model\FrontendTheme|null $theme theme
     *
     * @return self
     */
    public function setTheme($theme)
    {
        if (is_null($theme)) {
            throw new \InvalidArgumentException('non-nullable theme cannot be null');
        }
        $this->container['theme'] = $theme;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


