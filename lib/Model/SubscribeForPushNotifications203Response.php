<?php
/**
 * SubscribeForPushNotifications203Response
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SubscribeForPushNotifications203Response Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class SubscribeForPushNotifications203Response implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'subscribeForPushNotifications_203_response';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'new_notifications' => 'int',
        'unread_notifications' => 'int',
        'last_view_date' => '\DateTime',
        'notification' => '\OpenAPI\Client\Model\Notification',
        'message' => '\OpenAPI\Client\Model\IncomingMessage',
        'new_messages' => 'int',
        'unread_messages' => 'int',
        'id' => 'string',
        'display' => 'string',
        'transaction_number' => 'string',
        'date' => '\DateTime',
        'amount' => 'float',
        'from' => '\OpenAPI\Client\Model\TransAllOfFrom',
        'to' => '\OpenAPI\Client\Model\TransAllOfTo',
        'type' => '\OpenAPI\Client\Model\DeviceConfirmationViewAllOfType',
        'currency' => '\OpenAPI\Client\Model\TransAllOfCurrency',
        'ticket_number' => 'string',
        'from_name' => 'string',
        'to_name' => 'string',
        'description' => 'string',
        'kind' => '\OpenAPI\Client\Model\TransactionAllOfKind',
        'creation_type' => '\OpenAPI\Client\Model\TransactionAllOfCreationType',
        'authorization_status' => '\OpenAPI\Client\Model\TransactionAllOfAuthorizationStatus',
        'channel' => '\OpenAPI\Client\Model\TransactionViewAllOfChannel',
        'access_client' => '\OpenAPI\Client\Model\TransactionViewAllOfAccessClient',
        'oidc_client' => '\OpenAPI\Client\Model\TransactionViewAllOfOidcClient',
        'by' => '\OpenAPI\Client\Model\TransactionViewAllOfBy',
        'received_by' => '\OpenAPI\Client\Model\TransactionViewAllOfReceivedBy',
        'received' => 'bool',
        'custom_values' => 'array<string,string>',
        'confirmation_password_input' => '\OpenAPI\Client\Model\TransactionViewAllOfConfirmationPasswordInput',
        'authorization_level_data' => '\OpenAPI\Client\Model\TransactionViewAllOfAuthorizationLevelData',
        'authorization_permissions' => '\OpenAPI\Client\Model\TransactionViewAllOfAuthorizationPermissions',
        'authorizations' => '\OpenAPI\Client\Model\TransactionAuthorization[]',
        'transfer' => '\OpenAPI\Client\Model\TransactionViewAllOfTransfer',
        'scheduled_payment_permissions' => '\OpenAPI\Client\Model\TransactionViewAllOfScheduledPaymentPermissions',
        'due_amount' => 'float',
        'installments' => '\OpenAPI\Client\Model\InstallmentView[]',
        'recurring_payment_permissions' => '\OpenAPI\Client\Model\TransactionViewAllOfRecurringPaymentPermissions',
        'next_occurrence_date' => '\DateTime',
        'occurrence_interval' => '\OpenAPI\Client\Model\TransactionViewAllOfOccurrenceInterval',
        'occurrences_count' => 'int',
        'occurrences' => '\OpenAPI\Client\Model\InstallmentView[]',
        'payment_request_permissions' => '\OpenAPI\Client\Model\TransactionViewAllOfPaymentRequestPermissions',
        'comments' => 'string',
        'expiration_date' => '\DateTime',
        'change_expiration_date_comments' => 'string',
        'process_date' => '\DateTime',
        'transaction' => '\OpenAPI\Client\Model\TransactionViewAllOfTransaction',
        'sms_code' => 'string',
        'scheduling' => '\OpenAPI\Client\Model\TransactionViewAllOfScheduling',
        'installments_count' => 'int',
        'first_installment_is_immediate' => 'bool',
        'first_occurrence_is_immediate' => 'bool',
        'external_payment_permissions' => '\OpenAPI\Client\Model\TransactionViewAllOfExternalPaymentPermissions',
        'to_principal_type' => '\OpenAPI\Client\Model\TransactionViewAllOfToPrincipalType',
        'to_principal_value' => 'string',
        'payee' => '\OpenAPI\Client\Model\TransactionViewAllOfPayee',
        'payer_principal' => 'string',
        'payer' => '\OpenAPI\Client\Model\TransactionViewAllOfPayer',
        'approve_url' => 'string',
        'cancel_url' => 'string',
        'success_url' => 'string',
        'preview' => '\OpenAPI\Client\Model\TransactionViewAllOfPreview',
        'bought_vouchers' => '\OpenAPI\Client\Model\Voucher[]',
        'voucher_transaction' => '\OpenAPI\Client\Model\TransactionViewAllOfVoucherTransaction',
        'users_which_can_add_to_contacts' => '\OpenAPI\Client\Model\TransactionSubjectsEnum',
        'users_which_can_view_profile' => '\OpenAPI\Client\Model\TransactionSubjectsEnum',
        'authorization_type' => '\OpenAPI\Client\Model\TransactionAuthorizationTypeEnum',
        'scheduled_payment_status' => '\OpenAPI\Client\Model\ScheduledPaymentStatusEnum',
        'recurring_payment_status' => '\OpenAPI\Client\Model\RecurringPaymentStatusEnum',
        'payment_request_status' => '\OpenAPI\Client\Model\PaymentRequestStatusEnum',
        'external_payment_status' => '\OpenAPI\Client\Model\ExternalPaymentStatusEnum',
        'ticket_status' => '\OpenAPI\Client\Model\TicketStatusEnum',
        'export_formats' => '\OpenAPI\Client\Model\ExportFormat[]',
        'feedback' => '\OpenAPI\Client\Model\TransactionViewAllOfFeedback',
        'feedback_permissions' => '\OpenAPI\Client\Model\TransactionViewAllOfFeedbackPermissions',
        'fees_on_authorization' => '\OpenAPI\Client\Model\TransactionViewAllOfFeesOnAuthorization',
        'original_transfer' => '\OpenAPI\Client\Model\TransactionViewAllOfOriginalTransfer',
        'chargeback_transfer' => '\OpenAPI\Client\Model\TransactionViewAllOfChargebackTransfer',
        'qr_content' => 'string',
        'status' => '\OpenAPI\Client\Model\IdentityProviderCallbackStatusEnum',
        'device_confirmation' => '\OpenAPI\Client\Model\DeviceConfirmationView',
        'successful' => 'bool',
        'identity_provider' => '\OpenAPI\Client\Model\IdentityProvider',
        'request_id' => 'string',
        'session_token' => 'string',
        'name' => 'string',
        'email' => 'string',
        'username' => 'string',
        'mobile_phone' => 'string',
        'land_line_phone' => 'string',
        'land_line_extension' => 'string',
        'image' => '\OpenAPI\Client\Model\Image',
        'wizard_execution_data' => '\OpenAPI\Client\Model\WizardExecutionData',
        'error_message' => 'string',
        'pin_creation_token' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'new_notifications' => null,
        'unread_notifications' => null,
        'last_view_date' => 'date-time',
        'notification' => null,
        'message' => null,
        'new_messages' => null,
        'unread_messages' => null,
        'id' => null,
        'display' => null,
        'transaction_number' => null,
        'date' => 'date-time',
        'amount' => 'number',
        'from' => null,
        'to' => null,
        'type' => null,
        'currency' => null,
        'ticket_number' => null,
        'from_name' => null,
        'to_name' => null,
        'description' => null,
        'kind' => null,
        'creation_type' => null,
        'authorization_status' => null,
        'channel' => null,
        'access_client' => null,
        'oidc_client' => null,
        'by' => null,
        'received_by' => null,
        'received' => null,
        'custom_values' => null,
        'confirmation_password_input' => null,
        'authorization_level_data' => null,
        'authorization_permissions' => null,
        'authorizations' => null,
        'transfer' => null,
        'scheduled_payment_permissions' => null,
        'due_amount' => 'number',
        'installments' => null,
        'recurring_payment_permissions' => null,
        'next_occurrence_date' => 'date-time',
        'occurrence_interval' => null,
        'occurrences_count' => null,
        'occurrences' => null,
        'payment_request_permissions' => null,
        'comments' => null,
        'expiration_date' => 'date-time',
        'change_expiration_date_comments' => null,
        'process_date' => 'date-time',
        'transaction' => null,
        'sms_code' => null,
        'scheduling' => null,
        'installments_count' => null,
        'first_installment_is_immediate' => null,
        'first_occurrence_is_immediate' => null,
        'external_payment_permissions' => null,
        'to_principal_type' => null,
        'to_principal_value' => null,
        'payee' => null,
        'payer_principal' => null,
        'payer' => null,
        'approve_url' => null,
        'cancel_url' => null,
        'success_url' => null,
        'preview' => null,
        'bought_vouchers' => null,
        'voucher_transaction' => null,
        'users_which_can_add_to_contacts' => null,
        'users_which_can_view_profile' => null,
        'authorization_type' => null,
        'scheduled_payment_status' => null,
        'recurring_payment_status' => null,
        'payment_request_status' => null,
        'external_payment_status' => null,
        'ticket_status' => null,
        'export_formats' => null,
        'feedback' => null,
        'feedback_permissions' => null,
        'fees_on_authorization' => null,
        'original_transfer' => null,
        'chargeback_transfer' => null,
        'qr_content' => null,
        'status' => null,
        'device_confirmation' => null,
        'successful' => null,
        'identity_provider' => null,
        'request_id' => null,
        'session_token' => null,
        'name' => null,
        'email' => null,
        'username' => null,
        'mobile_phone' => null,
        'land_line_phone' => null,
        'land_line_extension' => null,
        'image' => null,
        'wizard_execution_data' => null,
        'error_message' => null,
        'pin_creation_token' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'new_notifications' => false,
        'unread_notifications' => false,
        'last_view_date' => false,
        'notification' => false,
        'message' => false,
        'new_messages' => false,
        'unread_messages' => false,
        'id' => false,
        'display' => false,
        'transaction_number' => false,
        'date' => false,
        'amount' => false,
        'from' => false,
        'to' => false,
        'type' => false,
        'currency' => false,
        'ticket_number' => false,
        'from_name' => false,
        'to_name' => false,
        'description' => false,
        'kind' => false,
        'creation_type' => false,
        'authorization_status' => false,
        'channel' => false,
        'access_client' => false,
        'oidc_client' => false,
        'by' => false,
        'received_by' => false,
        'received' => false,
        'custom_values' => false,
        'confirmation_password_input' => false,
        'authorization_level_data' => false,
        'authorization_permissions' => false,
        'authorizations' => false,
        'transfer' => false,
        'scheduled_payment_permissions' => false,
        'due_amount' => false,
        'installments' => false,
        'recurring_payment_permissions' => false,
        'next_occurrence_date' => false,
        'occurrence_interval' => false,
        'occurrences_count' => false,
        'occurrences' => false,
        'payment_request_permissions' => false,
        'comments' => false,
        'expiration_date' => false,
        'change_expiration_date_comments' => false,
        'process_date' => false,
        'transaction' => false,
        'sms_code' => false,
        'scheduling' => false,
        'installments_count' => false,
        'first_installment_is_immediate' => false,
        'first_occurrence_is_immediate' => false,
        'external_payment_permissions' => false,
        'to_principal_type' => false,
        'to_principal_value' => false,
        'payee' => false,
        'payer_principal' => false,
        'payer' => false,
        'approve_url' => false,
        'cancel_url' => false,
        'success_url' => false,
        'preview' => false,
        'bought_vouchers' => false,
        'voucher_transaction' => false,
        'users_which_can_add_to_contacts' => false,
        'users_which_can_view_profile' => false,
        'authorization_type' => false,
        'scheduled_payment_status' => false,
        'recurring_payment_status' => false,
        'payment_request_status' => false,
        'external_payment_status' => false,
        'ticket_status' => false,
        'export_formats' => false,
        'feedback' => false,
        'feedback_permissions' => false,
        'fees_on_authorization' => false,
        'original_transfer' => false,
        'chargeback_transfer' => false,
        'qr_content' => false,
        'status' => false,
        'device_confirmation' => false,
        'successful' => false,
        'identity_provider' => false,
        'request_id' => false,
        'session_token' => false,
        'name' => false,
        'email' => false,
        'username' => false,
        'mobile_phone' => false,
        'land_line_phone' => false,
        'land_line_extension' => false,
        'image' => false,
        'wizard_execution_data' => false,
        'error_message' => false,
        'pin_creation_token' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'new_notifications' => 'newNotifications',
        'unread_notifications' => 'unreadNotifications',
        'last_view_date' => 'lastViewDate',
        'notification' => 'notification',
        'message' => 'message',
        'new_messages' => 'newMessages',
        'unread_messages' => 'unreadMessages',
        'id' => 'id',
        'display' => 'display',
        'transaction_number' => 'transactionNumber',
        'date' => 'date',
        'amount' => 'amount',
        'from' => 'from',
        'to' => 'to',
        'type' => 'type',
        'currency' => 'currency',
        'ticket_number' => 'ticketNumber',
        'from_name' => 'fromName',
        'to_name' => 'toName',
        'description' => 'description',
        'kind' => 'kind',
        'creation_type' => 'creationType',
        'authorization_status' => 'authorizationStatus',
        'channel' => 'channel',
        'access_client' => 'accessClient',
        'oidc_client' => 'oidcClient',
        'by' => 'by',
        'received_by' => 'receivedBy',
        'received' => 'received',
        'custom_values' => 'customValues',
        'confirmation_password_input' => 'confirmationPasswordInput',
        'authorization_level_data' => 'authorizationLevelData',
        'authorization_permissions' => 'authorizationPermissions',
        'authorizations' => 'authorizations',
        'transfer' => 'transfer',
        'scheduled_payment_permissions' => 'scheduledPaymentPermissions',
        'due_amount' => 'dueAmount',
        'installments' => 'installments',
        'recurring_payment_permissions' => 'recurringPaymentPermissions',
        'next_occurrence_date' => 'nextOccurrenceDate',
        'occurrence_interval' => 'occurrenceInterval',
        'occurrences_count' => 'occurrencesCount',
        'occurrences' => 'occurrences',
        'payment_request_permissions' => 'paymentRequestPermissions',
        'comments' => 'comments',
        'expiration_date' => 'expirationDate',
        'change_expiration_date_comments' => 'changeExpirationDateComments',
        'process_date' => 'processDate',
        'transaction' => 'transaction',
        'sms_code' => 'smsCode',
        'scheduling' => 'scheduling',
        'installments_count' => 'installmentsCount',
        'first_installment_is_immediate' => 'firstInstallmentIsImmediate',
        'first_occurrence_is_immediate' => 'firstOccurrenceIsImmediate',
        'external_payment_permissions' => 'externalPaymentPermissions',
        'to_principal_type' => 'toPrincipalType',
        'to_principal_value' => 'toPrincipalValue',
        'payee' => 'payee',
        'payer_principal' => 'payerPrincipal',
        'payer' => 'payer',
        'approve_url' => 'approveUrl',
        'cancel_url' => 'cancelUrl',
        'success_url' => 'successUrl',
        'preview' => 'preview',
        'bought_vouchers' => 'boughtVouchers',
        'voucher_transaction' => 'voucherTransaction',
        'users_which_can_add_to_contacts' => 'usersWhichCanAddToContacts',
        'users_which_can_view_profile' => 'usersWhichCanViewProfile',
        'authorization_type' => 'authorizationType',
        'scheduled_payment_status' => 'scheduledPaymentStatus',
        'recurring_payment_status' => 'recurringPaymentStatus',
        'payment_request_status' => 'paymentRequestStatus',
        'external_payment_status' => 'externalPaymentStatus',
        'ticket_status' => 'ticketStatus',
        'export_formats' => 'exportFormats',
        'feedback' => 'feedback',
        'feedback_permissions' => 'feedbackPermissions',
        'fees_on_authorization' => 'feesOnAuthorization',
        'original_transfer' => 'originalTransfer',
        'chargeback_transfer' => 'chargebackTransfer',
        'qr_content' => 'qrContent',
        'status' => 'status',
        'device_confirmation' => 'deviceConfirmation',
        'successful' => 'successful',
        'identity_provider' => 'identityProvider',
        'request_id' => 'requestId',
        'session_token' => 'sessionToken',
        'name' => 'name',
        'email' => 'email',
        'username' => 'username',
        'mobile_phone' => 'mobilePhone',
        'land_line_phone' => 'landLinePhone',
        'land_line_extension' => 'landLineExtension',
        'image' => 'image',
        'wizard_execution_data' => 'wizardExecutionData',
        'error_message' => 'errorMessage',
        'pin_creation_token' => 'pinCreationToken'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'new_notifications' => 'setNewNotifications',
        'unread_notifications' => 'setUnreadNotifications',
        'last_view_date' => 'setLastViewDate',
        'notification' => 'setNotification',
        'message' => 'setMessage',
        'new_messages' => 'setNewMessages',
        'unread_messages' => 'setUnreadMessages',
        'id' => 'setId',
        'display' => 'setDisplay',
        'transaction_number' => 'setTransactionNumber',
        'date' => 'setDate',
        'amount' => 'setAmount',
        'from' => 'setFrom',
        'to' => 'setTo',
        'type' => 'setType',
        'currency' => 'setCurrency',
        'ticket_number' => 'setTicketNumber',
        'from_name' => 'setFromName',
        'to_name' => 'setToName',
        'description' => 'setDescription',
        'kind' => 'setKind',
        'creation_type' => 'setCreationType',
        'authorization_status' => 'setAuthorizationStatus',
        'channel' => 'setChannel',
        'access_client' => 'setAccessClient',
        'oidc_client' => 'setOidcClient',
        'by' => 'setBy',
        'received_by' => 'setReceivedBy',
        'received' => 'setReceived',
        'custom_values' => 'setCustomValues',
        'confirmation_password_input' => 'setConfirmationPasswordInput',
        'authorization_level_data' => 'setAuthorizationLevelData',
        'authorization_permissions' => 'setAuthorizationPermissions',
        'authorizations' => 'setAuthorizations',
        'transfer' => 'setTransfer',
        'scheduled_payment_permissions' => 'setScheduledPaymentPermissions',
        'due_amount' => 'setDueAmount',
        'installments' => 'setInstallments',
        'recurring_payment_permissions' => 'setRecurringPaymentPermissions',
        'next_occurrence_date' => 'setNextOccurrenceDate',
        'occurrence_interval' => 'setOccurrenceInterval',
        'occurrences_count' => 'setOccurrencesCount',
        'occurrences' => 'setOccurrences',
        'payment_request_permissions' => 'setPaymentRequestPermissions',
        'comments' => 'setComments',
        'expiration_date' => 'setExpirationDate',
        'change_expiration_date_comments' => 'setChangeExpirationDateComments',
        'process_date' => 'setProcessDate',
        'transaction' => 'setTransaction',
        'sms_code' => 'setSmsCode',
        'scheduling' => 'setScheduling',
        'installments_count' => 'setInstallmentsCount',
        'first_installment_is_immediate' => 'setFirstInstallmentIsImmediate',
        'first_occurrence_is_immediate' => 'setFirstOccurrenceIsImmediate',
        'external_payment_permissions' => 'setExternalPaymentPermissions',
        'to_principal_type' => 'setToPrincipalType',
        'to_principal_value' => 'setToPrincipalValue',
        'payee' => 'setPayee',
        'payer_principal' => 'setPayerPrincipal',
        'payer' => 'setPayer',
        'approve_url' => 'setApproveUrl',
        'cancel_url' => 'setCancelUrl',
        'success_url' => 'setSuccessUrl',
        'preview' => 'setPreview',
        'bought_vouchers' => 'setBoughtVouchers',
        'voucher_transaction' => 'setVoucherTransaction',
        'users_which_can_add_to_contacts' => 'setUsersWhichCanAddToContacts',
        'users_which_can_view_profile' => 'setUsersWhichCanViewProfile',
        'authorization_type' => 'setAuthorizationType',
        'scheduled_payment_status' => 'setScheduledPaymentStatus',
        'recurring_payment_status' => 'setRecurringPaymentStatus',
        'payment_request_status' => 'setPaymentRequestStatus',
        'external_payment_status' => 'setExternalPaymentStatus',
        'ticket_status' => 'setTicketStatus',
        'export_formats' => 'setExportFormats',
        'feedback' => 'setFeedback',
        'feedback_permissions' => 'setFeedbackPermissions',
        'fees_on_authorization' => 'setFeesOnAuthorization',
        'original_transfer' => 'setOriginalTransfer',
        'chargeback_transfer' => 'setChargebackTransfer',
        'qr_content' => 'setQrContent',
        'status' => 'setStatus',
        'device_confirmation' => 'setDeviceConfirmation',
        'successful' => 'setSuccessful',
        'identity_provider' => 'setIdentityProvider',
        'request_id' => 'setRequestId',
        'session_token' => 'setSessionToken',
        'name' => 'setName',
        'email' => 'setEmail',
        'username' => 'setUsername',
        'mobile_phone' => 'setMobilePhone',
        'land_line_phone' => 'setLandLinePhone',
        'land_line_extension' => 'setLandLineExtension',
        'image' => 'setImage',
        'wizard_execution_data' => 'setWizardExecutionData',
        'error_message' => 'setErrorMessage',
        'pin_creation_token' => 'setPinCreationToken'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'new_notifications' => 'getNewNotifications',
        'unread_notifications' => 'getUnreadNotifications',
        'last_view_date' => 'getLastViewDate',
        'notification' => 'getNotification',
        'message' => 'getMessage',
        'new_messages' => 'getNewMessages',
        'unread_messages' => 'getUnreadMessages',
        'id' => 'getId',
        'display' => 'getDisplay',
        'transaction_number' => 'getTransactionNumber',
        'date' => 'getDate',
        'amount' => 'getAmount',
        'from' => 'getFrom',
        'to' => 'getTo',
        'type' => 'getType',
        'currency' => 'getCurrency',
        'ticket_number' => 'getTicketNumber',
        'from_name' => 'getFromName',
        'to_name' => 'getToName',
        'description' => 'getDescription',
        'kind' => 'getKind',
        'creation_type' => 'getCreationType',
        'authorization_status' => 'getAuthorizationStatus',
        'channel' => 'getChannel',
        'access_client' => 'getAccessClient',
        'oidc_client' => 'getOidcClient',
        'by' => 'getBy',
        'received_by' => 'getReceivedBy',
        'received' => 'getReceived',
        'custom_values' => 'getCustomValues',
        'confirmation_password_input' => 'getConfirmationPasswordInput',
        'authorization_level_data' => 'getAuthorizationLevelData',
        'authorization_permissions' => 'getAuthorizationPermissions',
        'authorizations' => 'getAuthorizations',
        'transfer' => 'getTransfer',
        'scheduled_payment_permissions' => 'getScheduledPaymentPermissions',
        'due_amount' => 'getDueAmount',
        'installments' => 'getInstallments',
        'recurring_payment_permissions' => 'getRecurringPaymentPermissions',
        'next_occurrence_date' => 'getNextOccurrenceDate',
        'occurrence_interval' => 'getOccurrenceInterval',
        'occurrences_count' => 'getOccurrencesCount',
        'occurrences' => 'getOccurrences',
        'payment_request_permissions' => 'getPaymentRequestPermissions',
        'comments' => 'getComments',
        'expiration_date' => 'getExpirationDate',
        'change_expiration_date_comments' => 'getChangeExpirationDateComments',
        'process_date' => 'getProcessDate',
        'transaction' => 'getTransaction',
        'sms_code' => 'getSmsCode',
        'scheduling' => 'getScheduling',
        'installments_count' => 'getInstallmentsCount',
        'first_installment_is_immediate' => 'getFirstInstallmentIsImmediate',
        'first_occurrence_is_immediate' => 'getFirstOccurrenceIsImmediate',
        'external_payment_permissions' => 'getExternalPaymentPermissions',
        'to_principal_type' => 'getToPrincipalType',
        'to_principal_value' => 'getToPrincipalValue',
        'payee' => 'getPayee',
        'payer_principal' => 'getPayerPrincipal',
        'payer' => 'getPayer',
        'approve_url' => 'getApproveUrl',
        'cancel_url' => 'getCancelUrl',
        'success_url' => 'getSuccessUrl',
        'preview' => 'getPreview',
        'bought_vouchers' => 'getBoughtVouchers',
        'voucher_transaction' => 'getVoucherTransaction',
        'users_which_can_add_to_contacts' => 'getUsersWhichCanAddToContacts',
        'users_which_can_view_profile' => 'getUsersWhichCanViewProfile',
        'authorization_type' => 'getAuthorizationType',
        'scheduled_payment_status' => 'getScheduledPaymentStatus',
        'recurring_payment_status' => 'getRecurringPaymentStatus',
        'payment_request_status' => 'getPaymentRequestStatus',
        'external_payment_status' => 'getExternalPaymentStatus',
        'ticket_status' => 'getTicketStatus',
        'export_formats' => 'getExportFormats',
        'feedback' => 'getFeedback',
        'feedback_permissions' => 'getFeedbackPermissions',
        'fees_on_authorization' => 'getFeesOnAuthorization',
        'original_transfer' => 'getOriginalTransfer',
        'chargeback_transfer' => 'getChargebackTransfer',
        'qr_content' => 'getQrContent',
        'status' => 'getStatus',
        'device_confirmation' => 'getDeviceConfirmation',
        'successful' => 'getSuccessful',
        'identity_provider' => 'getIdentityProvider',
        'request_id' => 'getRequestId',
        'session_token' => 'getSessionToken',
        'name' => 'getName',
        'email' => 'getEmail',
        'username' => 'getUsername',
        'mobile_phone' => 'getMobilePhone',
        'land_line_phone' => 'getLandLinePhone',
        'land_line_extension' => 'getLandLineExtension',
        'image' => 'getImage',
        'wizard_execution_data' => 'getWizardExecutionData',
        'error_message' => 'getErrorMessage',
        'pin_creation_token' => 'getPinCreationToken'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('new_notifications', $data ?? [], null);
        $this->setIfExists('unread_notifications', $data ?? [], null);
        $this->setIfExists('last_view_date', $data ?? [], null);
        $this->setIfExists('notification', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('new_messages', $data ?? [], null);
        $this->setIfExists('unread_messages', $data ?? [], null);
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('display', $data ?? [], null);
        $this->setIfExists('transaction_number', $data ?? [], null);
        $this->setIfExists('date', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('ticket_number', $data ?? [], null);
        $this->setIfExists('from_name', $data ?? [], null);
        $this->setIfExists('to_name', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('kind', $data ?? [], null);
        $this->setIfExists('creation_type', $data ?? [], null);
        $this->setIfExists('authorization_status', $data ?? [], null);
        $this->setIfExists('channel', $data ?? [], null);
        $this->setIfExists('access_client', $data ?? [], null);
        $this->setIfExists('oidc_client', $data ?? [], null);
        $this->setIfExists('by', $data ?? [], null);
        $this->setIfExists('received_by', $data ?? [], null);
        $this->setIfExists('received', $data ?? [], null);
        $this->setIfExists('custom_values', $data ?? [], null);
        $this->setIfExists('confirmation_password_input', $data ?? [], null);
        $this->setIfExists('authorization_level_data', $data ?? [], null);
        $this->setIfExists('authorization_permissions', $data ?? [], null);
        $this->setIfExists('authorizations', $data ?? [], null);
        $this->setIfExists('transfer', $data ?? [], null);
        $this->setIfExists('scheduled_payment_permissions', $data ?? [], null);
        $this->setIfExists('due_amount', $data ?? [], null);
        $this->setIfExists('installments', $data ?? [], null);
        $this->setIfExists('recurring_payment_permissions', $data ?? [], null);
        $this->setIfExists('next_occurrence_date', $data ?? [], null);
        $this->setIfExists('occurrence_interval', $data ?? [], null);
        $this->setIfExists('occurrences_count', $data ?? [], null);
        $this->setIfExists('occurrences', $data ?? [], null);
        $this->setIfExists('payment_request_permissions', $data ?? [], null);
        $this->setIfExists('comments', $data ?? [], null);
        $this->setIfExists('expiration_date', $data ?? [], null);
        $this->setIfExists('change_expiration_date_comments', $data ?? [], null);
        $this->setIfExists('process_date', $data ?? [], null);
        $this->setIfExists('transaction', $data ?? [], null);
        $this->setIfExists('sms_code', $data ?? [], null);
        $this->setIfExists('scheduling', $data ?? [], null);
        $this->setIfExists('installments_count', $data ?? [], null);
        $this->setIfExists('first_installment_is_immediate', $data ?? [], null);
        $this->setIfExists('first_occurrence_is_immediate', $data ?? [], null);
        $this->setIfExists('external_payment_permissions', $data ?? [], null);
        $this->setIfExists('to_principal_type', $data ?? [], null);
        $this->setIfExists('to_principal_value', $data ?? [], null);
        $this->setIfExists('payee', $data ?? [], null);
        $this->setIfExists('payer_principal', $data ?? [], null);
        $this->setIfExists('payer', $data ?? [], null);
        $this->setIfExists('approve_url', $data ?? [], null);
        $this->setIfExists('cancel_url', $data ?? [], null);
        $this->setIfExists('success_url', $data ?? [], null);
        $this->setIfExists('preview', $data ?? [], null);
        $this->setIfExists('bought_vouchers', $data ?? [], null);
        $this->setIfExists('voucher_transaction', $data ?? [], null);
        $this->setIfExists('users_which_can_add_to_contacts', $data ?? [], null);
        $this->setIfExists('users_which_can_view_profile', $data ?? [], null);
        $this->setIfExists('authorization_type', $data ?? [], null);
        $this->setIfExists('scheduled_payment_status', $data ?? [], null);
        $this->setIfExists('recurring_payment_status', $data ?? [], null);
        $this->setIfExists('payment_request_status', $data ?? [], null);
        $this->setIfExists('external_payment_status', $data ?? [], null);
        $this->setIfExists('ticket_status', $data ?? [], null);
        $this->setIfExists('export_formats', $data ?? [], null);
        $this->setIfExists('feedback', $data ?? [], null);
        $this->setIfExists('feedback_permissions', $data ?? [], null);
        $this->setIfExists('fees_on_authorization', $data ?? [], null);
        $this->setIfExists('original_transfer', $data ?? [], null);
        $this->setIfExists('chargeback_transfer', $data ?? [], null);
        $this->setIfExists('qr_content', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('device_confirmation', $data ?? [], null);
        $this->setIfExists('successful', $data ?? [], null);
        $this->setIfExists('identity_provider', $data ?? [], null);
        $this->setIfExists('request_id', $data ?? [], null);
        $this->setIfExists('session_token', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('username', $data ?? [], null);
        $this->setIfExists('mobile_phone', $data ?? [], null);
        $this->setIfExists('land_line_phone', $data ?? [], null);
        $this->setIfExists('land_line_extension', $data ?? [], null);
        $this->setIfExists('image', $data ?? [], null);
        $this->setIfExists('wizard_execution_data', $data ?? [], null);
        $this->setIfExists('error_message', $data ?? [], null);
        $this->setIfExists('pin_creation_token', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets new_notifications
     *
     * @return int|null
     */
    public function getNewNotifications()
    {
        return $this->container['new_notifications'];
    }

    /**
     * Sets new_notifications
     *
     * @param int|null $new_notifications Indicates the number of received notifications after the last view date (i.e `lastViewDate`).
     *
     * @return self
     */
    public function setNewNotifications($new_notifications)
    {
        if (is_null($new_notifications)) {
            throw new \InvalidArgumentException('non-nullable new_notifications cannot be null');
        }
        $this->container['new_notifications'] = $new_notifications;

        return $this;
    }

    /**
     * Gets unread_notifications
     *
     * @return int|null
     */
    public function getUnreadNotifications()
    {
        return $this->container['unread_notifications'];
    }

    /**
     * Sets unread_notifications
     *
     * @param int|null $unread_notifications Indicates the total number of unread notifications.
     *
     * @return self
     */
    public function setUnreadNotifications($unread_notifications)
    {
        if (is_null($unread_notifications)) {
            throw new \InvalidArgumentException('non-nullable unread_notifications cannot be null');
        }
        $this->container['unread_notifications'] = $unread_notifications;

        return $this;
    }

    /**
     * Gets last_view_date
     *
     * @return \DateTime|null
     */
    public function getLastViewDate()
    {
        return $this->container['last_view_date'];
    }

    /**
     * Sets last_view_date
     *
     * @param \DateTime|null $last_view_date The last view date tracked by the server through `POST /notifications/viewed`
     *
     * @return self
     */
    public function setLastViewDate($last_view_date)
    {
        if (is_null($last_view_date)) {
            throw new \InvalidArgumentException('non-nullable last_view_date cannot be null');
        }
        $this->container['last_view_date'] = $last_view_date;

        return $this;
    }

    /**
     * Gets notification
     *
     * @return \OpenAPI\Client\Model\Notification|null
     */
    public function getNotification()
    {
        return $this->container['notification'];
    }

    /**
     * Sets notification
     *
     * @param \OpenAPI\Client\Model\Notification|null $notification notification
     *
     * @return self
     */
    public function setNotification($notification)
    {
        if (is_null($notification)) {
            throw new \InvalidArgumentException('non-nullable notification cannot be null');
        }
        $this->container['notification'] = $notification;

        return $this;
    }

    /**
     * Gets message
     *
     * @return \OpenAPI\Client\Model\IncomingMessage|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param \OpenAPI\Client\Model\IncomingMessage|null $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets new_messages
     *
     * @return int|null
     */
    public function getNewMessages()
    {
        return $this->container['new_messages'];
    }

    /**
     * Sets new_messages
     *
     * @param int|null $new_messages The number of new messages since the last login
     *
     * @return self
     */
    public function setNewMessages($new_messages)
    {
        if (is_null($new_messages)) {
            throw new \InvalidArgumentException('non-nullable new_messages cannot be null');
        }
        $this->container['new_messages'] = $new_messages;

        return $this;
    }

    /**
     * Gets unread_messages
     *
     * @return int|null
     */
    public function getUnreadMessages()
    {
        return $this->container['unread_messages'];
    }

    /**
     * Sets unread_messages
     *
     * @param int|null $unread_messages The current number of unread messages
     *
     * @return self
     */
    public function setUnreadMessages($unread_messages)
    {
        if (is_null($unread_messages)) {
            throw new \InvalidArgumentException('non-nullable unread_messages cannot be null');
        }
        $this->container['unread_messages'] = $unread_messages;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The internal entity identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets display
     *
     * @return string|null
     */
    public function getDisplay()
    {
        return $this->container['display'];
    }

    /**
     * Sets display
     *
     * @param string|null $display A display text for this transfer / transaction, according to the transaction type and currency configuration in Cyclos.
     *
     * @return self
     */
    public function setDisplay($display)
    {
        if (is_null($display)) {
            throw new \InvalidArgumentException('non-nullable display cannot be null');
        }
        $this->container['display'] = $display;

        return $this;
    }

    /**
     * Gets transaction_number
     *
     * @return string|null
     */
    public function getTransactionNumber()
    {
        return $this->container['transaction_number'];
    }

    /**
     * Sets transaction_number
     *
     * @param string|null $transaction_number The transaction number identifying this transfer / transaction. The currency configuration has the definition on whether transaction numbers are enabled and which format they have.
     *
     * @return self
     */
    public function setTransactionNumber($transaction_number)
    {
        if (is_null($transaction_number)) {
            throw new \InvalidArgumentException('non-nullable transaction_number cannot be null');
        }
        $this->container['transaction_number'] = $transaction_number;

        return $this;
    }

    /**
     * Gets date
     *
     * @return \DateTime|null
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param \DateTime|null $date The creation date and time.
     *
     * @return self
     */
    public function setDate($date)
    {
        if (is_null($date)) {
            throw new \InvalidArgumentException('non-nullable date cannot be null');
        }
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The transfer / transaction amount.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets from
     *
     * @return \OpenAPI\Client\Model\TransAllOfFrom|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param \OpenAPI\Client\Model\TransAllOfFrom|null $from from
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return \OpenAPI\Client\Model\TransAllOfTo|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param \OpenAPI\Client\Model\TransAllOfTo|null $to to
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\DeviceConfirmationViewAllOfType|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\DeviceConfirmationViewAllOfType|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\TransAllOfCurrency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\TransAllOfCurrency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets ticket_number
     *
     * @return string|null
     */
    public function getTicketNumber()
    {
        return $this->container['ticket_number'];
    }

    /**
     * Sets ticket_number
     *
     * @param string|null $ticket_number A 32-length alphanumeric ticket identifier. Only returned if kind is `ticket`.
     *
     * @return self
     */
    public function setTicketNumber($ticket_number)
    {
        if (is_null($ticket_number)) {
            throw new \InvalidArgumentException('non-nullable ticket_number cannot be null');
        }
        $this->container['ticket_number'] = $ticket_number;

        return $this;
    }

    /**
     * Gets from_name
     *
     * @return string|null
     */
    public function getFromName()
    {
        return $this->container['from_name'];
    }

    /**
     * Sets from_name
     *
     * @param string|null $from_name Contains an optional custom from name, which can be set when the transaction is performed.
     *
     * @return self
     */
    public function setFromName($from_name)
    {
        if (is_null($from_name)) {
            throw new \InvalidArgumentException('non-nullable from_name cannot be null');
        }
        $this->container['from_name'] = $from_name;

        return $this;
    }

    /**
     * Gets to_name
     *
     * @return string|null
     */
    public function getToName()
    {
        return $this->container['to_name'];
    }

    /**
     * Sets to_name
     *
     * @param string|null $to_name Contains an optional custom to name, which can be set when the transaction is performed.
     *
     * @return self
     */
    public function setToName($to_name)
    {
        if (is_null($to_name)) {
            throw new \InvalidArgumentException('non-nullable to_name cannot be null');
        }
        $this->container['to_name'] = $to_name;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The optional transaction description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return \OpenAPI\Client\Model\TransactionAllOfKind|null
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param \OpenAPI\Client\Model\TransactionAllOfKind|null $kind kind
     *
     * @return self
     */
    public function setKind($kind)
    {
        if (is_null($kind)) {
            throw new \InvalidArgumentException('non-nullable kind cannot be null');
        }
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets creation_type
     *
     * @return \OpenAPI\Client\Model\TransactionAllOfCreationType|null
     */
    public function getCreationType()
    {
        return $this->container['creation_type'];
    }

    /**
     * Sets creation_type
     *
     * @param \OpenAPI\Client\Model\TransactionAllOfCreationType|null $creation_type creation_type
     *
     * @return self
     */
    public function setCreationType($creation_type)
    {
        if (is_null($creation_type)) {
            throw new \InvalidArgumentException('non-nullable creation_type cannot be null');
        }
        $this->container['creation_type'] = $creation_type;

        return $this;
    }

    /**
     * Gets authorization_status
     *
     * @return \OpenAPI\Client\Model\TransactionAllOfAuthorizationStatus|null
     */
    public function getAuthorizationStatus()
    {
        return $this->container['authorization_status'];
    }

    /**
     * Sets authorization_status
     *
     * @param \OpenAPI\Client\Model\TransactionAllOfAuthorizationStatus|null $authorization_status authorization_status
     *
     * @return self
     */
    public function setAuthorizationStatus($authorization_status)
    {
        if (is_null($authorization_status)) {
            throw new \InvalidArgumentException('non-nullable authorization_status cannot be null');
        }
        $this->container['authorization_status'] = $authorization_status;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfChannel|null
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfChannel|null $channel channel
     *
     * @return self
     */
    public function setChannel($channel)
    {
        if (is_null($channel)) {
            throw new \InvalidArgumentException('non-nullable channel cannot be null');
        }
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets access_client
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfAccessClient|null
     */
    public function getAccessClient()
    {
        return $this->container['access_client'];
    }

    /**
     * Sets access_client
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfAccessClient|null $access_client access_client
     *
     * @return self
     */
    public function setAccessClient($access_client)
    {
        if (is_null($access_client)) {
            throw new \InvalidArgumentException('non-nullable access_client cannot be null');
        }
        $this->container['access_client'] = $access_client;

        return $this;
    }

    /**
     * Gets oidc_client
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfOidcClient|null
     */
    public function getOidcClient()
    {
        return $this->container['oidc_client'];
    }

    /**
     * Sets oidc_client
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfOidcClient|null $oidc_client oidc_client
     *
     * @return self
     */
    public function setOidcClient($oidc_client)
    {
        if (is_null($oidc_client)) {
            throw new \InvalidArgumentException('non-nullable oidc_client cannot be null');
        }
        $this->container['oidc_client'] = $oidc_client;

        return $this;
    }

    /**
     * Gets by
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfBy|null
     */
    public function getBy()
    {
        return $this->container['by'];
    }

    /**
     * Sets by
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfBy|null $by by
     *
     * @return self
     */
    public function setBy($by)
    {
        if (is_null($by)) {
            throw new \InvalidArgumentException('non-nullable by cannot be null');
        }
        $this->container['by'] = $by;

        return $this;
    }

    /**
     * Gets received_by
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfReceivedBy|null
     */
    public function getReceivedBy()
    {
        return $this->container['received_by'];
    }

    /**
     * Sets received_by
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfReceivedBy|null $received_by received_by
     *
     * @return self
     */
    public function setReceivedBy($received_by)
    {
        if (is_null($received_by)) {
            throw new \InvalidArgumentException('non-nullable received_by cannot be null');
        }
        $this->container['received_by'] = $received_by;

        return $this;
    }

    /**
     * Gets received
     *
     * @return bool|null
     */
    public function getReceived()
    {
        return $this->container['received'];
    }

    /**
     * Sets received
     *
     * @param bool|null $received True if the payment was received via POS.
     *
     * @return self
     */
    public function setReceived($received)
    {
        if (is_null($received)) {
            throw new \InvalidArgumentException('non-nullable received cannot be null');
        }
        $this->container['received'] = $received;

        return $this;
    }

    /**
     * Gets custom_values
     *
     * @return array<string,string>|null
     */
    public function getCustomValues()
    {
        return $this->container['custom_values'];
    }

    /**
     * Sets custom_values
     *
     * @param array<string,string>|null $custom_values The user custom field values as returned by the provider. Only returned if `status` is `registrationData`.
     *
     * @return self
     */
    public function setCustomValues($custom_values)
    {
        if (is_null($custom_values)) {
            throw new \InvalidArgumentException('non-nullable custom_values cannot be null');
        }
        $this->container['custom_values'] = $custom_values;

        return $this;
    }

    /**
     * Gets confirmation_password_input
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfConfirmationPasswordInput|null
     */
    public function getConfirmationPasswordInput()
    {
        return $this->container['confirmation_password_input'];
    }

    /**
     * Sets confirmation_password_input
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfConfirmationPasswordInput|null $confirmation_password_input confirmation_password_input
     *
     * @return self
     */
    public function setConfirmationPasswordInput($confirmation_password_input)
    {
        if (is_null($confirmation_password_input)) {
            throw new \InvalidArgumentException('non-nullable confirmation_password_input cannot be null');
        }
        $this->container['confirmation_password_input'] = $confirmation_password_input;

        return $this;
    }

    /**
     * Gets authorization_level_data
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfAuthorizationLevelData|null
     */
    public function getAuthorizationLevelData()
    {
        return $this->container['authorization_level_data'];
    }

    /**
     * Sets authorization_level_data
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfAuthorizationLevelData|null $authorization_level_data authorization_level_data
     *
     * @return self
     */
    public function setAuthorizationLevelData($authorization_level_data)
    {
        if (is_null($authorization_level_data)) {
            throw new \InvalidArgumentException('non-nullable authorization_level_data cannot be null');
        }
        $this->container['authorization_level_data'] = $authorization_level_data;

        return $this;
    }

    /**
     * Gets authorization_permissions
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfAuthorizationPermissions|null
     */
    public function getAuthorizationPermissions()
    {
        return $this->container['authorization_permissions'];
    }

    /**
     * Sets authorization_permissions
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfAuthorizationPermissions|null $authorization_permissions authorization_permissions
     *
     * @return self
     */
    public function setAuthorizationPermissions($authorization_permissions)
    {
        if (is_null($authorization_permissions)) {
            throw new \InvalidArgumentException('non-nullable authorization_permissions cannot be null');
        }
        $this->container['authorization_permissions'] = $authorization_permissions;

        return $this;
    }

    /**
     * Gets authorizations
     *
     * @return \OpenAPI\Client\Model\TransactionAuthorization[]|null
     */
    public function getAuthorizations()
    {
        return $this->container['authorizations'];
    }

    /**
     * Sets authorizations
     *
     * @param \OpenAPI\Client\Model\TransactionAuthorization[]|null $authorizations Contains the details of the authorizations this payment has (for the previous levels). To see the final status of the payment please check the `authorizationStatus` property.
     *
     * @return self
     */
    public function setAuthorizations($authorizations)
    {
        if (is_null($authorizations)) {
            throw new \InvalidArgumentException('non-nullable authorizations cannot be null');
        }
        $this->container['authorizations'] = $authorizations;

        return $this;
    }

    /**
     * Gets transfer
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfTransfer|null
     */
    public function getTransfer()
    {
        return $this->container['transfer'];
    }

    /**
     * Sets transfer
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfTransfer|null $transfer transfer
     *
     * @return self
     */
    public function setTransfer($transfer)
    {
        if (is_null($transfer)) {
            throw new \InvalidArgumentException('non-nullable transfer cannot be null');
        }
        $this->container['transfer'] = $transfer;

        return $this;
    }

    /**
     * Gets scheduled_payment_permissions
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfScheduledPaymentPermissions|null
     */
    public function getScheduledPaymentPermissions()
    {
        return $this->container['scheduled_payment_permissions'];
    }

    /**
     * Sets scheduled_payment_permissions
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfScheduledPaymentPermissions|null $scheduled_payment_permissions scheduled_payment_permissions
     *
     * @return self
     */
    public function setScheduledPaymentPermissions($scheduled_payment_permissions)
    {
        if (is_null($scheduled_payment_permissions)) {
            throw new \InvalidArgumentException('non-nullable scheduled_payment_permissions cannot be null');
        }
        $this->container['scheduled_payment_permissions'] = $scheduled_payment_permissions;

        return $this;
    }

    /**
     * Gets due_amount
     *
     * @return float|null
     */
    public function getDueAmount()
    {
        return $this->container['due_amount'];
    }

    /**
     * Sets due_amount
     *
     * @param float|null $due_amount Only returned if the `kind` is `scheduledPayment`. Means the amount that is still needs to be paid until the last installment.
     *
     * @return self
     */
    public function setDueAmount($due_amount)
    {
        if (is_null($due_amount)) {
            throw new \InvalidArgumentException('non-nullable due_amount cannot be null');
        }
        $this->container['due_amount'] = $due_amount;

        return $this;
    }

    /**
     * Gets installments
     *
     * @return \OpenAPI\Client\Model\InstallmentView[]|null
     */
    public function getInstallments()
    {
        return $this->container['installments'];
    }

    /**
     * Sets installments
     *
     * @param \OpenAPI\Client\Model\InstallmentView[]|null $installments Only returned if the `kind` is `scheduledPayment`. Contains the installment references.
     *
     * @return self
     */
    public function setInstallments($installments)
    {
        if (is_null($installments)) {
            throw new \InvalidArgumentException('non-nullable installments cannot be null');
        }
        $this->container['installments'] = $installments;

        return $this;
    }

    /**
     * Gets recurring_payment_permissions
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfRecurringPaymentPermissions|null
     */
    public function getRecurringPaymentPermissions()
    {
        return $this->container['recurring_payment_permissions'];
    }

    /**
     * Sets recurring_payment_permissions
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfRecurringPaymentPermissions|null $recurring_payment_permissions recurring_payment_permissions
     *
     * @return self
     */
    public function setRecurringPaymentPermissions($recurring_payment_permissions)
    {
        if (is_null($recurring_payment_permissions)) {
            throw new \InvalidArgumentException('non-nullable recurring_payment_permissions cannot be null');
        }
        $this->container['recurring_payment_permissions'] = $recurring_payment_permissions;

        return $this;
    }

    /**
     * Gets next_occurrence_date
     *
     * @return \DateTime|null
     */
    public function getNextOccurrenceDate()
    {
        return $this->container['next_occurrence_date'];
    }

    /**
     * Sets next_occurrence_date
     *
     * @param \DateTime|null $next_occurrence_date Only returned if the `kind` is `recurringPayment`. The scheduled date for the next occurrence.
     *
     * @return self
     */
    public function setNextOccurrenceDate($next_occurrence_date)
    {
        if (is_null($next_occurrence_date)) {
            throw new \InvalidArgumentException('non-nullable next_occurrence_date cannot be null');
        }
        $this->container['next_occurrence_date'] = $next_occurrence_date;

        return $this;
    }

    /**
     * Gets occurrence_interval
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfOccurrenceInterval|null
     */
    public function getOccurrenceInterval()
    {
        return $this->container['occurrence_interval'];
    }

    /**
     * Sets occurrence_interval
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfOccurrenceInterval|null $occurrence_interval occurrence_interval
     *
     * @return self
     */
    public function setOccurrenceInterval($occurrence_interval)
    {
        if (is_null($occurrence_interval)) {
            throw new \InvalidArgumentException('non-nullable occurrence_interval cannot be null');
        }
        $this->container['occurrence_interval'] = $occurrence_interval;

        return $this;
    }

    /**
     * Gets occurrences_count
     *
     * @return int|null
     */
    public function getOccurrencesCount()
    {
        return $this->container['occurrences_count'];
    }

    /**
     * Sets occurrences_count
     *
     * @param int|null $occurrences_count Only returned if the `kind` is `recurringPayment` or if it is `paymentRequest` and `scheduling` is `recurring`. The programmed number of occurrences. If not set, means the payment will be processed until manually canceled.
     *
     * @return self
     */
    public function setOccurrencesCount($occurrences_count)
    {
        if (is_null($occurrences_count)) {
            throw new \InvalidArgumentException('non-nullable occurrences_count cannot be null');
        }
        $this->container['occurrences_count'] = $occurrences_count;

        return $this;
    }

    /**
     * Gets occurrences
     *
     * @return \OpenAPI\Client\Model\InstallmentView[]|null
     */
    public function getOccurrences()
    {
        return $this->container['occurrences'];
    }

    /**
     * Sets occurrences
     *
     * @param \OpenAPI\Client\Model\InstallmentView[]|null $occurrences Only returned if the `kind` is `recurringPayment`. A list with all occurrences this payment has.
     *
     * @return self
     */
    public function setOccurrences($occurrences)
    {
        if (is_null($occurrences)) {
            throw new \InvalidArgumentException('non-nullable occurrences cannot be null');
        }
        $this->container['occurrences'] = $occurrences;

        return $this;
    }

    /**
     * Gets payment_request_permissions
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfPaymentRequestPermissions|null
     */
    public function getPaymentRequestPermissions()
    {
        return $this->container['payment_request_permissions'];
    }

    /**
     * Sets payment_request_permissions
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfPaymentRequestPermissions|null $payment_request_permissions payment_request_permissions
     *
     * @return self
     */
    public function setPaymentRequestPermissions($payment_request_permissions)
    {
        if (is_null($payment_request_permissions)) {
            throw new \InvalidArgumentException('non-nullable payment_request_permissions cannot be null');
        }
        $this->container['payment_request_permissions'] = $payment_request_permissions;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string|null
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string|null $comments Only returned if the `kind` is either `paymentRequest` or `externalPayment`. The comments the user informed when performing the payment.
     *
     * @return self
     */
    public function setComments($comments)
    {
        if (is_null($comments)) {
            throw new \InvalidArgumentException('non-nullable comments cannot be null');
        }
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets expiration_date
     *
     * @return \DateTime|null
     */
    public function getExpirationDate()
    {
        return $this->container['expiration_date'];
    }

    /**
     * Sets expiration_date
     *
     * @param \DateTime|null $expiration_date Only returned if the `kind` is either `paymentRequest`, `externalPayment` or `ticket`. The deadline for the payment to be processed.  In case of `externalPayment` if no user is registered with either e-mail or mobile phone matching, it is canceled. The same is done in case of `ticket` if it is not accepted by any user.
     *
     * @return self
     */
    public function setExpirationDate($expiration_date)
    {
        if (is_null($expiration_date)) {
            throw new \InvalidArgumentException('non-nullable expiration_date cannot be null');
        }
        $this->container['expiration_date'] = $expiration_date;

        return $this;
    }

    /**
     * Gets change_expiration_date_comments
     *
     * @return string|null
     */
    public function getChangeExpirationDateComments()
    {
        return $this->container['change_expiration_date_comments'];
    }

    /**
     * Sets change_expiration_date_comments
     *
     * @param string|null $change_expiration_date_comments Only returned if the `kind` is `paymentRequest`. The comments the user informed when changing the expiration date.
     *
     * @return self
     */
    public function setChangeExpirationDateComments($change_expiration_date_comments)
    {
        if (is_null($change_expiration_date_comments)) {
            throw new \InvalidArgumentException('non-nullable change_expiration_date_comments cannot be null');
        }
        $this->container['change_expiration_date_comments'] = $change_expiration_date_comments;

        return $this;
    }

    /**
     * Gets process_date
     *
     * @return \DateTime|null
     */
    public function getProcessDate()
    {
        return $this->container['process_date'];
    }

    /**
     * Sets process_date
     *
     * @param \DateTime|null $process_date Only returned if the `kind` is either `paymentRequest`, `ticket` or `externalPayment` and the status is `processed`. In case of `payementRequest` the status could also be `scheduled`. The date the `externalPayment`, `paymentRequest`, `ticket` was processed if the `status` is `processed` or the date the `paymentRequest` will be processed if the `status` is `scheduled`.
     *
     * @return self
     */
    public function setProcessDate($process_date)
    {
        if (is_null($process_date)) {
            throw new \InvalidArgumentException('non-nullable process_date cannot be null');
        }
        $this->container['process_date'] = $process_date;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfTransaction|null
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfTransaction|null $transaction transaction
     *
     * @return self
     */
    public function setTransaction($transaction)
    {
        if (is_null($transaction)) {
            throw new \InvalidArgumentException('non-nullable transaction cannot be null');
        }
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets sms_code
     *
     * @return string|null
     */
    public function getSmsCode()
    {
        return $this->container['sms_code'];
    }

    /**
     * Sets sms_code
     *
     * @param string|null $sms_code Only returned if the `kind` is either `paymentRequest` and `status` is not `processed`. The code that can be used by the receiver to confirm this payment request via SMS operation.
     *
     * @return self
     */
    public function setSmsCode($sms_code)
    {
        if (is_null($sms_code)) {
            throw new \InvalidArgumentException('non-nullable sms_code cannot be null');
        }
        $this->container['sms_code'] = $sms_code;

        return $this;
    }

    /**
     * Gets scheduling
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfScheduling|null
     */
    public function getScheduling()
    {
        return $this->container['scheduling'];
    }

    /**
     * Sets scheduling
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfScheduling|null $scheduling scheduling
     *
     * @return self
     */
    public function setScheduling($scheduling)
    {
        if (is_null($scheduling)) {
            throw new \InvalidArgumentException('non-nullable scheduling cannot be null');
        }
        $this->container['scheduling'] = $scheduling;

        return $this;
    }

    /**
     * Gets installments_count
     *
     * @return int|null
     */
    public function getInstallmentsCount()
    {
        return $this->container['installments_count'];
    }

    /**
     * Sets installments_count
     *
     * @param int|null $installments_count Only returned if the `kind` is `paymentRequest` and `scheduling` is `scheduled`. Indicates the number of installments to be generated.
     *
     * @return self
     */
    public function setInstallmentsCount($installments_count)
    {
        if (is_null($installments_count)) {
            throw new \InvalidArgumentException('non-nullable installments_count cannot be null');
        }
        $this->container['installments_count'] = $installments_count;

        return $this;
    }

    /**
     * Gets first_installment_is_immediate
     *
     * @return bool|null
     */
    public function getFirstInstallmentIsImmediate()
    {
        return $this->container['first_installment_is_immediate'];
    }

    /**
     * Sets first_installment_is_immediate
     *
     * @param bool|null $first_installment_is_immediate Only returned if the `kind` is `paymentRequest` and `scheduling` is `scheduled`. Indicates whether the first installment should be processed immediately when the payment request is confirmed.
     *
     * @return self
     */
    public function setFirstInstallmentIsImmediate($first_installment_is_immediate)
    {
        if (is_null($first_installment_is_immediate)) {
            throw new \InvalidArgumentException('non-nullable first_installment_is_immediate cannot be null');
        }
        $this->container['first_installment_is_immediate'] = $first_installment_is_immediate;

        return $this;
    }

    /**
     * Gets first_occurrence_is_immediate
     *
     * @return bool|null
     */
    public function getFirstOccurrenceIsImmediate()
    {
        return $this->container['first_occurrence_is_immediate'];
    }

    /**
     * Sets first_occurrence_is_immediate
     *
     * @param bool|null $first_occurrence_is_immediate Only returned if the `kind` is `paymentRequest` and `scheduling` is `recurring`. Indicates whether the first occurrence should be processed immediately when the payment request is confirmed.
     *
     * @return self
     */
    public function setFirstOccurrenceIsImmediate($first_occurrence_is_immediate)
    {
        if (is_null($first_occurrence_is_immediate)) {
            throw new \InvalidArgumentException('non-nullable first_occurrence_is_immediate cannot be null');
        }
        $this->container['first_occurrence_is_immediate'] = $first_occurrence_is_immediate;

        return $this;
    }

    /**
     * Gets external_payment_permissions
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfExternalPaymentPermissions|null
     */
    public function getExternalPaymentPermissions()
    {
        return $this->container['external_payment_permissions'];
    }

    /**
     * Sets external_payment_permissions
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfExternalPaymentPermissions|null $external_payment_permissions external_payment_permissions
     *
     * @return self
     */
    public function setExternalPaymentPermissions($external_payment_permissions)
    {
        if (is_null($external_payment_permissions)) {
            throw new \InvalidArgumentException('non-nullable external_payment_permissions cannot be null');
        }
        $this->container['external_payment_permissions'] = $external_payment_permissions;

        return $this;
    }

    /**
     * Gets to_principal_type
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfToPrincipalType|null
     */
    public function getToPrincipalType()
    {
        return $this->container['to_principal_type'];
    }

    /**
     * Sets to_principal_type
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfToPrincipalType|null $to_principal_type to_principal_type
     *
     * @return self
     */
    public function setToPrincipalType($to_principal_type)
    {
        if (is_null($to_principal_type)) {
            throw new \InvalidArgumentException('non-nullable to_principal_type cannot be null');
        }
        $this->container['to_principal_type'] = $to_principal_type;

        return $this;
    }

    /**
     * Gets to_principal_value
     *
     * @return string|null
     */
    public function getToPrincipalValue()
    {
        return $this->container['to_principal_value'];
    }

    /**
     * Sets to_principal_value
     *
     * @param string|null $to_principal_value Only returned if the `kind` is `externalPayment`. Is the user identification value for this external payment (for example, the e-mail or mobile phone values).
     *
     * @return self
     */
    public function setToPrincipalValue($to_principal_value)
    {
        if (is_null($to_principal_value)) {
            throw new \InvalidArgumentException('non-nullable to_principal_value cannot be null');
        }
        $this->container['to_principal_value'] = $to_principal_value;

        return $this;
    }

    /**
     * Gets payee
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfPayee|null
     */
    public function getPayee()
    {
        return $this->container['payee'];
    }

    /**
     * Sets payee
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfPayee|null $payee payee
     *
     * @return self
     */
    public function setPayee($payee)
    {
        if (is_null($payee)) {
            throw new \InvalidArgumentException('non-nullable payee cannot be null');
        }
        $this->container['payee'] = $payee;

        return $this;
    }

    /**
     * Gets payer_principal
     *
     * @return string|null
     */
    public function getPayerPrincipal()
    {
        return $this->container['payer_principal'];
    }

    /**
     * Sets payer_principal
     *
     * @param string|null $payer_principal Only returned if the `kind` is `ticket`, the ticket status is `open` and there is a fixed payer. Is the principal (for example, login name or e-mail) which can be used to login the user, so he can accept the ticket.
     *
     * @return self
     */
    public function setPayerPrincipal($payer_principal)
    {
        if (is_null($payer_principal)) {
            throw new \InvalidArgumentException('non-nullable payer_principal cannot be null');
        }
        $this->container['payer_principal'] = $payer_principal;

        return $this;
    }

    /**
     * Gets payer
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfPayer|null
     */
    public function getPayer()
    {
        return $this->container['payer'];
    }

    /**
     * Sets payer
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfPayer|null $payer payer
     *
     * @return self
     */
    public function setPayer($payer)
    {
        if (is_null($payer)) {
            throw new \InvalidArgumentException('non-nullable payer cannot be null');
        }
        $this->container['payer'] = $payer;

        return $this;
    }

    /**
     * Gets approve_url
     *
     * @return string|null
     */
    public function getApproveUrl()
    {
        return $this->container['approve_url'];
    }

    /**
     * Sets approve_url
     *
     * @param string|null $approve_url Only returned if the `kind` is `ticket` and `status` is `open`. The URL used by clients to approve the ticket.
     *
     * @return self
     */
    public function setApproveUrl($approve_url)
    {
        if (is_null($approve_url)) {
            throw new \InvalidArgumentException('non-nullable approve_url cannot be null');
        }
        $this->container['approve_url'] = $approve_url;

        return $this;
    }

    /**
     * Gets cancel_url
     *
     * @return string|null
     */
    public function getCancelUrl()
    {
        return $this->container['cancel_url'];
    }

    /**
     * Sets cancel_url
     *
     * @param string|null $cancel_url Only returned if the `kind` is `ticket`. The URL to redirect when canceling the ticket.
     *
     * @return self
     */
    public function setCancelUrl($cancel_url)
    {
        if (is_null($cancel_url)) {
            throw new \InvalidArgumentException('non-nullable cancel_url cannot be null');
        }
        $this->container['cancel_url'] = $cancel_url;

        return $this;
    }

    /**
     * Gets success_url
     *
     * @return string|null
     */
    public function getSuccessUrl()
    {
        return $this->container['success_url'];
    }

    /**
     * Sets success_url
     *
     * @param string|null $success_url Only returned if the `kind` is `ticket`. The URL to redirect after successfully accepting a ticket
     *
     * @return self
     */
    public function setSuccessUrl($success_url)
    {
        if (is_null($success_url)) {
            throw new \InvalidArgumentException('non-nullable success_url cannot be null');
        }
        $this->container['success_url'] = $success_url;

        return $this;
    }

    /**
     * Gets preview
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfPreview|null
     */
    public function getPreview()
    {
        return $this->container['preview'];
    }

    /**
     * Sets preview
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfPreview|null $preview preview
     *
     * @return self
     */
    public function setPreview($preview)
    {
        if (is_null($preview)) {
            throw new \InvalidArgumentException('non-nullable preview cannot be null');
        }
        $this->container['preview'] = $preview;

        return $this;
    }

    /**
     * Gets bought_vouchers
     *
     * @return \OpenAPI\Client\Model\Voucher[]|null
     */
    public function getBoughtVouchers()
    {
        return $this->container['bought_vouchers'];
    }

    /**
     * Sets bought_vouchers
     *
     * @param \OpenAPI\Client\Model\Voucher[]|null $bought_vouchers Only returned if the `kind` is `payment` and the payment was done to buy vouchers.
     *
     * @return self
     */
    public function setBoughtVouchers($bought_vouchers)
    {
        if (is_null($bought_vouchers)) {
            throw new \InvalidArgumentException('non-nullable bought_vouchers cannot be null');
        }
        $this->container['bought_vouchers'] = $bought_vouchers;

        return $this;
    }

    /**
     * Gets voucher_transaction
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfVoucherTransaction|null
     */
    public function getVoucherTransaction()
    {
        return $this->container['voucher_transaction'];
    }

    /**
     * Sets voucher_transaction
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfVoucherTransaction|null $voucher_transaction voucher_transaction
     *
     * @return self
     */
    public function setVoucherTransaction($voucher_transaction)
    {
        if (is_null($voucher_transaction)) {
            throw new \InvalidArgumentException('non-nullable voucher_transaction cannot be null');
        }
        $this->container['voucher_transaction'] = $voucher_transaction;

        return $this;
    }

    /**
     * Gets users_which_can_add_to_contacts
     *
     * @return \OpenAPI\Client\Model\TransactionSubjectsEnum|null
     */
    public function getUsersWhichCanAddToContacts()
    {
        return $this->container['users_which_can_add_to_contacts'];
    }

    /**
     * Sets users_which_can_add_to_contacts
     *
     * @param \OpenAPI\Client\Model\TransactionSubjectsEnum|null $users_which_can_add_to_contacts users_which_can_add_to_contacts
     *
     * @return self
     */
    public function setUsersWhichCanAddToContacts($users_which_can_add_to_contacts)
    {
        if (is_null($users_which_can_add_to_contacts)) {
            throw new \InvalidArgumentException('non-nullable users_which_can_add_to_contacts cannot be null');
        }
        $this->container['users_which_can_add_to_contacts'] = $users_which_can_add_to_contacts;

        return $this;
    }

    /**
     * Gets users_which_can_view_profile
     *
     * @return \OpenAPI\Client\Model\TransactionSubjectsEnum|null
     */
    public function getUsersWhichCanViewProfile()
    {
        return $this->container['users_which_can_view_profile'];
    }

    /**
     * Sets users_which_can_view_profile
     *
     * @param \OpenAPI\Client\Model\TransactionSubjectsEnum|null $users_which_can_view_profile users_which_can_view_profile
     *
     * @return self
     */
    public function setUsersWhichCanViewProfile($users_which_can_view_profile)
    {
        if (is_null($users_which_can_view_profile)) {
            throw new \InvalidArgumentException('non-nullable users_which_can_view_profile cannot be null');
        }
        $this->container['users_which_can_view_profile'] = $users_which_can_view_profile;

        return $this;
    }

    /**
     * Gets authorization_type
     *
     * @return \OpenAPI\Client\Model\TransactionAuthorizationTypeEnum|null
     */
    public function getAuthorizationType()
    {
        return $this->container['authorization_type'];
    }

    /**
     * Sets authorization_type
     *
     * @param \OpenAPI\Client\Model\TransactionAuthorizationTypeEnum|null $authorization_type authorization_type
     *
     * @return self
     */
    public function setAuthorizationType($authorization_type)
    {
        if (is_null($authorization_type)) {
            throw new \InvalidArgumentException('non-nullable authorization_type cannot be null');
        }
        $this->container['authorization_type'] = $authorization_type;

        return $this;
    }

    /**
     * Gets scheduled_payment_status
     *
     * @return \OpenAPI\Client\Model\ScheduledPaymentStatusEnum|null
     */
    public function getScheduledPaymentStatus()
    {
        return $this->container['scheduled_payment_status'];
    }

    /**
     * Sets scheduled_payment_status
     *
     * @param \OpenAPI\Client\Model\ScheduledPaymentStatusEnum|null $scheduled_payment_status scheduled_payment_status
     *
     * @return self
     */
    public function setScheduledPaymentStatus($scheduled_payment_status)
    {
        if (is_null($scheduled_payment_status)) {
            throw new \InvalidArgumentException('non-nullable scheduled_payment_status cannot be null');
        }
        $this->container['scheduled_payment_status'] = $scheduled_payment_status;

        return $this;
    }

    /**
     * Gets recurring_payment_status
     *
     * @return \OpenAPI\Client\Model\RecurringPaymentStatusEnum|null
     */
    public function getRecurringPaymentStatus()
    {
        return $this->container['recurring_payment_status'];
    }

    /**
     * Sets recurring_payment_status
     *
     * @param \OpenAPI\Client\Model\RecurringPaymentStatusEnum|null $recurring_payment_status recurring_payment_status
     *
     * @return self
     */
    public function setRecurringPaymentStatus($recurring_payment_status)
    {
        if (is_null($recurring_payment_status)) {
            throw new \InvalidArgumentException('non-nullable recurring_payment_status cannot be null');
        }
        $this->container['recurring_payment_status'] = $recurring_payment_status;

        return $this;
    }

    /**
     * Gets payment_request_status
     *
     * @return \OpenAPI\Client\Model\PaymentRequestStatusEnum|null
     */
    public function getPaymentRequestStatus()
    {
        return $this->container['payment_request_status'];
    }

    /**
     * Sets payment_request_status
     *
     * @param \OpenAPI\Client\Model\PaymentRequestStatusEnum|null $payment_request_status payment_request_status
     *
     * @return self
     */
    public function setPaymentRequestStatus($payment_request_status)
    {
        if (is_null($payment_request_status)) {
            throw new \InvalidArgumentException('non-nullable payment_request_status cannot be null');
        }
        $this->container['payment_request_status'] = $payment_request_status;

        return $this;
    }

    /**
     * Gets external_payment_status
     *
     * @return \OpenAPI\Client\Model\ExternalPaymentStatusEnum|null
     */
    public function getExternalPaymentStatus()
    {
        return $this->container['external_payment_status'];
    }

    /**
     * Sets external_payment_status
     *
     * @param \OpenAPI\Client\Model\ExternalPaymentStatusEnum|null $external_payment_status external_payment_status
     *
     * @return self
     */
    public function setExternalPaymentStatus($external_payment_status)
    {
        if (is_null($external_payment_status)) {
            throw new \InvalidArgumentException('non-nullable external_payment_status cannot be null');
        }
        $this->container['external_payment_status'] = $external_payment_status;

        return $this;
    }

    /**
     * Gets ticket_status
     *
     * @return \OpenAPI\Client\Model\TicketStatusEnum|null
     */
    public function getTicketStatus()
    {
        return $this->container['ticket_status'];
    }

    /**
     * Sets ticket_status
     *
     * @param \OpenAPI\Client\Model\TicketStatusEnum|null $ticket_status ticket_status
     *
     * @return self
     */
    public function setTicketStatus($ticket_status)
    {
        if (is_null($ticket_status)) {
            throw new \InvalidArgumentException('non-nullable ticket_status cannot be null');
        }
        $this->container['ticket_status'] = $ticket_status;

        return $this;
    }

    /**
     * Gets export_formats
     *
     * @return \OpenAPI\Client\Model\ExportFormat[]|null
     */
    public function getExportFormats()
    {
        return $this->container['export_formats'];
    }

    /**
     * Sets export_formats
     *
     * @param \OpenAPI\Client\Model\ExportFormat[]|null $export_formats The formats which the data can be exported. Not returned if this `TransactionView` is already in a `TransferView`.
     *
     * @return self
     */
    public function setExportFormats($export_formats)
    {
        if (is_null($export_formats)) {
            throw new \InvalidArgumentException('non-nullable export_formats cannot be null');
        }
        $this->container['export_formats'] = $export_formats;

        return $this;
    }

    /**
     * Gets feedback
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfFeedback|null
     */
    public function getFeedback()
    {
        return $this->container['feedback'];
    }

    /**
     * Sets feedback
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfFeedback|null $feedback feedback
     *
     * @return self
     */
    public function setFeedback($feedback)
    {
        if (is_null($feedback)) {
            throw new \InvalidArgumentException('non-nullable feedback cannot be null');
        }
        $this->container['feedback'] = $feedback;

        return $this;
    }

    /**
     * Gets feedback_permissions
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfFeedbackPermissions|null
     */
    public function getFeedbackPermissions()
    {
        return $this->container['feedback_permissions'];
    }

    /**
     * Sets feedback_permissions
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfFeedbackPermissions|null $feedback_permissions feedback_permissions
     *
     * @return self
     */
    public function setFeedbackPermissions($feedback_permissions)
    {
        if (is_null($feedback_permissions)) {
            throw new \InvalidArgumentException('non-nullable feedback_permissions cannot be null');
        }
        $this->container['feedback_permissions'] = $feedback_permissions;

        return $this;
    }

    /**
     * Gets fees_on_authorization
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfFeesOnAuthorization|null
     */
    public function getFeesOnAuthorization()
    {
        return $this->container['fees_on_authorization'];
    }

    /**
     * Sets fees_on_authorization
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfFeesOnAuthorization|null $fees_on_authorization fees_on_authorization
     *
     * @return self
     */
    public function setFeesOnAuthorization($fees_on_authorization)
    {
        if (is_null($fees_on_authorization)) {
            throw new \InvalidArgumentException('non-nullable fees_on_authorization cannot be null');
        }
        $this->container['fees_on_authorization'] = $fees_on_authorization;

        return $this;
    }

    /**
     * Gets original_transfer
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfOriginalTransfer|null
     * @deprecated
     */
    public function getOriginalTransfer()
    {
        return $this->container['original_transfer'];
    }

    /**
     * Sets original_transfer
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfOriginalTransfer|null $original_transfer original_transfer
     *
     * @return self
     * @deprecated
     */
    public function setOriginalTransfer($original_transfer)
    {
        if (is_null($original_transfer)) {
            throw new \InvalidArgumentException('non-nullable original_transfer cannot be null');
        }
        $this->container['original_transfer'] = $original_transfer;

        return $this;
    }

    /**
     * Gets chargeback_transfer
     *
     * @return \OpenAPI\Client\Model\TransactionViewAllOfChargebackTransfer|null
     * @deprecated
     */
    public function getChargebackTransfer()
    {
        return $this->container['chargeback_transfer'];
    }

    /**
     * Sets chargeback_transfer
     *
     * @param \OpenAPI\Client\Model\TransactionViewAllOfChargebackTransfer|null $chargeback_transfer chargeback_transfer
     *
     * @return self
     * @deprecated
     */
    public function setChargebackTransfer($chargeback_transfer)
    {
        if (is_null($chargeback_transfer)) {
            throw new \InvalidArgumentException('non-nullable chargeback_transfer cannot be null');
        }
        $this->container['chargeback_transfer'] = $chargeback_transfer;

        return $this;
    }

    /**
     * Gets qr_content
     *
     * @return string|null
     */
    public function getQrContent()
    {
        return $this->container['qr_content'];
    }

    /**
     * Sets qr_content
     *
     * @param string|null $qr_content The QR content for this confirmation. The content is a URL of the form:  cyclos://confirmation?id=confirmation_id&description=i18n_confirmation_type&fields=Label1:Value1|Label2:Value2...
     *
     * @return self
     */
    public function setQrContent($qr_content)
    {
        if (is_null($qr_content)) {
            throw new \InvalidArgumentException('non-nullable qr_content cannot be null');
        }
        $this->container['qr_content'] = $qr_content;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\IdentityProviderCallbackStatusEnum|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\IdentityProviderCallbackStatusEnum|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets device_confirmation
     *
     * @return \OpenAPI\Client\Model\DeviceConfirmationView|null
     */
    public function getDeviceConfirmation()
    {
        return $this->container['device_confirmation'];
    }

    /**
     * Sets device_confirmation
     *
     * @param \OpenAPI\Client\Model\DeviceConfirmationView|null $device_confirmation device_confirmation
     *
     * @return self
     */
    public function setDeviceConfirmation($device_confirmation)
    {
        if (is_null($device_confirmation)) {
            throw new \InvalidArgumentException('non-nullable device_confirmation cannot be null');
        }
        $this->container['device_confirmation'] = $device_confirmation;

        return $this;
    }

    /**
     * Gets successful
     *
     * @return bool|null
     */
    public function getSuccessful()
    {
        return $this->container['successful'];
    }

    /**
     * Sets successful
     *
     * @param bool|null $successful True if the operation approved by the device confirmation has finished successfully.
     *
     * @return self
     */
    public function setSuccessful($successful)
    {
        if (is_null($successful)) {
            throw new \InvalidArgumentException('non-nullable successful cannot be null');
        }
        $this->container['successful'] = $successful;

        return $this;
    }

    /**
     * Gets identity_provider
     *
     * @return \OpenAPI\Client\Model\IdentityProvider|null
     */
    public function getIdentityProvider()
    {
        return $this->container['identity_provider'];
    }

    /**
     * Sets identity_provider
     *
     * @param \OpenAPI\Client\Model\IdentityProvider|null $identity_provider identity_provider
     *
     * @return self
     */
    public function setIdentityProvider($identity_provider)
    {
        if (is_null($identity_provider)) {
            throw new \InvalidArgumentException('non-nullable identity_provider cannot be null');
        }
        $this->container['identity_provider'] = $identity_provider;

        return $this;
    }

    /**
     * Gets request_id
     *
     * @return string|null
     */
    public function getRequestId()
    {
        return $this->container['request_id'];
    }

    /**
     * Sets request_id
     *
     * @param string|null $request_id The identifier used to track this operation.
     *
     * @return self
     */
    public function setRequestId($request_id)
    {
        if (is_null($request_id)) {
            throw new \InvalidArgumentException('non-nullable request_id cannot be null');
        }
        $this->container['request_id'] = $request_id;

        return $this;
    }

    /**
     * Gets session_token
     *
     * @return string|null
     */
    public function getSessionToken()
    {
        return $this->container['session_token'];
    }

    /**
     * Sets session_token
     *
     * @param string|null $session_token If the user was logged-in, this is the token identifying the session. Only returned if `status` is either: `loginLink`, `loginEmail` or `registrationDone`.
     *
     * @return self
     */
    public function setSessionToken($session_token)
    {
        if (is_null($session_token)) {
            throw new \InvalidArgumentException('non-nullable session_token cannot be null');
        }
        $this->container['session_token'] = $session_token;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The user display name as returned by the provider. Only returned if `status` is `registrationData`.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The user e-mail as returned by the provider. Only returned if `status` is `registrationData`.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string|null
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string|null $username The user login name as returned by the provider. Only returned if `status` is `registrationData`.
     *
     * @return self
     */
    public function setUsername($username)
    {
        if (is_null($username)) {
            throw new \InvalidArgumentException('non-nullable username cannot be null');
        }
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets mobile_phone
     *
     * @return string|null
     */
    public function getMobilePhone()
    {
        return $this->container['mobile_phone'];
    }

    /**
     * Sets mobile_phone
     *
     * @param string|null $mobile_phone The user mobile phone number name as returned by the provider. Only returned if `status` is `registrationData`.
     *
     * @return self
     */
    public function setMobilePhone($mobile_phone)
    {
        if (is_null($mobile_phone)) {
            throw new \InvalidArgumentException('non-nullable mobile_phone cannot be null');
        }
        $this->container['mobile_phone'] = $mobile_phone;

        return $this;
    }

    /**
     * Gets land_line_phone
     *
     * @return string|null
     */
    public function getLandLinePhone()
    {
        return $this->container['land_line_phone'];
    }

    /**
     * Sets land_line_phone
     *
     * @param string|null $land_line_phone The user land-line phone number name as returned by the provider. Only returned if `status` is `registrationData`.
     *
     * @return self
     */
    public function setLandLinePhone($land_line_phone)
    {
        if (is_null($land_line_phone)) {
            throw new \InvalidArgumentException('non-nullable land_line_phone cannot be null');
        }
        $this->container['land_line_phone'] = $land_line_phone;

        return $this;
    }

    /**
     * Gets land_line_extension
     *
     * @return string|null
     */
    public function getLandLineExtension()
    {
        return $this->container['land_line_extension'];
    }

    /**
     * Sets land_line_extension
     *
     * @param string|null $land_line_extension The user land-line phone extension name as returned by the provider. Only returned if `status` is `registrationData`.
     *
     * @return self
     */
    public function setLandLineExtension($land_line_extension)
    {
        if (is_null($land_line_extension)) {
            throw new \InvalidArgumentException('non-nullable land_line_extension cannot be null');
        }
        $this->container['land_line_extension'] = $land_line_extension;

        return $this;
    }

    /**
     * Gets image
     *
     * @return \OpenAPI\Client\Model\Image|null
     */
    public function getImage()
    {
        return $this->container['image'];
    }

    /**
     * Sets image
     *
     * @param \OpenAPI\Client\Model\Image|null $image image
     *
     * @return self
     */
    public function setImage($image)
    {
        if (is_null($image)) {
            throw new \InvalidArgumentException('non-nullable image cannot be null');
        }
        $this->container['image'] = $image;

        return $this;
    }

    /**
     * Gets wizard_execution_data
     *
     * @return \OpenAPI\Client\Model\WizardExecutionData|null
     */
    public function getWizardExecutionData()
    {
        return $this->container['wizard_execution_data'];
    }

    /**
     * Sets wizard_execution_data
     *
     * @param \OpenAPI\Client\Model\WizardExecutionData|null $wizard_execution_data wizard_execution_data
     *
     * @return self
     */
    public function setWizardExecutionData($wizard_execution_data)
    {
        if (is_null($wizard_execution_data)) {
            throw new \InvalidArgumentException('non-nullable wizard_execution_data cannot be null');
        }
        $this->container['wizard_execution_data'] = $wizard_execution_data;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message Description for the error being returned. It is possible that no message is returned. In this case, a generic error message should be displayed for the user. Only returned if `status` is `error`.
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        if (is_null($error_message)) {
            throw new \InvalidArgumentException('non-nullable error_message cannot be null');
        }
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets pin_creation_token
     *
     * @return string|null
     */
    public function getPinCreationToken()
    {
        return $this->container['pin_creation_token'];
    }

    /**
     * Sets pin_creation_token
     *
     * @param string|null $pin_creation_token A token (challenge) generated only If the user was logged-in (i.e a `sessionToken` is returned). It can be used to confirm the pin creation operation. Is has a validity of 6 minutes after the session was created. After that time the pin creation can be confirmed only using the current login password.
     *
     * @return self
     */
    public function setPinCreationToken($pin_creation_token)
    {
        if (is_null($pin_creation_token)) {
            throw new \InvalidArgumentException('non-nullable pin_creation_token cannot be null');
        }
        $this->container['pin_creation_token'] = $pin_creation_token;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


