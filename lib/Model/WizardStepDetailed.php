<?php
/**
 * WizardStepDetailed
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * WizardStepDetailed Class Doc Comment
 *
 * @category Class
 * @description A custom wizard step with detailed information
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class WizardStepDetailed implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'WizardStepDetailed';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'name' => 'string',
        'internal_name' => 'string',
        'kind' => '\OpenAPI\Client\Model\WizardStepKind',
        'title' => 'string',
        'information_text' => 'string',
        'groups' => '\OpenAPI\Client\Model\GroupForRegistration[]',
        'identity_providers' => '\OpenAPI\Client\Model\IdentityProvider[]',
        'data_for_new' => '\OpenAPI\Client\Model\WizardStepDetailedAllOfDataForNew',
        'verified_email' => 'string',
        'verified_sms' => 'string',
        'verification_code_seconds' => 'int',
        'custom_fields' => '\OpenAPI\Client\Model\CustomFieldDetailed[]',
        'fields' => '\OpenAPI\Client\Model\WizardStepField[]',
        'validate_email' => 'bool',
        'validate_sms' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'internal_name' => null,
        'kind' => null,
        'title' => null,
        'information_text' => null,
        'groups' => null,
        'identity_providers' => null,
        'data_for_new' => null,
        'verified_email' => null,
        'verified_sms' => null,
        'verification_code_seconds' => null,
        'custom_fields' => null,
        'fields' => null,
        'validate_email' => null,
        'validate_sms' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'name' => false,
        'internal_name' => false,
        'kind' => false,
        'title' => false,
        'information_text' => false,
        'groups' => false,
        'identity_providers' => false,
        'data_for_new' => false,
        'verified_email' => false,
        'verified_sms' => false,
        'verification_code_seconds' => false,
        'custom_fields' => false,
        'fields' => false,
        'validate_email' => false,
        'validate_sms' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'internal_name' => 'internalName',
        'kind' => 'kind',
        'title' => 'title',
        'information_text' => 'informationText',
        'groups' => 'groups',
        'identity_providers' => 'identityProviders',
        'data_for_new' => 'dataForNew',
        'verified_email' => 'verifiedEmail',
        'verified_sms' => 'verifiedSms',
        'verification_code_seconds' => 'verificationCodeSeconds',
        'custom_fields' => 'customFields',
        'fields' => 'fields',
        'validate_email' => 'validateEmail',
        'validate_sms' => 'validateSms'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'internal_name' => 'setInternalName',
        'kind' => 'setKind',
        'title' => 'setTitle',
        'information_text' => 'setInformationText',
        'groups' => 'setGroups',
        'identity_providers' => 'setIdentityProviders',
        'data_for_new' => 'setDataForNew',
        'verified_email' => 'setVerifiedEmail',
        'verified_sms' => 'setVerifiedSms',
        'verification_code_seconds' => 'setVerificationCodeSeconds',
        'custom_fields' => 'setCustomFields',
        'fields' => 'setFields',
        'validate_email' => 'setValidateEmail',
        'validate_sms' => 'setValidateSms'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'internal_name' => 'getInternalName',
        'kind' => 'getKind',
        'title' => 'getTitle',
        'information_text' => 'getInformationText',
        'groups' => 'getGroups',
        'identity_providers' => 'getIdentityProviders',
        'data_for_new' => 'getDataForNew',
        'verified_email' => 'getVerifiedEmail',
        'verified_sms' => 'getVerifiedSms',
        'verification_code_seconds' => 'getVerificationCodeSeconds',
        'custom_fields' => 'getCustomFields',
        'fields' => 'getFields',
        'validate_email' => 'getValidateEmail',
        'validate_sms' => 'getValidateSms'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('internal_name', $data ?? [], null);
        $this->setIfExists('kind', $data ?? [], null);
        $this->setIfExists('title', $data ?? [], null);
        $this->setIfExists('information_text', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('identity_providers', $data ?? [], null);
        $this->setIfExists('data_for_new', $data ?? [], null);
        $this->setIfExists('verified_email', $data ?? [], null);
        $this->setIfExists('verified_sms', $data ?? [], null);
        $this->setIfExists('verification_code_seconds', $data ?? [], null);
        $this->setIfExists('custom_fields', $data ?? [], null);
        $this->setIfExists('fields', $data ?? [], null);
        $this->setIfExists('validate_email', $data ?? [], null);
        $this->setIfExists('validate_sms', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The internal entity identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The entity name
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets internal_name
     *
     * @return string|null
     */
    public function getInternalName()
    {
        return $this->container['internal_name'];
    }

    /**
     * Sets internal_name
     *
     * @param string|null $internal_name The entity internal name, which can be seen as an extra identifier
     *
     * @return self
     */
    public function setInternalName($internal_name)
    {
        if (is_null($internal_name)) {
            throw new \InvalidArgumentException('non-nullable internal_name cannot be null');
        }
        $this->container['internal_name'] = $internal_name;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return \OpenAPI\Client\Model\WizardStepKind|null
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param \OpenAPI\Client\Model\WizardStepKind|null $kind kind
     *
     * @return self
     */
    public function setKind($kind)
    {
        if (is_null($kind)) {
            throw new \InvalidArgumentException('non-nullable kind cannot be null');
        }
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string|null
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string|null $title The title that should be displayed for users on this step.
     *
     * @return self
     */
    public function setTitle($title)
    {
        if (is_null($title)) {
            throw new \InvalidArgumentException('non-nullable title cannot be null');
        }
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets information_text
     *
     * @return string|null
     */
    public function getInformationText()
    {
        return $this->container['information_text'];
    }

    /**
     * Sets information_text
     *
     * @param string|null $information_text Descriptive text that should be displayed in this wizard step.
     *
     * @return self
     */
    public function setInformationText($information_text)
    {
        if (is_null($information_text)) {
            throw new \InvalidArgumentException('non-nullable information_text cannot be null');
        }
        $this->container['information_text'] = $information_text;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return \OpenAPI\Client\Model\GroupForRegistration[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param \OpenAPI\Client\Model\GroupForRegistration[]|null $groups Groups that can be used for registration. Only returned if `kind` is `group`.
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets identity_providers
     *
     * @return \OpenAPI\Client\Model\IdentityProvider[]|null
     */
    public function getIdentityProviders()
    {
        return $this->container['identity_providers'];
    }

    /**
     * Sets identity_providers
     *
     * @param \OpenAPI\Client\Model\IdentityProvider[]|null $identity_providers The identity providers available for registering. Only returned if `kind` is `identityProvider`.
     *
     * @return self
     */
    public function setIdentityProviders($identity_providers)
    {
        if (is_null($identity_providers)) {
            throw new \InvalidArgumentException('non-nullable identity_providers cannot be null');
        }
        $this->container['identity_providers'] = $identity_providers;

        return $this;
    }

    /**
     * Gets data_for_new
     *
     * @return \OpenAPI\Client\Model\WizardStepDetailedAllOfDataForNew|null
     */
    public function getDataForNew()
    {
        return $this->container['data_for_new'];
    }

    /**
     * Sets data_for_new
     *
     * @param \OpenAPI\Client\Model\WizardStepDetailedAllOfDataForNew|null $data_for_new data_for_new
     *
     * @return self
     */
    public function setDataForNew($data_for_new)
    {
        if (is_null($data_for_new)) {
            throw new \InvalidArgumentException('non-nullable data_for_new cannot be null');
        }
        $this->container['data_for_new'] = $data_for_new;

        return $this;
    }

    /**
     * Gets verified_email
     *
     * @return string|null
     */
    public function getVerifiedEmail()
    {
        return $this->container['verified_email'];
    }

    /**
     * Sets verified_email
     *
     * @param string|null $verified_email If an e-mail address was already verified, contains that address. Only returned if `kind` is `formFields` and the wizard kind is `registration`.
     *
     * @return self
     */
    public function setVerifiedEmail($verified_email)
    {
        if (is_null($verified_email)) {
            throw new \InvalidArgumentException('non-nullable verified_email cannot be null');
        }
        $this->container['verified_email'] = $verified_email;

        return $this;
    }

    /**
     * Gets verified_sms
     *
     * @return string|null
     */
    public function getVerifiedSms()
    {
        return $this->container['verified_sms'];
    }

    /**
     * Sets verified_sms
     *
     * @param string|null $verified_sms If a mobile phone number was was already verified by SMS, contains that number. Only returned if `kind` is `formFields` and the wizard kind is `registration`.
     *
     * @return self
     */
    public function setVerifiedSms($verified_sms)
    {
        if (is_null($verified_sms)) {
            throw new \InvalidArgumentException('non-nullable verified_sms cannot be null');
        }
        $this->container['verified_sms'] = $verified_sms;

        return $this;
    }

    /**
     * Gets verification_code_seconds
     *
     * @return int|null
     */
    public function getVerificationCodeSeconds()
    {
        return $this->container['verification_code_seconds'];
    }

    /**
     * Sets verification_code_seconds
     *
     * @param int|null $verification_code_seconds The number of seconds a verification code may be requested again.
     *
     * @return self
     */
    public function setVerificationCodeSeconds($verification_code_seconds)
    {
        if (is_null($verification_code_seconds)) {
            throw new \InvalidArgumentException('non-nullable verification_code_seconds cannot be null');
        }
        $this->container['verification_code_seconds'] = $verification_code_seconds;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \OpenAPI\Client\Model\CustomFieldDetailed[]|null
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \OpenAPI\Client\Model\CustomFieldDetailed[]|null $custom_fields The custom fields defined in this wizard that should be displayed. Only returned if `kind` is `formFields`.
     *
     * @return self
     */
    public function setCustomFields($custom_fields)
    {
        if (is_null($custom_fields)) {
            throw new \InvalidArgumentException('non-nullable custom_fields cannot be null');
        }
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \OpenAPI\Client\Model\WizardStepField[]|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \OpenAPI\Client\Model\WizardStepField[]|null $fields Contains the fields ordered in the way they should be displayed, well as some additional information per field. Fields that represents custom profile fields or wizard custom fields contain the field internal name. The field data itself should be looked up in either `dataForNew.customFields` (for user custom fields) or `customFields` (for wazard custom fields).
     *
     * @return self
     */
    public function setFields($fields)
    {
        if (is_null($fields)) {
            throw new \InvalidArgumentException('non-nullable fields cannot be null');
        }
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets validate_email
     *
     * @return bool|null
     * @deprecated
     */
    public function getValidateEmail()
    {
        return $this->container['validate_email'];
    }

    /**
     * Sets validate_email
     *
     * @param bool|null $validate_email Lookup the `requireVerification` property in `fields` array for the object with `basicProfileField` = `email`.
     *
     * @return self
     * @deprecated
     */
    public function setValidateEmail($validate_email)
    {
        if (is_null($validate_email)) {
            throw new \InvalidArgumentException('non-nullable validate_email cannot be null');
        }
        $this->container['validate_email'] = $validate_email;

        return $this;
    }

    /**
     * Gets validate_sms
     *
     * @return bool|null
     * @deprecated
     */
    public function getValidateSms()
    {
        return $this->container['validate_sms'];
    }

    /**
     * Sets validate_sms
     *
     * @param bool|null $validate_sms Lookup the `requireVerification` property in `fields` array for the object with `phoneKind` = `mobile`.
     *
     * @return self
     * @deprecated
     */
    public function setValidateSms($validate_sms)
    {
        if (is_null($validate_sms)) {
            throw new \InvalidArgumentException('non-nullable validate_sms cannot be null');
        }
        $this->container['validate_sms'] = $validate_sms;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


