<?php
/**
 * ImportedFileView
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ImportedFileView Class Doc Comment
 *
 * @category Class
 * @description Details of an imported file.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ImportedFileView implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'ImportedFileView';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'kind' => '\OpenAPI\Client\Model\ImportedFileKind',
        'status' => '\OpenAPI\Client\Model\ImportedFileStatusEnum',
        'file_name' => 'string',
        'creation_date' => '\DateTime',
        'processing_date' => '\DateTime',
        'by' => '\OpenAPI\Client\Model\ImportedFileResultAllOfBy',
        'description' => 'string',
        'error_message' => 'string',
        'user' => '\OpenAPI\Client\Model\User',
        'archive_date' => '\DateTime',
        'progress' => '\OpenAPI\Client\Model\ImportedFileProgress',
        'permanent' => 'bool',
        'process_automatically' => 'bool',
        'fields' => '\OpenAPI\Client\Model\ImportedField[]',
        'ignored_fields' => 'string[]',
        'can_edit' => 'bool',
        'can_remove' => 'bool',
        'can_process' => 'bool',
        'can_abort' => 'bool',
        'use_group_from_file' => 'bool',
        'group' => '\OpenAPI\Client\Model\ImportedFileViewAllOfGroup',
        'send_activation_email' => 'bool',
        'currency' => '\OpenAPI\Client\Model\ImportedFileViewAllOfCurrency',
        'record_type' => '\OpenAPI\Client\Model\ImportedFileViewAllOfRecordType',
        'send_notifications' => 'bool',
        'payment_type' => '\OpenAPI\Client\Model\ImportedFileViewAllOfPaymentType',
        'voucher_type' => '\OpenAPI\Client\Model\ImportedFileViewAllOfVoucherType',
        'use_amount_from_file' => 'bool',
        'amount' => 'float',
        'send_message' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'kind' => null,
        'status' => null,
        'file_name' => null,
        'creation_date' => 'date-time',
        'processing_date' => 'date-time',
        'by' => null,
        'description' => null,
        'error_message' => null,
        'user' => null,
        'archive_date' => 'date-time',
        'progress' => null,
        'permanent' => null,
        'process_automatically' => null,
        'fields' => null,
        'ignored_fields' => null,
        'can_edit' => null,
        'can_remove' => null,
        'can_process' => null,
        'can_abort' => null,
        'use_group_from_file' => null,
        'group' => null,
        'send_activation_email' => null,
        'currency' => null,
        'record_type' => null,
        'send_notifications' => null,
        'payment_type' => null,
        'voucher_type' => null,
        'use_amount_from_file' => null,
        'amount' => 'number',
        'send_message' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'id' => false,
        'kind' => false,
        'status' => false,
        'file_name' => false,
        'creation_date' => false,
        'processing_date' => false,
        'by' => false,
        'description' => false,
        'error_message' => false,
        'user' => false,
        'archive_date' => false,
        'progress' => false,
        'permanent' => false,
        'process_automatically' => false,
        'fields' => false,
        'ignored_fields' => false,
        'can_edit' => false,
        'can_remove' => false,
        'can_process' => false,
        'can_abort' => false,
        'use_group_from_file' => false,
        'group' => false,
        'send_activation_email' => false,
        'currency' => false,
        'record_type' => false,
        'send_notifications' => false,
        'payment_type' => false,
        'voucher_type' => false,
        'use_amount_from_file' => false,
        'amount' => false,
        'send_message' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'kind' => 'kind',
        'status' => 'status',
        'file_name' => 'fileName',
        'creation_date' => 'creationDate',
        'processing_date' => 'processingDate',
        'by' => 'by',
        'description' => 'description',
        'error_message' => 'errorMessage',
        'user' => 'user',
        'archive_date' => 'archiveDate',
        'progress' => 'progress',
        'permanent' => 'permanent',
        'process_automatically' => 'processAutomatically',
        'fields' => 'fields',
        'ignored_fields' => 'ignoredFields',
        'can_edit' => 'canEdit',
        'can_remove' => 'canRemove',
        'can_process' => 'canProcess',
        'can_abort' => 'canAbort',
        'use_group_from_file' => 'useGroupFromFile',
        'group' => 'group',
        'send_activation_email' => 'sendActivationEmail',
        'currency' => 'currency',
        'record_type' => 'recordType',
        'send_notifications' => 'sendNotifications',
        'payment_type' => 'paymentType',
        'voucher_type' => 'voucherType',
        'use_amount_from_file' => 'useAmountFromFile',
        'amount' => 'amount',
        'send_message' => 'sendMessage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'kind' => 'setKind',
        'status' => 'setStatus',
        'file_name' => 'setFileName',
        'creation_date' => 'setCreationDate',
        'processing_date' => 'setProcessingDate',
        'by' => 'setBy',
        'description' => 'setDescription',
        'error_message' => 'setErrorMessage',
        'user' => 'setUser',
        'archive_date' => 'setArchiveDate',
        'progress' => 'setProgress',
        'permanent' => 'setPermanent',
        'process_automatically' => 'setProcessAutomatically',
        'fields' => 'setFields',
        'ignored_fields' => 'setIgnoredFields',
        'can_edit' => 'setCanEdit',
        'can_remove' => 'setCanRemove',
        'can_process' => 'setCanProcess',
        'can_abort' => 'setCanAbort',
        'use_group_from_file' => 'setUseGroupFromFile',
        'group' => 'setGroup',
        'send_activation_email' => 'setSendActivationEmail',
        'currency' => 'setCurrency',
        'record_type' => 'setRecordType',
        'send_notifications' => 'setSendNotifications',
        'payment_type' => 'setPaymentType',
        'voucher_type' => 'setVoucherType',
        'use_amount_from_file' => 'setUseAmountFromFile',
        'amount' => 'setAmount',
        'send_message' => 'setSendMessage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'kind' => 'getKind',
        'status' => 'getStatus',
        'file_name' => 'getFileName',
        'creation_date' => 'getCreationDate',
        'processing_date' => 'getProcessingDate',
        'by' => 'getBy',
        'description' => 'getDescription',
        'error_message' => 'getErrorMessage',
        'user' => 'getUser',
        'archive_date' => 'getArchiveDate',
        'progress' => 'getProgress',
        'permanent' => 'getPermanent',
        'process_automatically' => 'getProcessAutomatically',
        'fields' => 'getFields',
        'ignored_fields' => 'getIgnoredFields',
        'can_edit' => 'getCanEdit',
        'can_remove' => 'getCanRemove',
        'can_process' => 'getCanProcess',
        'can_abort' => 'getCanAbort',
        'use_group_from_file' => 'getUseGroupFromFile',
        'group' => 'getGroup',
        'send_activation_email' => 'getSendActivationEmail',
        'currency' => 'getCurrency',
        'record_type' => 'getRecordType',
        'send_notifications' => 'getSendNotifications',
        'payment_type' => 'getPaymentType',
        'voucher_type' => 'getVoucherType',
        'use_amount_from_file' => 'getUseAmountFromFile',
        'amount' => 'getAmount',
        'send_message' => 'getSendMessage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('id', $data ?? [], null);
        $this->setIfExists('kind', $data ?? [], null);
        $this->setIfExists('status', $data ?? [], null);
        $this->setIfExists('file_name', $data ?? [], null);
        $this->setIfExists('creation_date', $data ?? [], null);
        $this->setIfExists('processing_date', $data ?? [], null);
        $this->setIfExists('by', $data ?? [], null);
        $this->setIfExists('description', $data ?? [], null);
        $this->setIfExists('error_message', $data ?? [], null);
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('archive_date', $data ?? [], null);
        $this->setIfExists('progress', $data ?? [], null);
        $this->setIfExists('permanent', $data ?? [], null);
        $this->setIfExists('process_automatically', $data ?? [], null);
        $this->setIfExists('fields', $data ?? [], null);
        $this->setIfExists('ignored_fields', $data ?? [], null);
        $this->setIfExists('can_edit', $data ?? [], null);
        $this->setIfExists('can_remove', $data ?? [], null);
        $this->setIfExists('can_process', $data ?? [], null);
        $this->setIfExists('can_abort', $data ?? [], null);
        $this->setIfExists('use_group_from_file', $data ?? [], null);
        $this->setIfExists('group', $data ?? [], null);
        $this->setIfExists('send_activation_email', $data ?? [], null);
        $this->setIfExists('currency', $data ?? [], null);
        $this->setIfExists('record_type', $data ?? [], null);
        $this->setIfExists('send_notifications', $data ?? [], null);
        $this->setIfExists('payment_type', $data ?? [], null);
        $this->setIfExists('voucher_type', $data ?? [], null);
        $this->setIfExists('use_amount_from_file', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('send_message', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id The internal entity identifier
     *
     * @return self
     */
    public function setId($id)
    {
        if (is_null($id)) {
            throw new \InvalidArgumentException('non-nullable id cannot be null');
        }
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets kind
     *
     * @return \OpenAPI\Client\Model\ImportedFileKind|null
     */
    public function getKind()
    {
        return $this->container['kind'];
    }

    /**
     * Sets kind
     *
     * @param \OpenAPI\Client\Model\ImportedFileKind|null $kind kind
     *
     * @return self
     */
    public function setKind($kind)
    {
        if (is_null($kind)) {
            throw new \InvalidArgumentException('non-nullable kind cannot be null');
        }
        $this->container['kind'] = $kind;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \OpenAPI\Client\Model\ImportedFileStatusEnum|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \OpenAPI\Client\Model\ImportedFileStatusEnum|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        if (is_null($status)) {
            throw new \InvalidArgumentException('non-nullable status cannot be null');
        }
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets file_name
     *
     * @return string|null
     */
    public function getFileName()
    {
        return $this->container['file_name'];
    }

    /**
     * Sets file_name
     *
     * @param string|null $file_name The file name used on import.
     *
     * @return self
     */
    public function setFileName($file_name)
    {
        if (is_null($file_name)) {
            throw new \InvalidArgumentException('non-nullable file_name cannot be null');
        }
        $this->container['file_name'] = $file_name;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime|null
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime|null $creation_date The date the file was uploaded.
     *
     * @return self
     */
    public function setCreationDate($creation_date)
    {
        if (is_null($creation_date)) {
            throw new \InvalidArgumentException('non-nullable creation_date cannot be null');
        }
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets processing_date
     *
     * @return \DateTime|null
     */
    public function getProcessingDate()
    {
        return $this->container['processing_date'];
    }

    /**
     * Sets processing_date
     *
     * @param \DateTime|null $processing_date The date the file started being processed.
     *
     * @return self
     */
    public function setProcessingDate($processing_date)
    {
        if (is_null($processing_date)) {
            throw new \InvalidArgumentException('non-nullable processing_date cannot be null');
        }
        $this->container['processing_date'] = $processing_date;

        return $this;
    }

    /**
     * Gets by
     *
     * @return \OpenAPI\Client\Model\ImportedFileResultAllOfBy|null
     */
    public function getBy()
    {
        return $this->container['by'];
    }

    /**
     * Sets by
     *
     * @param \OpenAPI\Client\Model\ImportedFileResultAllOfBy|null $by by
     *
     * @return self
     */
    public function setBy($by)
    {
        if (is_null($by)) {
            throw new \InvalidArgumentException('non-nullable by cannot be null');
        }
        $this->container['by'] = $by;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string|null
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string|null $description The (optional) file description.
     *
     * @return self
     */
    public function setDescription($description)
    {
        if (is_null($description)) {
            throw new \InvalidArgumentException('non-nullable description cannot be null');
        }
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets error_message
     *
     * @return string|null
     */
    public function getErrorMessage()
    {
        return $this->container['error_message'];
    }

    /**
     * Sets error_message
     *
     * @param string|null $error_message Only if `status` is either `invalid` or `internalError`.
     *
     * @return self
     */
    public function setErrorMessage($error_message)
    {
        if (is_null($error_message)) {
            throw new \InvalidArgumentException('non-nullable error_message cannot be null');
        }
        $this->container['error_message'] = $error_message;

        return $this;
    }

    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\User|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\User|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets archive_date
     *
     * @return \DateTime|null
     */
    public function getArchiveDate()
    {
        return $this->container['archive_date'];
    }

    /**
     * Sets archive_date
     *
     * @param \DateTime|null $archive_date The date where the imported file was archived. Only if `status` is `archived`.
     *
     * @return self
     */
    public function setArchiveDate($archive_date)
    {
        if (is_null($archive_date)) {
            throw new \InvalidArgumentException('non-nullable archive_date cannot be null');
        }
        $this->container['archive_date'] = $archive_date;

        return $this;
    }

    /**
     * Gets progress
     *
     * @return \OpenAPI\Client\Model\ImportedFileProgress|null
     */
    public function getProgress()
    {
        return $this->container['progress'];
    }

    /**
     * Sets progress
     *
     * @param \OpenAPI\Client\Model\ImportedFileProgress|null $progress progress
     *
     * @return self
     */
    public function setProgress($progress)
    {
        if (is_null($progress)) {
            throw new \InvalidArgumentException('non-nullable progress cannot be null');
        }
        $this->container['progress'] = $progress;

        return $this;
    }

    /**
     * Gets permanent
     *
     * @return bool|null
     */
    public function getPermanent()
    {
        return $this->container['permanent'];
    }

    /**
     * Sets permanent
     *
     * @param bool|null $permanent Indicates whether this file was imported with setting to be permanent (never archived).
     *
     * @return self
     */
    public function setPermanent($permanent)
    {
        if (is_null($permanent)) {
            throw new \InvalidArgumentException('non-nullable permanent cannot be null');
        }
        $this->container['permanent'] = $permanent;

        return $this;
    }

    /**
     * Gets process_automatically
     *
     * @return bool|null
     */
    public function getProcessAutomatically()
    {
        return $this->container['process_automatically'];
    }

    /**
     * Sets process_automatically
     *
     * @param bool|null $process_automatically Indicates whether the file should be immediately imported as soon as the CSV is parsed.
     *
     * @return self
     */
    public function setProcessAutomatically($process_automatically)
    {
        if (is_null($process_automatically)) {
            throw new \InvalidArgumentException('non-nullable process_automatically cannot be null');
        }
        $this->container['process_automatically'] = $process_automatically;

        return $this;
    }

    /**
     * Gets fields
     *
     * @return \OpenAPI\Client\Model\ImportedField[]|null
     */
    public function getFields()
    {
        return $this->container['fields'];
    }

    /**
     * Sets fields
     *
     * @param \OpenAPI\Client\Model\ImportedField[]|null $fields The fields in the imported file
     *
     * @return self
     */
    public function setFields($fields)
    {
        if (is_null($fields)) {
            throw new \InvalidArgumentException('non-nullable fields cannot be null');
        }
        $this->container['fields'] = $fields;

        return $this;
    }

    /**
     * Gets ignored_fields
     *
     * @return string[]|null
     */
    public function getIgnoredFields()
    {
        return $this->container['ignored_fields'];
    }

    /**
     * Sets ignored_fields
     *
     * @param string[]|null $ignored_fields The column names that were ignored (invalid)
     *
     * @return self
     */
    public function setIgnoredFields($ignored_fields)
    {
        if (is_null($ignored_fields)) {
            throw new \InvalidArgumentException('non-nullable ignored_fields cannot be null');
        }
        $this->container['ignored_fields'] = $ignored_fields;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool|null
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool|null $can_edit Can the authenticated user edit this import?
     *
     * @return self
     */
    public function setCanEdit($can_edit)
    {
        if (is_null($can_edit)) {
            throw new \InvalidArgumentException('non-nullable can_edit cannot be null');
        }
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets can_remove
     *
     * @return bool|null
     */
    public function getCanRemove()
    {
        return $this->container['can_remove'];
    }

    /**
     * Sets can_remove
     *
     * @param bool|null $can_remove Can the authenticated user remove this import?
     *
     * @return self
     */
    public function setCanRemove($can_remove)
    {
        if (is_null($can_remove)) {
            throw new \InvalidArgumentException('non-nullable can_remove cannot be null');
        }
        $this->container['can_remove'] = $can_remove;

        return $this;
    }

    /**
     * Gets can_process
     *
     * @return bool|null
     */
    public function getCanProcess()
    {
        return $this->container['can_process'];
    }

    /**
     * Sets can_process
     *
     * @param bool|null $can_process Can the authenticated user start processing this import?
     *
     * @return self
     */
    public function setCanProcess($can_process)
    {
        if (is_null($can_process)) {
            throw new \InvalidArgumentException('non-nullable can_process cannot be null');
        }
        $this->container['can_process'] = $can_process;

        return $this;
    }

    /**
     * Gets can_abort
     *
     * @return bool|null
     */
    public function getCanAbort()
    {
        return $this->container['can_abort'];
    }

    /**
     * Sets can_abort
     *
     * @param bool|null $can_abort Can the authenticated user abort this import?
     *
     * @return self
     */
    public function setCanAbort($can_abort)
    {
        if (is_null($can_abort)) {
            throw new \InvalidArgumentException('non-nullable can_abort cannot be null');
        }
        $this->container['can_abort'] = $can_abort;

        return $this;
    }

    /**
     * Gets use_group_from_file
     *
     * @return bool|null
     */
    public function getUseGroupFromFile()
    {
        return $this->container['use_group_from_file'];
    }

    /**
     * Sets use_group_from_file
     *
     * @param bool|null $use_group_from_file Is the `group` enabled in the imported file? Only if `kind` is `users`.
     *
     * @return self
     */
    public function setUseGroupFromFile($use_group_from_file)
    {
        if (is_null($use_group_from_file)) {
            throw new \InvalidArgumentException('non-nullable use_group_from_file cannot be null');
        }
        $this->container['use_group_from_file'] = $use_group_from_file;

        return $this;
    }

    /**
     * Gets group
     *
     * @return \OpenAPI\Client\Model\ImportedFileViewAllOfGroup|null
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param \OpenAPI\Client\Model\ImportedFileViewAllOfGroup|null $group group
     *
     * @return self
     */
    public function setGroup($group)
    {
        if (is_null($group)) {
            throw new \InvalidArgumentException('non-nullable group cannot be null');
        }
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets send_activation_email
     *
     * @return bool|null
     */
    public function getSendActivationEmail()
    {
        return $this->container['send_activation_email'];
    }

    /**
     * Sets send_activation_email
     *
     * @param bool|null $send_activation_email Whether to send an activation email to each registered user. Only if `kind` is `users`.
     *
     * @return self
     */
    public function setSendActivationEmail($send_activation_email)
    {
        if (is_null($send_activation_email)) {
            throw new \InvalidArgumentException('non-nullable send_activation_email cannot be null');
        }
        $this->container['send_activation_email'] = $send_activation_email;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \OpenAPI\Client\Model\ImportedFileViewAllOfCurrency|null
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \OpenAPI\Client\Model\ImportedFileViewAllOfCurrency|null $currency currency
     *
     * @return self
     */
    public function setCurrency($currency)
    {
        if (is_null($currency)) {
            throw new \InvalidArgumentException('non-nullable currency cannot be null');
        }
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets record_type
     *
     * @return \OpenAPI\Client\Model\ImportedFileViewAllOfRecordType|null
     */
    public function getRecordType()
    {
        return $this->container['record_type'];
    }

    /**
     * Sets record_type
     *
     * @param \OpenAPI\Client\Model\ImportedFileViewAllOfRecordType|null $record_type record_type
     *
     * @return self
     */
    public function setRecordType($record_type)
    {
        if (is_null($record_type)) {
            throw new \InvalidArgumentException('non-nullable record_type cannot be null');
        }
        $this->container['record_type'] = $record_type;

        return $this;
    }

    /**
     * Gets send_notifications
     *
     * @return bool|null
     */
    public function getSendNotifications()
    {
        return $this->container['send_notifications'];
    }

    /**
     * Sets send_notifications
     *
     * @param bool|null $send_notifications Whether to send notification for each imported payment. Only if `kind` is `payments`.
     *
     * @return self
     */
    public function setSendNotifications($send_notifications)
    {
        if (is_null($send_notifications)) {
            throw new \InvalidArgumentException('non-nullable send_notifications cannot be null');
        }
        $this->container['send_notifications'] = $send_notifications;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return \OpenAPI\Client\Model\ImportedFileViewAllOfPaymentType|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param \OpenAPI\Client\Model\ImportedFileViewAllOfPaymentType|null $payment_type payment_type
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        if (is_null($payment_type)) {
            throw new \InvalidArgumentException('non-nullable payment_type cannot be null');
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets voucher_type
     *
     * @return \OpenAPI\Client\Model\ImportedFileViewAllOfVoucherType|null
     */
    public function getVoucherType()
    {
        return $this->container['voucher_type'];
    }

    /**
     * Sets voucher_type
     *
     * @param \OpenAPI\Client\Model\ImportedFileViewAllOfVoucherType|null $voucher_type voucher_type
     *
     * @return self
     */
    public function setVoucherType($voucher_type)
    {
        if (is_null($voucher_type)) {
            throw new \InvalidArgumentException('non-nullable voucher_type cannot be null');
        }
        $this->container['voucher_type'] = $voucher_type;

        return $this;
    }

    /**
     * Gets use_amount_from_file
     *
     * @return bool|null
     */
    public function getUseAmountFromFile()
    {
        return $this->container['use_amount_from_file'];
    }

    /**
     * Sets use_amount_from_file
     *
     * @param bool|null $use_amount_from_file Is the `amount` column enabled in the imported file? Only used if `kind` is `userSendVouchers`.
     *
     * @return self
     */
    public function setUseAmountFromFile($use_amount_from_file)
    {
        if (is_null($use_amount_from_file)) {
            throw new \InvalidArgumentException('non-nullable use_amount_from_file cannot be null');
        }
        $this->container['use_amount_from_file'] = $use_amount_from_file;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount Depending on `useAmountFromFile`, either the amount or default amount for sent vouchers. Only `kind` is `userSendVouchers`.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets send_message
     *
     * @return string|null
     */
    public function getSendMessage()
    {
        return $this->container['send_message'];
    }

    /**
     * Sets send_message
     *
     * @param string|null $send_message A message sent together with the voucher via email. Can use variables: `{name}`, `{email}` and `{amount}`. Only used if `kind` is `userSendVouchers`.
     *
     * @return self
     */
    public function setSendMessage($send_message)
    {
        if (is_null($send_message)) {
            throw new \InvalidArgumentException('non-nullable send_message cannot be null');
        }
        $this->container['send_message'] = $send_message;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


