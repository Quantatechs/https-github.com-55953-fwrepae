<?php
/**
 * CreateDeviceConfirmation
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateDeviceConfirmation Class Doc Comment
 *
 * @category Class
 * @description Contains data for create a pending device confirmation.
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateDeviceConfirmation implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CreateDeviceConfirmation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'from' => 'string',
        'to' => 'string',
        'to_principal' => 'string',
        'payment_type' => 'string',
        'amount' => 'float',
        'transaction' => 'string',
        'transfer' => 'string',
        'account' => 'string',
        'installment' => 'string',
        'failed_occurrence' => 'string',
        'client' => 'string',
        'name' => 'string',
        'type' => '\OpenAPI\Client\Model\DeviceConfirmationTypeEnum',
        'external_payment_action' => '\OpenAPI\Client\Model\ExternalPaymentActionEnum',
        'scheduled_payment_action' => '\OpenAPI\Client\Model\ScheduledPaymentActionEnum',
        'recurring_payment_action' => '\OpenAPI\Client\Model\RecurringPaymentActionEnum',
        'installment_action' => '\OpenAPI\Client\Model\InstallmentActionEnum',
        'failed_occurrence_action' => '\OpenAPI\Client\Model\FailedOccurrenceActionEnum',
        'authorization_action' => '\OpenAPI\Client\Model\AuthorizationActionEnum',
        'payment_request_action' => '\OpenAPI\Client\Model\PaymentRequestActionEnum',
        'client_action' => '\OpenAPI\Client\Model\ClientActionEnum',
        'operation' => 'string',
        'wizard' => 'string',
        'password_type' => 'string',
        'seller' => 'string',
        'order' => 'string',
        'record_type' => 'string',
        'voucher' => 'string',
        'voucher_action' => '\OpenAPI\Client\Model\VoucherActionEnum',
        'voucher_type' => 'string',
        'number_of_vouchers' => 'int',
        'email' => 'string',
        'device_id' => 'string',
        'device_action' => '\OpenAPI\Client\Model\DeviceActionEnum'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'from' => null,
        'to' => null,
        'to_principal' => null,
        'payment_type' => null,
        'amount' => 'number',
        'transaction' => null,
        'transfer' => null,
        'account' => null,
        'installment' => null,
        'failed_occurrence' => null,
        'client' => null,
        'name' => null,
        'type' => null,
        'external_payment_action' => null,
        'scheduled_payment_action' => null,
        'recurring_payment_action' => null,
        'installment_action' => null,
        'failed_occurrence_action' => null,
        'authorization_action' => null,
        'payment_request_action' => null,
        'client_action' => null,
        'operation' => null,
        'wizard' => null,
        'password_type' => null,
        'seller' => null,
        'order' => null,
        'record_type' => null,
        'voucher' => null,
        'voucher_action' => null,
        'voucher_type' => null,
        'number_of_vouchers' => null,
        'email' => null,
        'device_id' => null,
        'device_action' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'from' => false,
        'to' => false,
        'to_principal' => false,
        'payment_type' => false,
        'amount' => false,
        'transaction' => false,
        'transfer' => false,
        'account' => false,
        'installment' => false,
        'failed_occurrence' => false,
        'client' => false,
        'name' => false,
        'type' => false,
        'external_payment_action' => false,
        'scheduled_payment_action' => false,
        'recurring_payment_action' => false,
        'installment_action' => false,
        'failed_occurrence_action' => false,
        'authorization_action' => false,
        'payment_request_action' => false,
        'client_action' => false,
        'operation' => false,
        'wizard' => false,
        'password_type' => false,
        'seller' => false,
        'order' => false,
        'record_type' => false,
        'voucher' => false,
        'voucher_action' => false,
        'voucher_type' => false,
        'number_of_vouchers' => false,
        'email' => false,
        'device_id' => false,
        'device_action' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'from' => 'from',
        'to' => 'to',
        'to_principal' => 'toPrincipal',
        'payment_type' => 'paymentType',
        'amount' => 'amount',
        'transaction' => 'transaction',
        'transfer' => 'transfer',
        'account' => 'account',
        'installment' => 'installment',
        'failed_occurrence' => 'failedOccurrence',
        'client' => 'client',
        'name' => 'name',
        'type' => 'type',
        'external_payment_action' => 'externalPaymentAction',
        'scheduled_payment_action' => 'scheduledPaymentAction',
        'recurring_payment_action' => 'recurringPaymentAction',
        'installment_action' => 'installmentAction',
        'failed_occurrence_action' => 'failedOccurrenceAction',
        'authorization_action' => 'authorizationAction',
        'payment_request_action' => 'paymentRequestAction',
        'client_action' => 'clientAction',
        'operation' => 'operation',
        'wizard' => 'wizard',
        'password_type' => 'passwordType',
        'seller' => 'seller',
        'order' => 'order',
        'record_type' => 'recordType',
        'voucher' => 'voucher',
        'voucher_action' => 'voucherAction',
        'voucher_type' => 'voucherType',
        'number_of_vouchers' => 'numberOfVouchers',
        'email' => 'email',
        'device_id' => 'deviceId',
        'device_action' => 'deviceAction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'from' => 'setFrom',
        'to' => 'setTo',
        'to_principal' => 'setToPrincipal',
        'payment_type' => 'setPaymentType',
        'amount' => 'setAmount',
        'transaction' => 'setTransaction',
        'transfer' => 'setTransfer',
        'account' => 'setAccount',
        'installment' => 'setInstallment',
        'failed_occurrence' => 'setFailedOccurrence',
        'client' => 'setClient',
        'name' => 'setName',
        'type' => 'setType',
        'external_payment_action' => 'setExternalPaymentAction',
        'scheduled_payment_action' => 'setScheduledPaymentAction',
        'recurring_payment_action' => 'setRecurringPaymentAction',
        'installment_action' => 'setInstallmentAction',
        'failed_occurrence_action' => 'setFailedOccurrenceAction',
        'authorization_action' => 'setAuthorizationAction',
        'payment_request_action' => 'setPaymentRequestAction',
        'client_action' => 'setClientAction',
        'operation' => 'setOperation',
        'wizard' => 'setWizard',
        'password_type' => 'setPasswordType',
        'seller' => 'setSeller',
        'order' => 'setOrder',
        'record_type' => 'setRecordType',
        'voucher' => 'setVoucher',
        'voucher_action' => 'setVoucherAction',
        'voucher_type' => 'setVoucherType',
        'number_of_vouchers' => 'setNumberOfVouchers',
        'email' => 'setEmail',
        'device_id' => 'setDeviceId',
        'device_action' => 'setDeviceAction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'from' => 'getFrom',
        'to' => 'getTo',
        'to_principal' => 'getToPrincipal',
        'payment_type' => 'getPaymentType',
        'amount' => 'getAmount',
        'transaction' => 'getTransaction',
        'transfer' => 'getTransfer',
        'account' => 'getAccount',
        'installment' => 'getInstallment',
        'failed_occurrence' => 'getFailedOccurrence',
        'client' => 'getClient',
        'name' => 'getName',
        'type' => 'getType',
        'external_payment_action' => 'getExternalPaymentAction',
        'scheduled_payment_action' => 'getScheduledPaymentAction',
        'recurring_payment_action' => 'getRecurringPaymentAction',
        'installment_action' => 'getInstallmentAction',
        'failed_occurrence_action' => 'getFailedOccurrenceAction',
        'authorization_action' => 'getAuthorizationAction',
        'payment_request_action' => 'getPaymentRequestAction',
        'client_action' => 'getClientAction',
        'operation' => 'getOperation',
        'wizard' => 'getWizard',
        'password_type' => 'getPasswordType',
        'seller' => 'getSeller',
        'order' => 'getOrder',
        'record_type' => 'getRecordType',
        'voucher' => 'getVoucher',
        'voucher_action' => 'getVoucherAction',
        'voucher_type' => 'getVoucherType',
        'number_of_vouchers' => 'getNumberOfVouchers',
        'email' => 'getEmail',
        'device_id' => 'getDeviceId',
        'device_action' => 'getDeviceAction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('from', $data ?? [], null);
        $this->setIfExists('to', $data ?? [], null);
        $this->setIfExists('to_principal', $data ?? [], null);
        $this->setIfExists('payment_type', $data ?? [], null);
        $this->setIfExists('amount', $data ?? [], null);
        $this->setIfExists('transaction', $data ?? [], null);
        $this->setIfExists('transfer', $data ?? [], null);
        $this->setIfExists('account', $data ?? [], null);
        $this->setIfExists('installment', $data ?? [], null);
        $this->setIfExists('failed_occurrence', $data ?? [], null);
        $this->setIfExists('client', $data ?? [], null);
        $this->setIfExists('name', $data ?? [], null);
        $this->setIfExists('type', $data ?? [], null);
        $this->setIfExists('external_payment_action', $data ?? [], null);
        $this->setIfExists('scheduled_payment_action', $data ?? [], null);
        $this->setIfExists('recurring_payment_action', $data ?? [], null);
        $this->setIfExists('installment_action', $data ?? [], null);
        $this->setIfExists('failed_occurrence_action', $data ?? [], null);
        $this->setIfExists('authorization_action', $data ?? [], null);
        $this->setIfExists('payment_request_action', $data ?? [], null);
        $this->setIfExists('client_action', $data ?? [], null);
        $this->setIfExists('operation', $data ?? [], null);
        $this->setIfExists('wizard', $data ?? [], null);
        $this->setIfExists('password_type', $data ?? [], null);
        $this->setIfExists('seller', $data ?? [], null);
        $this->setIfExists('order', $data ?? [], null);
        $this->setIfExists('record_type', $data ?? [], null);
        $this->setIfExists('voucher', $data ?? [], null);
        $this->setIfExists('voucher_action', $data ?? [], null);
        $this->setIfExists('voucher_type', $data ?? [], null);
        $this->setIfExists('number_of_vouchers', $data ?? [], null);
        $this->setIfExists('email', $data ?? [], null);
        $this->setIfExists('device_id', $data ?? [], null);
        $this->setIfExists('device_action', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets from
     *
     * @return string|null
     */
    public function getFrom()
    {
        return $this->container['from'];
    }

    /**
     * Sets from
     *
     * @param string|null $from The payment account owner. Can be one of:  - a user identification value, such as id, username, e-mail, phone, etc.   Id is always allowed, others depend on Cyclos configuration. Note that   a valid numeric value is always considered as id. For example, when   using another identification method that can be numeric only, prefix   the value with a single quote (like in Excel spreadsheets);  - `self` for the currently authenticated user; - `system` for the owner of system accounts.  Required only if type is `performPayment` or `performExternalPayment`.
     *
     * @return self
     */
    public function setFrom($from)
    {
        if (is_null($from)) {
            throw new \InvalidArgumentException('non-nullable from cannot be null');
        }
        $this->container['from'] = $from;

        return $this;
    }

    /**
     * Gets to
     *
     * @return string|null
     */
    public function getTo()
    {
        return $this->container['to'];
    }

    /**
     * Sets to
     *
     * @param string|null $to Same as `from` but for the receiver. Required only if type is `performPayment`.
     *
     * @return self
     */
    public function setTo($to)
    {
        if (is_null($to)) {
            throw new \InvalidArgumentException('non-nullable to cannot be null');
        }
        $this->container['to'] = $to;

        return $this;
    }

    /**
     * Gets to_principal
     *
     * @return string|null
     */
    public function getToPrincipal()
    {
        return $this->container['to_principal'];
    }

    /**
     * Sets to_principal
     *
     * @param string|null $to_principal The receiver of the external payment (email or mobile number). Required only if type is `performExternalPayment`.
     *
     * @return self
     */
    public function setToPrincipal($to_principal)
    {
        if (is_null($to_principal)) {
            throw new \InvalidArgumentException('non-nullable to_principal cannot be null');
        }
        $this->container['to_principal'] = $to_principal;

        return $this;
    }

    /**
     * Gets payment_type
     *
     * @return string|null
     */
    public function getPaymentType()
    {
        return $this->container['payment_type'];
    }

    /**
     * Sets payment_type
     *
     * @param string|null $payment_type The payment type id or qualified internal name (in the form `fromAccountType.paymentType`). Required only if type is `performPayment`, `performExternalPayment`, `shoppingCartCheckout` or `importUserPayments`.
     *
     * @return self
     */
    public function setPaymentType($payment_type)
    {
        if (is_null($payment_type)) {
            throw new \InvalidArgumentException('non-nullable payment_type cannot be null');
        }
        $this->container['payment_type'] = $payment_type;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return float|null
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param float|null $amount The amount involved in the confirmation, its meaning depends on the type. Required only if type is `performPayment`, `performExternalPayment`, `shoppingCartCheckout`, `generateVouchers` or `buyVouchers`.
     *
     * @return self
     */
    public function setAmount($amount)
    {
        if (is_null($amount)) {
            throw new \InvalidArgumentException('non-nullable amount cannot be null');
        }
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return string|null
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param string|null $transaction Either the id or number of the transaction (or ticket number if type is `approveTicket`). Required only if type is `manageAuthorization`, `manageExternalPayment`, `manageScheduledPayment`, `manageRecurringPayment`, `managePaymentRequest` or `approveTicket`.
     *
     * @return self
     */
    public function setTransaction($transaction)
    {
        if (is_null($transaction)) {
            throw new \InvalidArgumentException('non-nullable transaction cannot be null');
        }
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets transfer
     *
     * @return string|null
     */
    public function getTransfer()
    {
        return $this->container['transfer'];
    }

    /**
     * Sets transfer
     *
     * @param string|null $transfer Either the id or number of the transfer. Required only if type is `chargeback`.
     *
     * @return self
     */
    public function setTransfer($transfer)
    {
        if (is_null($transfer)) {
            throw new \InvalidArgumentException('non-nullable transfer cannot be null');
        }
        $this->container['transfer'] = $transfer;

        return $this;
    }

    /**
     * Gets account
     *
     * @return string|null
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param string|null $account Either the id or number of the user account. Required only if type is `changeAccountLimits`.
     *
     * @return self
     */
    public function setAccount($account)
    {
        if (is_null($account)) {
            throw new \InvalidArgumentException('non-nullable account cannot be null');
        }
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets installment
     *
     * @return string|null
     */
    public function getInstallment()
    {
        return $this->container['installment'];
    }

    /**
     * Sets installment
     *
     * @param string|null $installment The id of a scheduled payment installment. Required only if type is `manageInstallment`.
     *
     * @return self
     */
    public function setInstallment($installment)
    {
        if (is_null($installment)) {
            throw new \InvalidArgumentException('non-nullable installment cannot be null');
        }
        $this->container['installment'] = $installment;

        return $this;
    }

    /**
     * Gets failed_occurrence
     *
     * @return string|null
     */
    public function getFailedOccurrence()
    {
        return $this->container['failed_occurrence'];
    }

    /**
     * Sets failed_occurrence
     *
     * @param string|null $failed_occurrence The id of a recurring payment failed occurrence. Required only if type is `manageFailedOccurrence`.
     *
     * @return self
     */
    public function setFailedOccurrence($failed_occurrence)
    {
        if (is_null($failed_occurrence)) {
            throw new \InvalidArgumentException('non-nullable failed_occurrence cannot be null');
        }
        $this->container['failed_occurrence'] = $failed_occurrence;

        return $this;
    }

    /**
     * Gets client
     *
     * @return string|null
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param string|null $client The access client id or token. Required only if type is  `clientAction`.
     *
     * @return self
     */
    public function setClient($client)
    {
        if (is_null($client)) {
            throw new \InvalidArgumentException('non-nullable client cannot be null');
        }
        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name The entity's name for which this confirmation is created for. Required only if type is either `manageAddress`, `managePhone` or `manageContactInfo`.
     *
     * @return self
     */
    public function setName($name)
    {
        if (is_null($name)) {
            throw new \InvalidArgumentException('non-nullable name cannot be null');
        }
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \OpenAPI\Client\Model\DeviceConfirmationTypeEnum|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \OpenAPI\Client\Model\DeviceConfirmationTypeEnum|null $type type
     *
     * @return self
     */
    public function setType($type)
    {
        if (is_null($type)) {
            throw new \InvalidArgumentException('non-nullable type cannot be null');
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets external_payment_action
     *
     * @return \OpenAPI\Client\Model\ExternalPaymentActionEnum|null
     */
    public function getExternalPaymentAction()
    {
        return $this->container['external_payment_action'];
    }

    /**
     * Sets external_payment_action
     *
     * @param \OpenAPI\Client\Model\ExternalPaymentActionEnum|null $external_payment_action external_payment_action
     *
     * @return self
     */
    public function setExternalPaymentAction($external_payment_action)
    {
        if (is_null($external_payment_action)) {
            throw new \InvalidArgumentException('non-nullable external_payment_action cannot be null');
        }
        $this->container['external_payment_action'] = $external_payment_action;

        return $this;
    }

    /**
     * Gets scheduled_payment_action
     *
     * @return \OpenAPI\Client\Model\ScheduledPaymentActionEnum|null
     */
    public function getScheduledPaymentAction()
    {
        return $this->container['scheduled_payment_action'];
    }

    /**
     * Sets scheduled_payment_action
     *
     * @param \OpenAPI\Client\Model\ScheduledPaymentActionEnum|null $scheduled_payment_action scheduled_payment_action
     *
     * @return self
     */
    public function setScheduledPaymentAction($scheduled_payment_action)
    {
        if (is_null($scheduled_payment_action)) {
            throw new \InvalidArgumentException('non-nullable scheduled_payment_action cannot be null');
        }
        $this->container['scheduled_payment_action'] = $scheduled_payment_action;

        return $this;
    }

    /**
     * Gets recurring_payment_action
     *
     * @return \OpenAPI\Client\Model\RecurringPaymentActionEnum|null
     */
    public function getRecurringPaymentAction()
    {
        return $this->container['recurring_payment_action'];
    }

    /**
     * Sets recurring_payment_action
     *
     * @param \OpenAPI\Client\Model\RecurringPaymentActionEnum|null $recurring_payment_action recurring_payment_action
     *
     * @return self
     */
    public function setRecurringPaymentAction($recurring_payment_action)
    {
        if (is_null($recurring_payment_action)) {
            throw new \InvalidArgumentException('non-nullable recurring_payment_action cannot be null');
        }
        $this->container['recurring_payment_action'] = $recurring_payment_action;

        return $this;
    }

    /**
     * Gets installment_action
     *
     * @return \OpenAPI\Client\Model\InstallmentActionEnum|null
     */
    public function getInstallmentAction()
    {
        return $this->container['installment_action'];
    }

    /**
     * Sets installment_action
     *
     * @param \OpenAPI\Client\Model\InstallmentActionEnum|null $installment_action installment_action
     *
     * @return self
     */
    public function setInstallmentAction($installment_action)
    {
        if (is_null($installment_action)) {
            throw new \InvalidArgumentException('non-nullable installment_action cannot be null');
        }
        $this->container['installment_action'] = $installment_action;

        return $this;
    }

    /**
     * Gets failed_occurrence_action
     *
     * @return \OpenAPI\Client\Model\FailedOccurrenceActionEnum|null
     */
    public function getFailedOccurrenceAction()
    {
        return $this->container['failed_occurrence_action'];
    }

    /**
     * Sets failed_occurrence_action
     *
     * @param \OpenAPI\Client\Model\FailedOccurrenceActionEnum|null $failed_occurrence_action failed_occurrence_action
     *
     * @return self
     */
    public function setFailedOccurrenceAction($failed_occurrence_action)
    {
        if (is_null($failed_occurrence_action)) {
            throw new \InvalidArgumentException('non-nullable failed_occurrence_action cannot be null');
        }
        $this->container['failed_occurrence_action'] = $failed_occurrence_action;

        return $this;
    }

    /**
     * Gets authorization_action
     *
     * @return \OpenAPI\Client\Model\AuthorizationActionEnum|null
     */
    public function getAuthorizationAction()
    {
        return $this->container['authorization_action'];
    }

    /**
     * Sets authorization_action
     *
     * @param \OpenAPI\Client\Model\AuthorizationActionEnum|null $authorization_action authorization_action
     *
     * @return self
     */
    public function setAuthorizationAction($authorization_action)
    {
        if (is_null($authorization_action)) {
            throw new \InvalidArgumentException('non-nullable authorization_action cannot be null');
        }
        $this->container['authorization_action'] = $authorization_action;

        return $this;
    }

    /**
     * Gets payment_request_action
     *
     * @return \OpenAPI\Client\Model\PaymentRequestActionEnum|null
     */
    public function getPaymentRequestAction()
    {
        return $this->container['payment_request_action'];
    }

    /**
     * Sets payment_request_action
     *
     * @param \OpenAPI\Client\Model\PaymentRequestActionEnum|null $payment_request_action payment_request_action
     *
     * @return self
     */
    public function setPaymentRequestAction($payment_request_action)
    {
        if (is_null($payment_request_action)) {
            throw new \InvalidArgumentException('non-nullable payment_request_action cannot be null');
        }
        $this->container['payment_request_action'] = $payment_request_action;

        return $this;
    }

    /**
     * Gets client_action
     *
     * @return \OpenAPI\Client\Model\ClientActionEnum|null
     */
    public function getClientAction()
    {
        return $this->container['client_action'];
    }

    /**
     * Sets client_action
     *
     * @param \OpenAPI\Client\Model\ClientActionEnum|null $client_action client_action
     *
     * @return self
     */
    public function setClientAction($client_action)
    {
        if (is_null($client_action)) {
            throw new \InvalidArgumentException('non-nullable client_action cannot be null');
        }
        $this->container['client_action'] = $client_action;

        return $this;
    }

    /**
     * Gets operation
     *
     * @return string|null
     */
    public function getOperation()
    {
        return $this->container['operation'];
    }

    /**
     * Sets operation
     *
     * @param string|null $operation Either the id or internal name of the custom operation being executed. Required only if type is `runOperation`.
     *
     * @return self
     */
    public function setOperation($operation)
    {
        if (is_null($operation)) {
            throw new \InvalidArgumentException('non-nullable operation cannot be null');
        }
        $this->container['operation'] = $operation;

        return $this;
    }

    /**
     * Gets wizard
     *
     * @return string|null
     */
    public function getWizard()
    {
        return $this->container['wizard'];
    }

    /**
     * Sets wizard
     *
     * @param string|null $wizard Either the id or internal name of the custom wizard being executed. Required only if type is `runWizard`.
     *
     * @return self
     */
    public function setWizard($wizard)
    {
        if (is_null($wizard)) {
            throw new \InvalidArgumentException('non-nullable wizard cannot be null');
        }
        $this->container['wizard'] = $wizard;

        return $this;
    }

    /**
     * Gets password_type
     *
     * @return string|null
     */
    public function getPasswordType()
    {
        return $this->container['password_type'];
    }

    /**
     * Sets password_type
     *
     * @param string|null $password_type Either the id or internal name of the password type being e generatated. Required only if type is `generatePassword`.
     *
     * @return self
     */
    public function setPasswordType($password_type)
    {
        if (is_null($password_type)) {
            throw new \InvalidArgumentException('non-nullable password_type cannot be null');
        }
        $this->container['password_type'] = $password_type;

        return $this;
    }

    /**
     * Gets seller
     *
     * @return string|null
     */
    public function getSeller()
    {
        return $this->container['seller'];
    }

    /**
     * Sets seller
     *
     * @param string|null $seller The order seller. Can be one a user identification value, such as id, username, e-mail, phone, etc. Id is always allowed, others depend on Cyclos configuration. Note that a valid numeric value is always considered as id. For example, when using another identification method that can be numeric only, prefix the value with a single quote (like in Excel spreadsheets); Required only if type is `shoppingCartCheckout`.
     *
     * @return self
     */
    public function setSeller($seller)
    {
        if (is_null($seller)) {
            throw new \InvalidArgumentException('non-nullable seller cannot be null');
        }
        $this->container['seller'] = $seller;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string|null $order Either the id or number of an webshop order. Required only if type is `acceptOrder`.
     *
     * @return self
     */
    public function setOrder($order)
    {
        if (is_null($order)) {
            throw new \InvalidArgumentException('non-nullable order cannot be null');
        }
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets record_type
     *
     * @return string|null
     */
    public function getRecordType()
    {
        return $this->container['record_type'];
    }

    /**
     * Sets record_type
     *
     * @param string|null $record_type Either the id or internal name of a record type. Required only if type is `manageRecord`.
     *
     * @return self
     */
    public function setRecordType($record_type)
    {
        if (is_null($record_type)) {
            throw new \InvalidArgumentException('non-nullable record_type cannot be null');
        }
        $this->container['record_type'] = $record_type;

        return $this;
    }

    /**
     * Gets voucher
     *
     * @return string|null
     */
    public function getVoucher()
    {
        return $this->container['voucher'];
    }

    /**
     * Sets voucher
     *
     * @param string|null $voucher The voucher id or token. Required only if type is  `manageVoucher`.
     *
     * @return self
     */
    public function setVoucher($voucher)
    {
        if (is_null($voucher)) {
            throw new \InvalidArgumentException('non-nullable voucher cannot be null');
        }
        $this->container['voucher'] = $voucher;

        return $this;
    }

    /**
     * Gets voucher_action
     *
     * @return \OpenAPI\Client\Model\VoucherActionEnum|null
     */
    public function getVoucherAction()
    {
        return $this->container['voucher_action'];
    }

    /**
     * Sets voucher_action
     *
     * @param \OpenAPI\Client\Model\VoucherActionEnum|null $voucher_action voucher_action
     *
     * @return self
     */
    public function setVoucherAction($voucher_action)
    {
        if (is_null($voucher_action)) {
            throw new \InvalidArgumentException('non-nullable voucher_action cannot be null');
        }
        $this->container['voucher_action'] = $voucher_action;

        return $this;
    }

    /**
     * Gets voucher_type
     *
     * @return string|null
     */
    public function getVoucherType()
    {
        return $this->container['voucher_type'];
    }

    /**
     * Sets voucher_type
     *
     * @param string|null $voucher_type Either the id or internal name of a voucher type. Required only if type is `generateVouchers`, `buyVouchers`, `sendVoucher` or `importUserSendVouchers`.
     *
     * @return self
     */
    public function setVoucherType($voucher_type)
    {
        if (is_null($voucher_type)) {
            throw new \InvalidArgumentException('non-nullable voucher_type cannot be null');
        }
        $this->container['voucher_type'] = $voucher_type;

        return $this;
    }

    /**
     * Gets number_of_vouchers
     *
     * @return int|null
     */
    public function getNumberOfVouchers()
    {
        return $this->container['number_of_vouchers'];
    }

    /**
     * Sets number_of_vouchers
     *
     * @param int|null $number_of_vouchers The number of vouchers to be generated. Required only if type is `generateVouchers` or `buyVouchers`.
     *
     * @return self
     */
    public function setNumberOfVouchers($number_of_vouchers)
    {
        if (is_null($number_of_vouchers)) {
            throw new \InvalidArgumentException('non-nullable number_of_vouchers cannot be null');
        }
        $this->container['number_of_vouchers'] = $number_of_vouchers;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string|null
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string|null $email The e-mail to which the voucher will be sent. Required only if type is `sendVoucher`.
     *
     * @return self
     */
    public function setEmail($email)
    {
        if (is_null($email)) {
            throw new \InvalidArgumentException('non-nullable email cannot be null');
        }
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets device_id
     *
     * @return string|null
     */
    public function getDeviceId()
    {
        return $this->container['device_id'];
    }

    /**
     * Sets device_id
     *
     * @param string|null $device_id The id of a device. Required only if type is `manageDevice`.
     *
     * @return self
     */
    public function setDeviceId($device_id)
    {
        if (is_null($device_id)) {
            throw new \InvalidArgumentException('non-nullable device_id cannot be null');
        }
        $this->container['device_id'] = $device_id;

        return $this;
    }

    /**
     * Gets device_action
     *
     * @return \OpenAPI\Client\Model\DeviceActionEnum|null
     */
    public function getDeviceAction()
    {
        return $this->container['device_action'];
    }

    /**
     * Sets device_action
     *
     * @param \OpenAPI\Client\Model\DeviceActionEnum|null $device_action device_action
     *
     * @return self
     */
    public function setDeviceAction($device_action)
    {
        if (is_null($device_action)) {
            throw new \InvalidArgumentException('non-nullable device_action cannot be null');
        }
        $this->container['device_action'] = $device_action;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


