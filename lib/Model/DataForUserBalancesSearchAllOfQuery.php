<?php
/**
 * DataForUserBalancesSearchAllOfQuery
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DataForUserBalancesSearchAllOfQuery Class Doc Comment
 *
 * @category Class
 * @description Default query parameters
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class DataForUserBalancesSearchAllOfQuery implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'DataForUserBalancesSearch_allOf_query';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'page' => 'int',
        'page_size' => 'int',
        'skip_total_count' => 'bool',
        'keywords' => 'string',
        'profile_fields' => 'string[]',
        'latitude' => 'float',
        'longitude' => 'float',
        'max_distance' => 'float',
        'ignore_profile_fields_in_list' => 'bool',
        'users_to_exclude' => 'string[]',
        'users_to_include' => 'string[]',
        'include_global' => 'bool',
        'invited_by' => 'string',
        'activation_period' => '\DateTime[]',
        'creation_period' => '\DateTime[]',
        'last_login_period' => '\DateTime[]',
        'groups' => 'string[]',
        'products' => 'string[]',
        'products_individually_assigned' => 'bool',
        'brokers' => 'string[]',
        'main_broker_only' => 'bool',
        'has_broker' => 'bool',
        'accepted_agreements' => 'string[]',
        'not_accepted_agreements' => 'string[]',
        'include_group' => 'bool',
        'include_group_set' => 'bool',
        'address_result' => '\OpenAPI\Client\Model\UserAddressResultEnum',
        'statuses' => '\OpenAPI\Client\Model\UserStatusEnum[]',
        'account_type' => 'string',
        'balance_range' => 'float[]',
        'negative_since_period' => '\DateTime[]',
        'medium_balance_range' => 'int[]',
        'order_by' => '\OpenAPI\Client\Model\UsersWithBalanceOrderByEnum'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'page' => null,
        'page_size' => null,
        'skip_total_count' => null,
        'keywords' => null,
        'profile_fields' => null,
        'latitude' => 'double',
        'longitude' => 'double',
        'max_distance' => 'double',
        'ignore_profile_fields_in_list' => null,
        'users_to_exclude' => null,
        'users_to_include' => null,
        'include_global' => null,
        'invited_by' => null,
        'activation_period' => 'date-time',
        'creation_period' => 'date-time',
        'last_login_period' => 'date-time',
        'groups' => null,
        'products' => null,
        'products_individually_assigned' => null,
        'brokers' => null,
        'main_broker_only' => null,
        'has_broker' => null,
        'accepted_agreements' => null,
        'not_accepted_agreements' => null,
        'include_group' => null,
        'include_group_set' => null,
        'address_result' => null,
        'statuses' => null,
        'account_type' => null,
        'balance_range' => 'number',
        'negative_since_period' => 'date-time',
        'medium_balance_range' => null,
        'order_by' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'page' => false,
        'page_size' => false,
        'skip_total_count' => false,
        'keywords' => false,
        'profile_fields' => false,
        'latitude' => false,
        'longitude' => false,
        'max_distance' => false,
        'ignore_profile_fields_in_list' => false,
        'users_to_exclude' => false,
        'users_to_include' => false,
        'include_global' => false,
        'invited_by' => false,
        'activation_period' => false,
        'creation_period' => false,
        'last_login_period' => false,
        'groups' => false,
        'products' => false,
        'products_individually_assigned' => false,
        'brokers' => false,
        'main_broker_only' => false,
        'has_broker' => false,
        'accepted_agreements' => false,
        'not_accepted_agreements' => false,
        'include_group' => false,
        'include_group_set' => false,
        'address_result' => false,
        'statuses' => false,
        'account_type' => false,
        'balance_range' => false,
        'negative_since_period' => false,
        'medium_balance_range' => false,
        'order_by' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'page' => 'page',
        'page_size' => 'pageSize',
        'skip_total_count' => 'skipTotalCount',
        'keywords' => 'keywords',
        'profile_fields' => 'profileFields',
        'latitude' => 'latitude',
        'longitude' => 'longitude',
        'max_distance' => 'maxDistance',
        'ignore_profile_fields_in_list' => 'ignoreProfileFieldsInList',
        'users_to_exclude' => 'usersToExclude',
        'users_to_include' => 'usersToInclude',
        'include_global' => 'includeGlobal',
        'invited_by' => 'invitedBy',
        'activation_period' => 'activationPeriod',
        'creation_period' => 'creationPeriod',
        'last_login_period' => 'lastLoginPeriod',
        'groups' => 'groups',
        'products' => 'products',
        'products_individually_assigned' => 'productsIndividuallyAssigned',
        'brokers' => 'brokers',
        'main_broker_only' => 'mainBrokerOnly',
        'has_broker' => 'hasBroker',
        'accepted_agreements' => 'acceptedAgreements',
        'not_accepted_agreements' => 'notAcceptedAgreements',
        'include_group' => 'includeGroup',
        'include_group_set' => 'includeGroupSet',
        'address_result' => 'addressResult',
        'statuses' => 'statuses',
        'account_type' => 'accountType',
        'balance_range' => 'balanceRange',
        'negative_since_period' => 'negativeSincePeriod',
        'medium_balance_range' => 'mediumBalanceRange',
        'order_by' => 'orderBy'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'page' => 'setPage',
        'page_size' => 'setPageSize',
        'skip_total_count' => 'setSkipTotalCount',
        'keywords' => 'setKeywords',
        'profile_fields' => 'setProfileFields',
        'latitude' => 'setLatitude',
        'longitude' => 'setLongitude',
        'max_distance' => 'setMaxDistance',
        'ignore_profile_fields_in_list' => 'setIgnoreProfileFieldsInList',
        'users_to_exclude' => 'setUsersToExclude',
        'users_to_include' => 'setUsersToInclude',
        'include_global' => 'setIncludeGlobal',
        'invited_by' => 'setInvitedBy',
        'activation_period' => 'setActivationPeriod',
        'creation_period' => 'setCreationPeriod',
        'last_login_period' => 'setLastLoginPeriod',
        'groups' => 'setGroups',
        'products' => 'setProducts',
        'products_individually_assigned' => 'setProductsIndividuallyAssigned',
        'brokers' => 'setBrokers',
        'main_broker_only' => 'setMainBrokerOnly',
        'has_broker' => 'setHasBroker',
        'accepted_agreements' => 'setAcceptedAgreements',
        'not_accepted_agreements' => 'setNotAcceptedAgreements',
        'include_group' => 'setIncludeGroup',
        'include_group_set' => 'setIncludeGroupSet',
        'address_result' => 'setAddressResult',
        'statuses' => 'setStatuses',
        'account_type' => 'setAccountType',
        'balance_range' => 'setBalanceRange',
        'negative_since_period' => 'setNegativeSincePeriod',
        'medium_balance_range' => 'setMediumBalanceRange',
        'order_by' => 'setOrderBy'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'page' => 'getPage',
        'page_size' => 'getPageSize',
        'skip_total_count' => 'getSkipTotalCount',
        'keywords' => 'getKeywords',
        'profile_fields' => 'getProfileFields',
        'latitude' => 'getLatitude',
        'longitude' => 'getLongitude',
        'max_distance' => 'getMaxDistance',
        'ignore_profile_fields_in_list' => 'getIgnoreProfileFieldsInList',
        'users_to_exclude' => 'getUsersToExclude',
        'users_to_include' => 'getUsersToInclude',
        'include_global' => 'getIncludeGlobal',
        'invited_by' => 'getInvitedBy',
        'activation_period' => 'getActivationPeriod',
        'creation_period' => 'getCreationPeriod',
        'last_login_period' => 'getLastLoginPeriod',
        'groups' => 'getGroups',
        'products' => 'getProducts',
        'products_individually_assigned' => 'getProductsIndividuallyAssigned',
        'brokers' => 'getBrokers',
        'main_broker_only' => 'getMainBrokerOnly',
        'has_broker' => 'getHasBroker',
        'accepted_agreements' => 'getAcceptedAgreements',
        'not_accepted_agreements' => 'getNotAcceptedAgreements',
        'include_group' => 'getIncludeGroup',
        'include_group_set' => 'getIncludeGroupSet',
        'address_result' => 'getAddressResult',
        'statuses' => 'getStatuses',
        'account_type' => 'getAccountType',
        'balance_range' => 'getBalanceRange',
        'negative_since_period' => 'getNegativeSincePeriod',
        'medium_balance_range' => 'getMediumBalanceRange',
        'order_by' => 'getOrderBy'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('page', $data ?? [], null);
        $this->setIfExists('page_size', $data ?? [], null);
        $this->setIfExists('skip_total_count', $data ?? [], null);
        $this->setIfExists('keywords', $data ?? [], null);
        $this->setIfExists('profile_fields', $data ?? [], null);
        $this->setIfExists('latitude', $data ?? [], null);
        $this->setIfExists('longitude', $data ?? [], null);
        $this->setIfExists('max_distance', $data ?? [], null);
        $this->setIfExists('ignore_profile_fields_in_list', $data ?? [], null);
        $this->setIfExists('users_to_exclude', $data ?? [], null);
        $this->setIfExists('users_to_include', $data ?? [], null);
        $this->setIfExists('include_global', $data ?? [], null);
        $this->setIfExists('invited_by', $data ?? [], null);
        $this->setIfExists('activation_period', $data ?? [], null);
        $this->setIfExists('creation_period', $data ?? [], null);
        $this->setIfExists('last_login_period', $data ?? [], null);
        $this->setIfExists('groups', $data ?? [], null);
        $this->setIfExists('products', $data ?? [], null);
        $this->setIfExists('products_individually_assigned', $data ?? [], null);
        $this->setIfExists('brokers', $data ?? [], null);
        $this->setIfExists('main_broker_only', $data ?? [], null);
        $this->setIfExists('has_broker', $data ?? [], null);
        $this->setIfExists('accepted_agreements', $data ?? [], null);
        $this->setIfExists('not_accepted_agreements', $data ?? [], null);
        $this->setIfExists('include_group', $data ?? [], null);
        $this->setIfExists('include_group_set', $data ?? [], null);
        $this->setIfExists('address_result', $data ?? [], null);
        $this->setIfExists('statuses', $data ?? [], null);
        $this->setIfExists('account_type', $data ?? [], null);
        $this->setIfExists('balance_range', $data ?? [], null);
        $this->setIfExists('negative_since_period', $data ?? [], null);
        $this->setIfExists('medium_balance_range', $data ?? [], null);
        $this->setIfExists('order_by', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['account_type'] === null) {
            $invalidProperties[] = "'account_type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets page
     *
     * @return int|null
     */
    public function getPage()
    {
        return $this->container['page'];
    }

    /**
     * Sets page
     *
     * @param int|null $page The page number (zero-based) of the search. The default value is zero.
     *
     * @return self
     */
    public function setPage($page)
    {
        if (is_null($page)) {
            throw new \InvalidArgumentException('non-nullable page cannot be null');
        }
        $this->container['page'] = $page;

        return $this;
    }

    /**
     * Gets page_size
     *
     * @return int|null
     */
    public function getPageSize()
    {
        return $this->container['page_size'];
    }

    /**
     * Sets page_size
     *
     * @param int|null $page_size The maximum number of records that will be returned on the search. The default value is 40. The maximum number of returned results is configured in Cyclos, and even if more than that is requested, it will be limited by that setting.
     *
     * @return self
     */
    public function setPageSize($page_size)
    {
        if (is_null($page_size)) {
            throw new \InvalidArgumentException('non-nullable page_size cannot be null');
        }
        $this->container['page_size'] = $page_size;

        return $this;
    }

    /**
     * Gets skip_total_count
     *
     * @return bool|null
     */
    public function getSkipTotalCount()
    {
        return $this->container['skip_total_count'];
    }

    /**
     * Sets skip_total_count
     *
     * @param bool|null $skip_total_count When set to true the result will not include the total record count, only the information on whether there are more records. Depending on the server-side configuration, this can be always true. Otherwise, if the server allows total count, and the client doesn't need it, setting this to true can increase performance a bit.
     *
     * @return self
     */
    public function setSkipTotalCount($skip_total_count)
    {
        if (is_null($skip_total_count)) {
            throw new \InvalidArgumentException('non-nullable skip_total_count cannot be null');
        }
        $this->container['skip_total_count'] = $skip_total_count;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return string|null
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param string|null $keywords Textual search keywords. Sometimes, like in user search, the fields matched depends on what is configured on the products.
     *
     * @return self
     */
    public function setKeywords($keywords)
    {
        if (is_null($keywords)) {
            throw new \InvalidArgumentException('non-nullable keywords cannot be null');
        }
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets profile_fields
     *
     * @return string[]|null
     */
    public function getProfileFields()
    {
        return $this->container['profile_fields'];
    }

    /**
     * Sets profile_fields
     *
     * @param string[]|null $profile_fields User profile fields, both basic (full name, login name, phone, e-mail, etc) and custom fields, that are used for search. Is a comma-separated array, where each part consists in two parts: the internal name (or custom field id) of the field, and a value, both separated by `:` (colon). For example, `profileFields=field1:value1,field2:value2`. Sometimes multiple values are accepted. In this case, the multiple values are separated by pipes. For example, `profileFields=field1:valueA|valueB`. The accepted fields depend on the products the authenticated user has. Enumerated fields accept multiple values, while numeric and date fields also accept ranges, which are two values, pipe-separated. For example, `profileFields=rank:bronze|silver,birthDate:2000-01-01|2001-12-31` would match results whose custom field with internal name 'rank' is either bronze or silver, and whose 'birthDate' is between January 1, 2000 and December 31, 2001. To specify a single bound in ranges (like birth dates before December 31, 2001), use a pipe in one of the values, like `profileFields=birthDate:|2001-12-31`.  The basic profile fields have one of the following identifiers:  - `name` or `fullName`: Full name; - `username`, `loginName` or `login`: Login name; - `email`: E-mail; - `phone`: Phone; - `accountNumber`, `account`: Account number; - `image`: Image (accepts a boolean value, indicating that either   it is required that users either have images or not).   If address is an allowed profile field for search, specific address fields may be searched. The allowed ones are normally returned as the `addressFieldsInSearch` field in the corresponding result from a data-for-search request. The specific address fields are:  - `address`: Searches on any address field (not a specific field); - `address.address`: Searches on the fields that represent the   street address, which are `addressLine1`,   `addressLine2`,   `street`,   `buildingNumber` and   `complement`.   Note that normally only a subset of them should be enabled in the   configuration (either line 1 / 2 or street + number + complement);  - `address.zip`: Searches for matching zip (postal) code; - `address.poBox`: Searches for matching postal box; - `address.neighborhood`: Searches by neighborhood; - `address.city`: Searches by city; - `address.region`: Searches by region (or state); - `address.country`: Searches by ISO 3166-1 alpha-2 country code. A note for dynamic custom fields: If a script is used to generate possible values for search, the list will be returned in the corresponding data, and it is sent as a pipe-separated list of values (not labels). For example: `profileFields=dynamic:a|b|c`. However, it is also possible to perform a keywords-like (full-text) search using the dynamic value label. In this case a single value, prefixed by single quotes should be used. For example: `profileFields=dynamic:'business`.
     *
     * @return self
     */
    public function setProfileFields($profile_fields)
    {
        if (is_null($profile_fields)) {
            throw new \InvalidArgumentException('non-nullable profile_fields cannot be null');
        }
        $this->container['profile_fields'] = $profile_fields;

        return $this;
    }

    /**
     * Gets latitude
     *
     * @return float|null
     */
    public function getLatitude()
    {
        return $this->container['latitude'];
    }

    /**
     * Sets latitude
     *
     * @param float|null $latitude The reference latitude for distance searches
     *
     * @return self
     */
    public function setLatitude($latitude)
    {
        if (is_null($latitude)) {
            throw new \InvalidArgumentException('non-nullable latitude cannot be null');
        }
        $this->container['latitude'] = $latitude;

        return $this;
    }

    /**
     * Gets longitude
     *
     * @return float|null
     */
    public function getLongitude()
    {
        return $this->container['longitude'];
    }

    /**
     * Sets longitude
     *
     * @param float|null $longitude The reference longitude for distance searches
     *
     * @return self
     */
    public function setLongitude($longitude)
    {
        if (is_null($longitude)) {
            throw new \InvalidArgumentException('non-nullable longitude cannot be null');
        }
        $this->container['longitude'] = $longitude;

        return $this;
    }

    /**
     * Gets max_distance
     *
     * @return float|null
     */
    public function getMaxDistance()
    {
        return $this->container['max_distance'];
    }

    /**
     * Sets max_distance
     *
     * @param float|null $max_distance Maximum straight-line distance between the informed location and the resulting address. Is measured either in kilometers or miles, depending on the configuration. Only accepted if both `longitude` and `latitude` parameters are passed with the actual reference position.
     *
     * @return self
     */
    public function setMaxDistance($max_distance)
    {
        if (is_null($max_distance)) {
            throw new \InvalidArgumentException('non-nullable max_distance cannot be null');
        }
        $this->container['max_distance'] = $max_distance;

        return $this;
    }

    /**
     * Gets ignore_profile_fields_in_list
     *
     * @return bool|null
     */
    public function getIgnoreProfileFieldsInList()
    {
        return $this->container['ignore_profile_fields_in_list'];
    }

    /**
     * Sets ignore_profile_fields_in_list
     *
     * @param bool|null $ignore_profile_fields_in_list When set to `true`, instead of returning users with corresponding profile fields set on list, will return them with `display`.
     *
     * @return self
     */
    public function setIgnoreProfileFieldsInList($ignore_profile_fields_in_list)
    {
        if (is_null($ignore_profile_fields_in_list)) {
            throw new \InvalidArgumentException('non-nullable ignore_profile_fields_in_list cannot be null');
        }
        $this->container['ignore_profile_fields_in_list'] = $ignore_profile_fields_in_list;

        return $this;
    }

    /**
     * Gets users_to_exclude
     *
     * @return string[]|null
     */
    public function getUsersToExclude()
    {
        return $this->container['users_to_exclude'];
    }

    /**
     * Sets users_to_exclude
     *
     * @param string[]|null $users_to_exclude Indicated the users to be excluded from the result
     *
     * @return self
     */
    public function setUsersToExclude($users_to_exclude)
    {
        if (is_null($users_to_exclude)) {
            throw new \InvalidArgumentException('non-nullable users_to_exclude cannot be null');
        }
        $this->container['users_to_exclude'] = $users_to_exclude;

        return $this;
    }

    /**
     * Gets users_to_include
     *
     * @return string[]|null
     */
    public function getUsersToInclude()
    {
        return $this->container['users_to_include'];
    }

    /**
     * Sets users_to_include
     *
     * @param string[]|null $users_to_include Indicated the users to be included in the result.  Any other user not present in this list will be excluded from the result.
     *
     * @return self
     */
    public function setUsersToInclude($users_to_include)
    {
        if (is_null($users_to_include)) {
            throw new \InvalidArgumentException('non-nullable users_to_include cannot be null');
        }
        $this->container['users_to_include'] = $users_to_include;

        return $this;
    }

    /**
     * Gets include_global
     *
     * @return bool|null
     */
    public function getIncludeGlobal()
    {
        return $this->container['include_global'];
    }

    /**
     * Sets include_global
     *
     * @param bool|null $include_global Indicates whether global administrators should be returned when searching users in a network. Only usable by global administrators.
     *
     * @return self
     */
    public function setIncludeGlobal($include_global)
    {
        if (is_null($include_global)) {
            throw new \InvalidArgumentException('non-nullable include_global cannot be null');
        }
        $this->container['include_global'] = $include_global;

        return $this;
    }

    /**
     * Gets invited_by
     *
     * @return string|null
     */
    public function getInvitedBy()
    {
        return $this->container['invited_by'];
    }

    /**
     * Sets invited_by
     *
     * @param string|null $invited_by The user that has invited the returned users. Only used when searching as a manager (admin / broker).
     *
     * @return self
     */
    public function setInvitedBy($invited_by)
    {
        if (is_null($invited_by)) {
            throw new \InvalidArgumentException('non-nullable invited_by cannot be null');
        }
        $this->container['invited_by'] = $invited_by;

        return $this;
    }

    /**
     * Gets activation_period
     *
     * @return \DateTime[]|null
     */
    public function getActivationPeriod()
    {
        return $this->container['activation_period'];
    }

    /**
     * Sets activation_period
     *
     * @param \DateTime[]|null $activation_period The minimum / maximum user activation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return self
     */
    public function setActivationPeriod($activation_period)
    {
        if (is_null($activation_period)) {
            throw new \InvalidArgumentException('non-nullable activation_period cannot be null');
        }
        $this->container['activation_period'] = $activation_period;

        return $this;
    }

    /**
     * Gets creation_period
     *
     * @return \DateTime[]|null
     */
    public function getCreationPeriod()
    {
        return $this->container['creation_period'];
    }

    /**
     * Sets creation_period
     *
     * @param \DateTime[]|null $creation_period The minimum / maximum user creation date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return self
     */
    public function setCreationPeriod($creation_period)
    {
        if (is_null($creation_period)) {
            throw new \InvalidArgumentException('non-nullable creation_period cannot be null');
        }
        $this->container['creation_period'] = $creation_period;

        return $this;
    }

    /**
     * Gets last_login_period
     *
     * @return \DateTime[]|null
     */
    public function getLastLoginPeriod()
    {
        return $this->container['last_login_period'];
    }

    /**
     * Sets last_login_period
     *
     * @param \DateTime[]|null $last_login_period The minimum / maximum user last login date. Only taken into account if searching as administrator or managing broker. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return self
     */
    public function setLastLoginPeriod($last_login_period)
    {
        if (is_null($last_login_period)) {
            throw new \InvalidArgumentException('non-nullable last_login_period cannot be null');
        }
        $this->container['last_login_period'] = $last_login_period;

        return $this;
    }

    /**
     * Gets groups
     *
     * @return string[]|null
     */
    public function getGroups()
    {
        return $this->container['groups'];
    }

    /**
     * Sets groups
     *
     * @param string[]|null $groups Either id or internal names of groups / group sets
     *
     * @return self
     */
    public function setGroups($groups)
    {
        if (is_null($groups)) {
            throw new \InvalidArgumentException('non-nullable groups cannot be null');
        }
        $this->container['groups'] = $groups;

        return $this;
    }

    /**
     * Gets products
     *
     * @return string[]|null
     */
    public function getProducts()
    {
        return $this->container['products'];
    }

    /**
     * Sets products
     *
     * @param string[]|null $products Either id or internal names of products the users should have assigned. Ignored if the authenticated user isn't an administrator.
     *
     * @return self
     */
    public function setProducts($products)
    {
        if (is_null($products)) {
            throw new \InvalidArgumentException('non-nullable products cannot be null');
        }
        $this->container['products'] = $products;

        return $this;
    }

    /**
     * Gets products_individually_assigned
     *
     * @return bool|null
     */
    public function getProductsIndividuallyAssigned()
    {
        return $this->container['products_individually_assigned'];
    }

    /**
     * Sets products_individually_assigned
     *
     * @param bool|null $products_individually_assigned When set to `true`, the list specifid in `products` will only match users with those products assigned individually, not via group or group set. When set to `false` (default), the products will match any level (individual, group or group set).
     *
     * @return self
     */
    public function setProductsIndividuallyAssigned($products_individually_assigned)
    {
        if (is_null($products_individually_assigned)) {
            throw new \InvalidArgumentException('non-nullable products_individually_assigned cannot be null');
        }
        $this->container['products_individually_assigned'] = $products_individually_assigned;

        return $this;
    }

    /**
     * Gets brokers
     *
     * @return string[]|null
     */
    public function getBrokers()
    {
        return $this->container['brokers'];
    }

    /**
     * Sets brokers
     *
     * @param string[]|null $brokers Either id or a principal (login name, e-mail, etc) for brokers
     *
     * @return self
     */
    public function setBrokers($brokers)
    {
        if (is_null($brokers)) {
            throw new \InvalidArgumentException('non-nullable brokers cannot be null');
        }
        $this->container['brokers'] = $brokers;

        return $this;
    }

    /**
     * Gets main_broker_only
     *
     * @return bool|null
     */
    public function getMainBrokerOnly()
    {
        return $this->container['main_broker_only'];
    }

    /**
     * Sets main_broker_only
     *
     * @param bool|null $main_broker_only When set to `true`, will match only users that have the brokers as set in the `brokers` parameter as main broker.
     *
     * @return self
     */
    public function setMainBrokerOnly($main_broker_only)
    {
        if (is_null($main_broker_only)) {
            throw new \InvalidArgumentException('non-nullable main_broker_only cannot be null');
        }
        $this->container['main_broker_only'] = $main_broker_only;

        return $this;
    }

    /**
     * Gets has_broker
     *
     * @return bool|null
     */
    public function getHasBroker()
    {
        return $this->container['has_broker'];
    }

    /**
     * Sets has_broker
     *
     * @param bool|null $has_broker When set to `true`, will match only users that have at least one broker. When set to `false`, will will match only users without brokers. Ignored if the logged user isn't an admin.
     *
     * @return self
     */
    public function setHasBroker($has_broker)
    {
        if (is_null($has_broker)) {
            throw new \InvalidArgumentException('non-nullable has_broker cannot be null');
        }
        $this->container['has_broker'] = $has_broker;

        return $this;
    }

    /**
     * Gets accepted_agreements
     *
     * @return string[]|null
     */
    public function getAcceptedAgreements()
    {
        return $this->container['accepted_agreements'];
    }

    /**
     * Sets accepted_agreements
     *
     * @param string[]|null $accepted_agreements Either id or internal names of agreements the user must have accepted. Ignored if the logged user isn't an admin or broker with permission to view the user agreement log.
     *
     * @return self
     */
    public function setAcceptedAgreements($accepted_agreements)
    {
        if (is_null($accepted_agreements)) {
            throw new \InvalidArgumentException('non-nullable accepted_agreements cannot be null');
        }
        $this->container['accepted_agreements'] = $accepted_agreements;

        return $this;
    }

    /**
     * Gets not_accepted_agreements
     *
     * @return string[]|null
     */
    public function getNotAcceptedAgreements()
    {
        return $this->container['not_accepted_agreements'];
    }

    /**
     * Sets not_accepted_agreements
     *
     * @param string[]|null $not_accepted_agreements Either id or internal names of agreements the user must not have accepted. Ignored if the logged user isn't an admin or broker with permission to view the user agreement log.
     *
     * @return self
     */
    public function setNotAcceptedAgreements($not_accepted_agreements)
    {
        if (is_null($not_accepted_agreements)) {
            throw new \InvalidArgumentException('non-nullable not_accepted_agreements cannot be null');
        }
        $this->container['not_accepted_agreements'] = $not_accepted_agreements;

        return $this;
    }

    /**
     * Gets include_group
     *
     * @return bool|null
     */
    public function getIncludeGroup()
    {
        return $this->container['include_group'];
    }

    /**
     * Sets include_group
     *
     * @param bool|null $include_group When set to `true` and the logged user has permission to view user groups, will return the `group` property on users.
     *
     * @return self
     */
    public function setIncludeGroup($include_group)
    {
        if (is_null($include_group)) {
            throw new \InvalidArgumentException('non-nullable include_group cannot be null');
        }
        $this->container['include_group'] = $include_group;

        return $this;
    }

    /**
     * Gets include_group_set
     *
     * @return bool|null
     */
    public function getIncludeGroupSet()
    {
        return $this->container['include_group_set'];
    }

    /**
     * Sets include_group_set
     *
     * @param bool|null $include_group_set When set to `true` and the logged user has permission to view user group sets, will return the `groupSet` property on users.
     *
     * @return self
     */
    public function setIncludeGroupSet($include_group_set)
    {
        if (is_null($include_group_set)) {
            throw new \InvalidArgumentException('non-nullable include_group_set cannot be null');
        }
        $this->container['include_group_set'] = $include_group_set;

        return $this;
    }

    /**
     * Gets address_result
     *
     * @return \OpenAPI\Client\Model\UserAddressResultEnum|null
     */
    public function getAddressResult()
    {
        return $this->container['address_result'];
    }

    /**
     * Sets address_result
     *
     * @param \OpenAPI\Client\Model\UserAddressResultEnum|null $address_result address_result
     *
     * @return self
     */
    public function setAddressResult($address_result)
    {
        if (is_null($address_result)) {
            throw new \InvalidArgumentException('non-nullable address_result cannot be null');
        }
        $this->container['address_result'] = $address_result;

        return $this;
    }

    /**
     * Gets statuses
     *
     * @return \OpenAPI\Client\Model\UserStatusEnum[]|null
     */
    public function getStatuses()
    {
        return $this->container['statuses'];
    }

    /**
     * Sets statuses
     *
     * @param \OpenAPI\Client\Model\UserStatusEnum[]|null $statuses The possible status of the user. If no status is given, `active` and `blocked` users are returned.
     *
     * @return self
     */
    public function setStatuses($statuses)
    {
        if (is_null($statuses)) {
            throw new \InvalidArgumentException('non-nullable statuses cannot be null');
        }
        $this->container['statuses'] = $statuses;

        return $this;
    }

    /**
     * Gets account_type
     *
     * @return string
     */
    public function getAccountType()
    {
        return $this->container['account_type'];
    }

    /**
     * Sets account_type
     *
     * @param string $account_type The account type
     *
     * @return self
     */
    public function setAccountType($account_type)
    {
        if (is_null($account_type)) {
            throw new \InvalidArgumentException('non-nullable account_type cannot be null');
        }
        $this->container['account_type'] = $account_type;

        return $this;
    }

    /**
     * Gets balance_range
     *
     * @return float[]|null
     */
    public function getBalanceRange()
    {
        return $this->container['balance_range'];
    }

    /**
     * Sets balance_range
     *
     * @param float[]|null $balance_range The minimum and / or maximum balance for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return self
     */
    public function setBalanceRange($balance_range)
    {
        if (is_null($balance_range)) {
            throw new \InvalidArgumentException('non-nullable balance_range cannot be null');
        }
        $this->container['balance_range'] = $balance_range;

        return $this;
    }

    /**
     * Gets negative_since_period
     *
     * @return \DateTime[]|null
     */
    public function getNegativeSincePeriod()
    {
        return $this->container['negative_since_period'];
    }

    /**
     * Sets negative_since_period
     *
     * @param \DateTime[]|null $negative_since_period The minimum / maximum negative-since date for users to be returned. Is expressed an array, with the lower bound as first element, and the upper bound as second element. When only one element, will have just the lower bound. To specify only the upper bound, prefix the value with a comma.
     *
     * @return self
     */
    public function setNegativeSincePeriod($negative_since_period)
    {
        if (is_null($negative_since_period)) {
            throw new \InvalidArgumentException('non-nullable negative_since_period cannot be null');
        }
        $this->container['negative_since_period'] = $negative_since_period;

        return $this;
    }

    /**
     * Gets medium_balance_range
     *
     * @return int[]|null
     */
    public function getMediumBalanceRange()
    {
        return $this->container['medium_balance_range'];
    }

    /**
     * Sets medium_balance_range
     *
     * @param int[]|null $medium_balance_range An array with 2 elements, describing the lower and upper medium balance bounds. Both of them need to be set as 2 element in the array, or it won't be considered.
     *
     * @return self
     */
    public function setMediumBalanceRange($medium_balance_range)
    {
        if (is_null($medium_balance_range)) {
            throw new \InvalidArgumentException('non-nullable medium_balance_range cannot be null');
        }
        $this->container['medium_balance_range'] = $medium_balance_range;

        return $this;
    }

    /**
     * Gets order_by
     *
     * @return \OpenAPI\Client\Model\UsersWithBalanceOrderByEnum|null
     */
    public function getOrderBy()
    {
        return $this->container['order_by'];
    }

    /**
     * Sets order_by
     *
     * @param \OpenAPI\Client\Model\UsersWithBalanceOrderByEnum|null $order_by order_by
     *
     * @return self
     */
    public function setOrderBy($order_by)
    {
        if (is_null($order_by)) {
            throw new \InvalidArgumentException('non-nullable order_by cannot be null');
        }
        $this->container['order_by'] = $order_by;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


