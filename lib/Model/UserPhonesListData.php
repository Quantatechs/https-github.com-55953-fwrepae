<?php
/**
 * UserPhonesListData
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Inter TT API
 *
 * The Inter TT REST API is described using OpenAPI 3.0. The descriptor for the api can be downloaded in both [YAML](http://localhost:8080/cyclos/api/openapi.yaml) or [JSON](http://localhost:8080/cyclos/api/openapi.json) formats. These files can be used in tools that support the OpenAPI specification, such as the [OpenAPI Generator](https://openapi-generator.tech).  In the API, whenever some data is referenced, for example, a group, or payment type, either id or internal name can be used. When an user is to be referenced, the special word 'self' (sans quotes) always refers to the currently authenticated user, and any identification method (login name, e-mail, mobile phone, account number or custom field) that can be used on keywords search (as configured in the products) can also be used to identify users. Some specific data types have other identification fields, like accounts can have a number and payments can have a transaction number. This all depends on the current configuration.  -----------  Most of the operations that return data allow selecting which fields to include in the response. This is useful to avoid calculating data that finally won't be needed and also for reducing the transfer over the network. If nothing is set, all object fields are returned. Fields are handled in 3 modes. Given an example object `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}, \"b\": 0}`, the modes are: - **Include**: the field is unprefixed or prefixed with `+`. All fields which   are not explicitly included are excluded from the result. Examples:   - `[\"a\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"+b\"]` results in `{\"b\": 0}`   - `[\"a.x\"]` results in `{\"a\": {\"x\": 1}}`. This is a nested include. At root     level, includes only `a` then, on `a`'s level, includes only `x`.  - **Exclude**: the field is prefixed by `-` (or, for compatibility purposes,   `!`). Only explicitly excluded fields   are excluded from the result. Examples:   - `[\"-a\"]` results in `{\"b\": 0}`   - `[\"-b\"]` results in `{\"a\": {\"x\": 1, \"y\": 2, \"z\": 3}}`   - `[\"a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}}`. In this example, `a` is     actually an include at the root level, hence, excludes `b`.  - **Nested only**: when a field is prefixed by `*` and has a nested path,   it only affects includes / excludes for the nested fields, without affecting   the current level. Only nested fields are configured.   Examples:   - `[\"*a.x\"]` results in `{\"a\": {\"x\": 1}, \"b\": 0}`. In this example, `a` is     configured to include only `x`. `b` is also included because, there is no     explicit includes at root level.   - `[\"*a.-x\"]` results in `{\"a\": {\"y\": 2, \"z\": 3}, \"b\": 0}`. In this example,     `a` is configured to exclude only `x`. `b` is also included because there     is no explicit includes at the root level.     For backwards compatibility, this can also be expressed in a special     syntax `-a.x`. Also, keep in mind that `-x.y.z` is equivalent to `*x.*y.-z`.  You cannot have the same field included and excluded at the same time - a HTTP `422` status will be returned. Also, when mixing nested excludes with explicit includes or excludes, the nested exclude will be ignored. For example, using `[\"*a.x\", \"a.y\"]` will ignore the `*a.x` definition, resulting in `{\"a\": {\"y\": 2}}`.  -----------  For details of the deprecated elements (operations and model) please visit the [deprecation notes page](https://documentation.cyclos.org/4.16.3/api-deprecation.html) for this version.
 *
 * The version of the OpenAPI document: 4.16.3
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 7.2.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * UserPhonesListData Class Doc Comment
 *
 * @category Class
 * @description Contains information for a list of phones
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class UserPhonesListData implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'UserPhonesListData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'user' => '\OpenAPI\Client\Model\User',
        'can_edit' => 'bool',
        'can_create_land_line' => 'bool',
        'can_create_mobile' => 'bool',
        'enable_privacy' => 'bool',
        'sms_enabled' => 'bool',
        'can_verify' => 'bool',
        'can_enable_for_sms' => 'bool',
        'max_mobile_phones' => 'int',
        'max_land_line_phones' => 'int',
        'phones' => '\OpenAPI\Client\Model\PhoneResult[]',
        'land_line_availability' => '\OpenAPI\Client\Model\AvailabilityEnum',
        'mobile_availability' => '\OpenAPI\Client\Model\AvailabilityEnum'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'user' => null,
        'can_edit' => null,
        'can_create_land_line' => null,
        'can_create_mobile' => null,
        'enable_privacy' => null,
        'sms_enabled' => null,
        'can_verify' => null,
        'can_enable_for_sms' => null,
        'max_mobile_phones' => null,
        'max_land_line_phones' => null,
        'phones' => null,
        'land_line_availability' => null,
        'mobile_availability' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'user' => false,
        'can_edit' => false,
        'can_create_land_line' => false,
        'can_create_mobile' => false,
        'enable_privacy' => false,
        'sms_enabled' => false,
        'can_verify' => false,
        'can_enable_for_sms' => false,
        'max_mobile_phones' => false,
        'max_land_line_phones' => false,
        'phones' => false,
        'land_line_availability' => false,
        'mobile_availability' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'user' => 'user',
        'can_edit' => 'canEdit',
        'can_create_land_line' => 'canCreateLandLine',
        'can_create_mobile' => 'canCreateMobile',
        'enable_privacy' => 'enablePrivacy',
        'sms_enabled' => 'smsEnabled',
        'can_verify' => 'canVerify',
        'can_enable_for_sms' => 'canEnableForSms',
        'max_mobile_phones' => 'maxMobilePhones',
        'max_land_line_phones' => 'maxLandLinePhones',
        'phones' => 'phones',
        'land_line_availability' => 'landLineAvailability',
        'mobile_availability' => 'mobileAvailability'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'user' => 'setUser',
        'can_edit' => 'setCanEdit',
        'can_create_land_line' => 'setCanCreateLandLine',
        'can_create_mobile' => 'setCanCreateMobile',
        'enable_privacy' => 'setEnablePrivacy',
        'sms_enabled' => 'setSmsEnabled',
        'can_verify' => 'setCanVerify',
        'can_enable_for_sms' => 'setCanEnableForSms',
        'max_mobile_phones' => 'setMaxMobilePhones',
        'max_land_line_phones' => 'setMaxLandLinePhones',
        'phones' => 'setPhones',
        'land_line_availability' => 'setLandLineAvailability',
        'mobile_availability' => 'setMobileAvailability'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'user' => 'getUser',
        'can_edit' => 'getCanEdit',
        'can_create_land_line' => 'getCanCreateLandLine',
        'can_create_mobile' => 'getCanCreateMobile',
        'enable_privacy' => 'getEnablePrivacy',
        'sms_enabled' => 'getSmsEnabled',
        'can_verify' => 'getCanVerify',
        'can_enable_for_sms' => 'getCanEnableForSms',
        'max_mobile_phones' => 'getMaxMobilePhones',
        'max_land_line_phones' => 'getMaxLandLinePhones',
        'phones' => 'getPhones',
        'land_line_availability' => 'getLandLineAvailability',
        'mobile_availability' => 'getMobileAvailability'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->setIfExists('user', $data ?? [], null);
        $this->setIfExists('can_edit', $data ?? [], null);
        $this->setIfExists('can_create_land_line', $data ?? [], null);
        $this->setIfExists('can_create_mobile', $data ?? [], null);
        $this->setIfExists('enable_privacy', $data ?? [], null);
        $this->setIfExists('sms_enabled', $data ?? [], null);
        $this->setIfExists('can_verify', $data ?? [], null);
        $this->setIfExists('can_enable_for_sms', $data ?? [], null);
        $this->setIfExists('max_mobile_phones', $data ?? [], null);
        $this->setIfExists('max_land_line_phones', $data ?? [], null);
        $this->setIfExists('phones', $data ?? [], null);
        $this->setIfExists('land_line_availability', $data ?? [], null);
        $this->setIfExists('mobile_availability', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets user
     *
     * @return \OpenAPI\Client\Model\User|null
     */
    public function getUser()
    {
        return $this->container['user'];
    }

    /**
     * Sets user
     *
     * @param \OpenAPI\Client\Model\User|null $user user
     *
     * @return self
     */
    public function setUser($user)
    {
        if (is_null($user)) {
            throw new \InvalidArgumentException('non-nullable user cannot be null');
        }
        $this->container['user'] = $user;

        return $this;
    }

    /**
     * Gets can_edit
     *
     * @return bool|null
     */
    public function getCanEdit()
    {
        return $this->container['can_edit'];
    }

    /**
     * Sets can_edit
     *
     * @param bool|null $can_edit Can the authenticated user edit phones of this user?
     *
     * @return self
     */
    public function setCanEdit($can_edit)
    {
        if (is_null($can_edit)) {
            throw new \InvalidArgumentException('non-nullable can_edit cannot be null');
        }
        $this->container['can_edit'] = $can_edit;

        return $this;
    }

    /**
     * Gets can_create_land_line
     *
     * @return bool|null
     */
    public function getCanCreateLandLine()
    {
        return $this->container['can_create_land_line'];
    }

    /**
     * Sets can_create_land_line
     *
     * @param bool|null $can_create_land_line Can the authenticated user create new land-line phones for this user?
     *
     * @return self
     */
    public function setCanCreateLandLine($can_create_land_line)
    {
        if (is_null($can_create_land_line)) {
            throw new \InvalidArgumentException('non-nullable can_create_land_line cannot be null');
        }
        $this->container['can_create_land_line'] = $can_create_land_line;

        return $this;
    }

    /**
     * Gets can_create_mobile
     *
     * @return bool|null
     */
    public function getCanCreateMobile()
    {
        return $this->container['can_create_mobile'];
    }

    /**
     * Sets can_create_mobile
     *
     * @param bool|null $can_create_mobile Can the authenticated user create new mobile phones for this user?
     *
     * @return self
     */
    public function setCanCreateMobile($can_create_mobile)
    {
        if (is_null($can_create_mobile)) {
            throw new \InvalidArgumentException('non-nullable can_create_mobile cannot be null');
        }
        $this->container['can_create_mobile'] = $can_create_mobile;

        return $this;
    }

    /**
     * Gets enable_privacy
     *
     * @return bool|null
     */
    public function getEnablePrivacy()
    {
        return $this->container['enable_privacy'];
    }

    /**
     * Sets enable_privacy
     *
     * @param bool|null $enable_privacy Indicates whether phone privacy can be used for this user
     *
     * @return self
     */
    public function setEnablePrivacy($enable_privacy)
    {
        if (is_null($enable_privacy)) {
            throw new \InvalidArgumentException('non-nullable enable_privacy cannot be null');
        }
        $this->container['enable_privacy'] = $enable_privacy;

        return $this;
    }

    /**
     * Gets sms_enabled
     *
     * @return bool|null
     */
    public function getSmsEnabled()
    {
        return $this->container['sms_enabled'];
    }

    /**
     * Sets sms_enabled
     *
     * @param bool|null $sms_enabled Indicates whether outbound SMS is enabled in Cyclos
     *
     * @return self
     */
    public function setSmsEnabled($sms_enabled)
    {
        if (is_null($sms_enabled)) {
            throw new \InvalidArgumentException('non-nullable sms_enabled cannot be null');
        }
        $this->container['sms_enabled'] = $sms_enabled;

        return $this;
    }

    /**
     * Gets can_verify
     *
     * @return bool|null
     */
    public function getCanVerify()
    {
        return $this->container['can_verify'];
    }

    /**
     * Sets can_verify
     *
     * @param bool|null $can_verify Can the authenticated user verify mobile phones of this user?
     *
     * @return self
     */
    public function setCanVerify($can_verify)
    {
        if (is_null($can_verify)) {
            throw new \InvalidArgumentException('non-nullable can_verify cannot be null');
        }
        $this->container['can_verify'] = $can_verify;

        return $this;
    }

    /**
     * Gets can_enable_for_sms
     *
     * @return bool|null
     */
    public function getCanEnableForSms()
    {
        return $this->container['can_enable_for_sms'];
    }

    /**
     * Sets can_enable_for_sms
     *
     * @param bool|null $can_enable_for_sms Can the authenticated user enable / disable mobile phones of this user to send / receive SMS?
     *
     * @return self
     */
    public function setCanEnableForSms($can_enable_for_sms)
    {
        if (is_null($can_enable_for_sms)) {
            throw new \InvalidArgumentException('non-nullable can_enable_for_sms cannot be null');
        }
        $this->container['can_enable_for_sms'] = $can_enable_for_sms;

        return $this;
    }

    /**
     * Gets max_mobile_phones
     *
     * @return int|null
     */
    public function getMaxMobilePhones()
    {
        return $this->container['max_mobile_phones'];
    }

    /**
     * Sets max_mobile_phones
     *
     * @param int|null $max_mobile_phones Indicates the maximum number of mobile phones this user can have. Is only returned when `canManage` is `true`.
     *
     * @return self
     */
    public function setMaxMobilePhones($max_mobile_phones)
    {
        if (is_null($max_mobile_phones)) {
            throw new \InvalidArgumentException('non-nullable max_mobile_phones cannot be null');
        }
        $this->container['max_mobile_phones'] = $max_mobile_phones;

        return $this;
    }

    /**
     * Gets max_land_line_phones
     *
     * @return int|null
     */
    public function getMaxLandLinePhones()
    {
        return $this->container['max_land_line_phones'];
    }

    /**
     * Sets max_land_line_phones
     *
     * @param int|null $max_land_line_phones Indicates the maximum number of land line (fixed) phones this user can have. Is only returned when `canManage` is `true`.
     *
     * @return self
     */
    public function setMaxLandLinePhones($max_land_line_phones)
    {
        if (is_null($max_land_line_phones)) {
            throw new \InvalidArgumentException('non-nullable max_land_line_phones cannot be null');
        }
        $this->container['max_land_line_phones'] = $max_land_line_phones;

        return $this;
    }

    /**
     * Gets phones
     *
     * @return \OpenAPI\Client\Model\PhoneResult[]|null
     */
    public function getPhones()
    {
        return $this->container['phones'];
    }

    /**
     * Sets phones
     *
     * @param \OpenAPI\Client\Model\PhoneResult[]|null $phones The list of (visible) phones
     *
     * @return self
     */
    public function setPhones($phones)
    {
        if (is_null($phones)) {
            throw new \InvalidArgumentException('non-nullable phones cannot be null');
        }
        $this->container['phones'] = $phones;

        return $this;
    }

    /**
     * Gets land_line_availability
     *
     * @return \OpenAPI\Client\Model\AvailabilityEnum|null
     */
    public function getLandLineAvailability()
    {
        return $this->container['land_line_availability'];
    }

    /**
     * Sets land_line_availability
     *
     * @param \OpenAPI\Client\Model\AvailabilityEnum|null $land_line_availability land_line_availability
     *
     * @return self
     */
    public function setLandLineAvailability($land_line_availability)
    {
        if (is_null($land_line_availability)) {
            throw new \InvalidArgumentException('non-nullable land_line_availability cannot be null');
        }
        $this->container['land_line_availability'] = $land_line_availability;

        return $this;
    }

    /**
     * Gets mobile_availability
     *
     * @return \OpenAPI\Client\Model\AvailabilityEnum|null
     */
    public function getMobileAvailability()
    {
        return $this->container['mobile_availability'];
    }

    /**
     * Sets mobile_availability
     *
     * @param \OpenAPI\Client\Model\AvailabilityEnum|null $mobile_availability mobile_availability
     *
     * @return self
     */
    public function setMobileAvailability($mobile_availability)
    {
        if (is_null($mobile_availability)) {
            throw new \InvalidArgumentException('non-nullable mobile_availability cannot be null');
        }
        $this->container['mobile_availability'] = $mobile_availability;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


